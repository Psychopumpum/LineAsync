#
# Autogenerated by Frugal Compiler (3.16.5)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from frugal.util import make_hashable
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol


class ApplicationType(int):
    IOS = 16
    IOS_RC = 17
    IOS_BETA = 18
    IOS_ALPHA = 19
    ANDROID = 32
    ANDROID_RC = 33
    ANDROID_BETA = 34
    ANDROID_ALPHA = 35
    WAP = 48
    WAP_RC = 49
    WAP_BETA = 50
    WAP_ALPHA = 51
    BOT = 64
    BOT_RC = 65
    BOT_BETA = 66
    BOT_ALPHA = 67
    WEB = 80
    WEB_RC = 81
    WEB_BETA = 82
    WEB_ALPHA = 83
    DESKTOPWIN = 96
    DESKTOPWIN_RC = 97
    DESKTOPWIN_BETA = 98
    DESKTOPWIN_ALPHA = 99
    DESKTOPMAC = 112
    DESKTOPMAC_RC = 113
    DESKTOPMAC_BETA = 114
    DESKTOPMAC_ALPHA = 115
    CHANNELGW = 128
    CHANNELGW_RC = 129
    CHANNELGW_BETA = 130
    CHANNELGW_ALPHA = 131
    CHANNELCP = 144
    CHANNELCP_RC = 145
    CHANNELCP_BETA = 146
    CHANNELCP_ALPHA = 147
    WINPHONE = 160
    WINPHONE_RC = 161
    WINPHONE_BETA = 162
    WINPHONE_ALPHA = 163
    BLACKBERRY = 176
    BLACKBERRY_RC = 177
    BLACKBERRY_BETA = 178
    BLACKBERRY_ALPHA = 179
    WINMETRO = 192
    WINMETRO_RC = 193
    WINMETRO_BETA = 194
    WINMETRO_ALPHA = 195
    S40 = 208
    S40_RC = 209
    S40_BETA = 210
    S40_ALPHA = 211
    CHRONO = 224
    CHRONO_RC = 225
    CHRONO_BETA = 226
    CHRONO_ALPHA = 227
    TIZEN = 256
    TIZEN_RC = 257
    TIZEN_BETA = 258
    TIZEN_ALPHA = 259
    VIRTUAL = 272
    FIREFOXOS = 288
    FIREFOXOS_RC = 289
    FIREFOXOS_BETA = 290
    FIREFOXOS_ALPHA = 291
    IOSIPAD = 304
    IOSIPAD_RC = 305
    IOSIPAD_BETA = 306
    IOSIPAD_ALPHA = 307
    BIZIOS = 320
    BIZIOS_RC = 321
    BIZIOS_BETA = 322
    BIZIOS_ALPHA = 323
    BIZANDROID = 336
    BIZANDROID_RC = 337
    BIZANDROID_BETA = 338
    BIZANDROID_ALPHA = 339
    BIZBOT = 352
    BIZBOT_RC = 353
    BIZBOT_BETA = 354
    BIZBOT_ALPHA = 355
    CHROMEOS = 368
    CHROMEOS_RC = 369
    CHROMEOS_BETA = 370
    CHROMEOS_ALPHA = 371
    ANDROIDLITE = 384
    ANDROIDLITE_RC = 385
    ANDROIDLITE_BETA = 386
    ANDROIDLITE_ALPHA = 387
    WIN10 = 400
    WIN10_RC = 401
    WIN10_BETA = 402
    WIN10_ALPHA = 403
    BIZWEB = 416
    BIZWEB_RC = 417
    BIZWEB_BETA = 418
    BIZWEB_ALPHA = 419
    DUMMYPRIMARY = 432
    DUMMYPRIMARY_RC = 433
    DUMMYPRIMARY_BETA = 434
    DUMMYPRIMARY_ALPHA = 435
    SQUARE = 448
    SQUARE_RC = 449
    SQUARE_BETA = 450
    SQUARE_ALPHA = 451
    INTERNAL = 464
    INTERNAL_RC = 465
    INTERNAL_BETA = 466
    INTERNAL_ALPHA = 467
    CLOVAFRIENDS = 480
    CLOVAFRIENDS_RC = 481
    CLOVAFRIENDS_BETA = 482
    CLOVAFRIENDS_ALPHA = 483
    WATCHOS = 496
    WATCHOS_RC = 497
    WATCHOS_BETA = 498
    WATCHOS_ALPHA = 499
    OPENCHAT_PLUG = 512
    OPENCHAT_PLUG_RC = 513
    OPENCHAT_PLUG_BETA = 514
    OPENCHAT_PLUG_ALPHA = 515
    ANDROIDSECONDARY = 528
    ANDROIDSECONDARY_RC = 529
    ANDROIDSECONDARY_BETA = 530
    ANDROIDSECONDARY_ALPHA = 531
    WEAROS = 544
    WEAROS_RC = 545
    WEAROS_BETA = 546
    WEAROS_ALPHA = 547

    _VALUES_TO_NAMES = {
        16: "IOS",
        17: "IOS_RC",
        18: "IOS_BETA",
        19: "IOS_ALPHA",
        32: "ANDROID",
        33: "ANDROID_RC",
        34: "ANDROID_BETA",
        35: "ANDROID_ALPHA",
        48: "WAP",
        49: "WAP_RC",
        50: "WAP_BETA",
        51: "WAP_ALPHA",
        64: "BOT",
        65: "BOT_RC",
        66: "BOT_BETA",
        67: "BOT_ALPHA",
        80: "WEB",
        81: "WEB_RC",
        82: "WEB_BETA",
        83: "WEB_ALPHA",
        96: "DESKTOPWIN",
        97: "DESKTOPWIN_RC",
        98: "DESKTOPWIN_BETA",
        99: "DESKTOPWIN_ALPHA",
        112: "DESKTOPMAC",
        113: "DESKTOPMAC_RC",
        114: "DESKTOPMAC_BETA",
        115: "DESKTOPMAC_ALPHA",
        128: "CHANNELGW",
        129: "CHANNELGW_RC",
        130: "CHANNELGW_BETA",
        131: "CHANNELGW_ALPHA",
        144: "CHANNELCP",
        145: "CHANNELCP_RC",
        146: "CHANNELCP_BETA",
        147: "CHANNELCP_ALPHA",
        160: "WINPHONE",
        161: "WINPHONE_RC",
        162: "WINPHONE_BETA",
        163: "WINPHONE_ALPHA",
        176: "BLACKBERRY",
        177: "BLACKBERRY_RC",
        178: "BLACKBERRY_BETA",
        179: "BLACKBERRY_ALPHA",
        192: "WINMETRO",
        193: "WINMETRO_RC",
        194: "WINMETRO_BETA",
        195: "WINMETRO_ALPHA",
        208: "S40",
        209: "S40_RC",
        210: "S40_BETA",
        211: "S40_ALPHA",
        224: "CHRONO",
        225: "CHRONO_RC",
        226: "CHRONO_BETA",
        227: "CHRONO_ALPHA",
        256: "TIZEN",
        257: "TIZEN_RC",
        258: "TIZEN_BETA",
        259: "TIZEN_ALPHA",
        272: "VIRTUAL",
        288: "FIREFOXOS",
        289: "FIREFOXOS_RC",
        290: "FIREFOXOS_BETA",
        291: "FIREFOXOS_ALPHA",
        304: "IOSIPAD",
        305: "IOSIPAD_RC",
        306: "IOSIPAD_BETA",
        307: "IOSIPAD_ALPHA",
        320: "BIZIOS",
        321: "BIZIOS_RC",
        322: "BIZIOS_BETA",
        323: "BIZIOS_ALPHA",
        336: "BIZANDROID",
        337: "BIZANDROID_RC",
        338: "BIZANDROID_BETA",
        339: "BIZANDROID_ALPHA",
        352: "BIZBOT",
        353: "BIZBOT_RC",
        354: "BIZBOT_BETA",
        355: "BIZBOT_ALPHA",
        368: "CHROMEOS",
        369: "CHROMEOS_RC",
        370: "CHROMEOS_BETA",
        371: "CHROMEOS_ALPHA",
        384: "ANDROIDLITE",
        385: "ANDROIDLITE_RC",
        386: "ANDROIDLITE_BETA",
        387: "ANDROIDLITE_ALPHA",
        400: "WIN10",
        401: "WIN10_RC",
        402: "WIN10_BETA",
        403: "WIN10_ALPHA",
        416: "BIZWEB",
        417: "BIZWEB_RC",
        418: "BIZWEB_BETA",
        419: "BIZWEB_ALPHA",
        432: "DUMMYPRIMARY",
        433: "DUMMYPRIMARY_RC",
        434: "DUMMYPRIMARY_BETA",
        435: "DUMMYPRIMARY_ALPHA",
        448: "SQUARE",
        449: "SQUARE_RC",
        450: "SQUARE_BETA",
        451: "SQUARE_ALPHA",
        464: "INTERNAL",
        465: "INTERNAL_RC",
        466: "INTERNAL_BETA",
        467: "INTERNAL_ALPHA",
        480: "CLOVAFRIENDS",
        481: "CLOVAFRIENDS_RC",
        482: "CLOVAFRIENDS_BETA",
        483: "CLOVAFRIENDS_ALPHA",
        496: "WATCHOS",
        497: "WATCHOS_RC",
        498: "WATCHOS_BETA",
        499: "WATCHOS_ALPHA",
        512: "OPENCHAT_PLUG",
        513: "OPENCHAT_PLUG_RC",
        514: "OPENCHAT_PLUG_BETA",
        515: "OPENCHAT_PLUG_ALPHA",
        528: "ANDROIDSECONDARY",
        529: "ANDROIDSECONDARY_RC",
        530: "ANDROIDSECONDARY_BETA",
        531: "ANDROIDSECONDARY_ALPHA",
        544: "WEAROS",
        545: "WEAROS_RC",
        546: "WEAROS_BETA",
        547: "WEAROS_ALPHA",
    }

    _NAMES_TO_VALUES = {
        "IOS": 16,
        "IOS_RC": 17,
        "IOS_BETA": 18,
        "IOS_ALPHA": 19,
        "ANDROID": 32,
        "ANDROID_RC": 33,
        "ANDROID_BETA": 34,
        "ANDROID_ALPHA": 35,
        "WAP": 48,
        "WAP_RC": 49,
        "WAP_BETA": 50,
        "WAP_ALPHA": 51,
        "BOT": 64,
        "BOT_RC": 65,
        "BOT_BETA": 66,
        "BOT_ALPHA": 67,
        "WEB": 80,
        "WEB_RC": 81,
        "WEB_BETA": 82,
        "WEB_ALPHA": 83,
        "DESKTOPWIN": 96,
        "DESKTOPWIN_RC": 97,
        "DESKTOPWIN_BETA": 98,
        "DESKTOPWIN_ALPHA": 99,
        "DESKTOPMAC": 112,
        "DESKTOPMAC_RC": 113,
        "DESKTOPMAC_BETA": 114,
        "DESKTOPMAC_ALPHA": 115,
        "CHANNELGW": 128,
        "CHANNELGW_RC": 129,
        "CHANNELGW_BETA": 130,
        "CHANNELGW_ALPHA": 131,
        "CHANNELCP": 144,
        "CHANNELCP_RC": 145,
        "CHANNELCP_BETA": 146,
        "CHANNELCP_ALPHA": 147,
        "WINPHONE": 160,
        "WINPHONE_RC": 161,
        "WINPHONE_BETA": 162,
        "WINPHONE_ALPHA": 163,
        "BLACKBERRY": 176,
        "BLACKBERRY_RC": 177,
        "BLACKBERRY_BETA": 178,
        "BLACKBERRY_ALPHA": 179,
        "WINMETRO": 192,
        "WINMETRO_RC": 193,
        "WINMETRO_BETA": 194,
        "WINMETRO_ALPHA": 195,
        "S40": 208,
        "S40_RC": 209,
        "S40_BETA": 210,
        "S40_ALPHA": 211,
        "CHRONO": 224,
        "CHRONO_RC": 225,
        "CHRONO_BETA": 226,
        "CHRONO_ALPHA": 227,
        "TIZEN": 256,
        "TIZEN_RC": 257,
        "TIZEN_BETA": 258,
        "TIZEN_ALPHA": 259,
        "VIRTUAL": 272,
        "FIREFOXOS": 288,
        "FIREFOXOS_RC": 289,
        "FIREFOXOS_BETA": 290,
        "FIREFOXOS_ALPHA": 291,
        "IOSIPAD": 304,
        "IOSIPAD_RC": 305,
        "IOSIPAD_BETA": 306,
        "IOSIPAD_ALPHA": 307,
        "BIZIOS": 320,
        "BIZIOS_RC": 321,
        "BIZIOS_BETA": 322,
        "BIZIOS_ALPHA": 323,
        "BIZANDROID": 336,
        "BIZANDROID_RC": 337,
        "BIZANDROID_BETA": 338,
        "BIZANDROID_ALPHA": 339,
        "BIZBOT": 352,
        "BIZBOT_RC": 353,
        "BIZBOT_BETA": 354,
        "BIZBOT_ALPHA": 355,
        "CHROMEOS": 368,
        "CHROMEOS_RC": 369,
        "CHROMEOS_BETA": 370,
        "CHROMEOS_ALPHA": 371,
        "ANDROIDLITE": 384,
        "ANDROIDLITE_RC": 385,
        "ANDROIDLITE_BETA": 386,
        "ANDROIDLITE_ALPHA": 387,
        "WIN10": 400,
        "WIN10_RC": 401,
        "WIN10_BETA": 402,
        "WIN10_ALPHA": 403,
        "BIZWEB": 416,
        "BIZWEB_RC": 417,
        "BIZWEB_BETA": 418,
        "BIZWEB_ALPHA": 419,
        "DUMMYPRIMARY": 432,
        "DUMMYPRIMARY_RC": 433,
        "DUMMYPRIMARY_BETA": 434,
        "DUMMYPRIMARY_ALPHA": 435,
        "SQUARE": 448,
        "SQUARE_RC": 449,
        "SQUARE_BETA": 450,
        "SQUARE_ALPHA": 451,
        "INTERNAL": 464,
        "INTERNAL_RC": 465,
        "INTERNAL_BETA": 466,
        "INTERNAL_ALPHA": 467,
        "CLOVAFRIENDS": 480,
        "CLOVAFRIENDS_RC": 481,
        "CLOVAFRIENDS_BETA": 482,
        "CLOVAFRIENDS_ALPHA": 483,
        "WATCHOS": 496,
        "WATCHOS_RC": 497,
        "WATCHOS_BETA": 498,
        "WATCHOS_ALPHA": 499,
        "OPENCHAT_PLUG": 512,
        "OPENCHAT_PLUG_RC": 513,
        "OPENCHAT_PLUG_BETA": 514,
        "OPENCHAT_PLUG_ALPHA": 515,
        "ANDROIDSECONDARY": 528,
        "ANDROIDSECONDARY_RC": 529,
        "ANDROIDSECONDARY_BETA": 530,
        "ANDROIDSECONDARY_ALPHA": 531,
        "WEAROS": 544,
        "WEAROS_RC": 545,
        "WEAROS_BETA": 546,
        "WEAROS_ALPHA": 547,
    }

class Carrier(int):
    NOT_SPECIFIED = 0
    JP_DOCOMO = 1
    JP_AU = 2
    JP_SOFTBANK = 3
    KR_SKT = 17
    KR_KT = 18
    KR_LGT = 19
    JP_DOCOMO_LINE = 4
    JP_SOFTBANK_LINE = 5
    JP_AU_LINE = 6
    JP_RAKUTEN = 7
    JP_MVNO = 8

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "JP_DOCOMO",
        2: "JP_AU",
        3: "JP_SOFTBANK",
        17: "KR_SKT",
        18: "KR_KT",
        19: "KR_LGT",
        4: "JP_DOCOMO_LINE",
        5: "JP_SOFTBANK_LINE",
        6: "JP_AU_LINE",
        7: "JP_RAKUTEN",
        8: "JP_MVNO",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "JP_DOCOMO": 1,
        "JP_AU": 2,
        "JP_SOFTBANK": 3,
        "KR_SKT": 17,
        "KR_KT": 18,
        "KR_LGT": 19,
        "JP_DOCOMO_LINE": 4,
        "JP_SOFTBANK_LINE": 5,
        "JP_AU_LINE": 6,
        "JP_RAKUTEN": 7,
        "JP_MVNO": 8,
    }

class IdentityProvider(int):
    UNKNOWN = 0
    LINE = 1
    NAVER_KR = 2
    LINE_PHONE = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "LINE",
        2: "NAVER_KR",
        3: "LINE_PHONE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "LINE": 1,
        "NAVER_KR": 2,
        "LINE_PHONE": 3,
    }

class UserAge(int):
    OVER = 1
    UNDER = 2
    UNDEFINED = 3

    _VALUES_TO_NAMES = {
        1: "OVER",
        2: "UNDER",
        3: "UNDEFINED",
    }

    _NAMES_TO_VALUES = {
        "OVER": 1,
        "UNDER": 2,
        "UNDEFINED": 3,
    }

class FullSyncReason(int):
    UNKNOWN = 0
    REVISION_GAP_TOO_LARGE_CLIENT = 1
    REVISION_GAP_TOO_LARGE_SERVER = 2
    OPERATION_EXPIRED = 3
    REVISION_HOLE = 4
    FORCE_TRIGGERED = 5

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "REVISION_GAP_TOO_LARGE_CLIENT",
        2: "REVISION_GAP_TOO_LARGE_SERVER",
        3: "OPERATION_EXPIRED",
        4: "REVISION_HOLE",
        5: "FORCE_TRIGGERED",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "REVISION_GAP_TOO_LARGE_CLIENT": 1,
        "REVISION_GAP_TOO_LARGE_SERVER": 2,
        "OPERATION_EXPIRED": 3,
        "REVISION_HOLE": 4,
        "FORCE_TRIGGERED": 5,
    }

class MessageRelationType(int):
    FORWARD = 0
    AUTO_REPLY = 1
    SUBORDINATE = 2
    REPLY = 3

    _VALUES_TO_NAMES = {
        0: "FORWARD",
        1: "AUTO_REPLY",
        2: "SUBORDINATE",
        3: "REPLY",
    }

    _NAMES_TO_VALUES = {
        "FORWARD": 0,
        "AUTO_REPLY": 1,
        "SUBORDINATE": 2,
        "REPLY": 3,
    }

class RelatedMessageServiceCode(int):
    UNKNOWN = 0
    TALK = 1
    SQUARE = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "TALK",
        2: "SQUARE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "TALK": 1,
        "SQUARE": 2,
    }

class PredefinedReactionType(int):
    NICE = 2
    LOVE = 3
    FUN = 4
    AMAZING = 5
    SAD = 6
    OMG = 7

    _VALUES_TO_NAMES = {
        2: "NICE",
        3: "LOVE",
        4: "FUN",
        5: "AMAZING",
        6: "SAD",
        7: "OMG",
    }

    _NAMES_TO_VALUES = {
        "NICE": 2,
        "LOVE": 3,
        "FUN": 4,
        "AMAZING": 5,
        "SAD": 6,
        "OMG": 7,
    }

class ChatAttribute(int):
    NAME = 1
    PICTURE_STATUS = 2
    PREVENTED_JOIN_BY_TICKET = 4
    NOTIFICATION_SETTING = 8
    INVITATION_TICKET = 16
    FAVORITE_TIMESTAMP = 32
    CHAT_TYPE = 64

    _VALUES_TO_NAMES = {
        1: "NAME",
        2: "PICTURE_STATUS",
        4: "PREVENTED_JOIN_BY_TICKET",
        8: "NOTIFICATION_SETTING",
        16: "INVITATION_TICKET",
        32: "FAVORITE_TIMESTAMP",
        64: "CHAT_TYPE",
    }

    _NAMES_TO_VALUES = {
        "NAME": 1,
        "PICTURE_STATUS": 2,
        "PREVENTED_JOIN_BY_TICKET": 4,
        "NOTIFICATION_SETTING": 8,
        "INVITATION_TICKET": 16,
        "FAVORITE_TIMESTAMP": 32,
        "CHAT_TYPE": 64,
    }

class ContentType(int):
    NONE = 0
    IMAGE = 1
    VIDEO = 2
    AUDIO = 3
    HTML = 4
    PDF = 5
    CALL = 6
    STICKER = 7
    PRESENCE = 8
    GIFT = 9
    GROUPBOARD = 10
    APPLINK = 11
    LINK = 12
    CONTACT = 13
    FILE = 14
    LOCATION = 15
    POSTNOTIFICATION = 16
    RICH = 17
    CHATEVENT = 18
    MUSIC = 19
    PAYMENT = 20
    EXTIMAGE = 21
    FLEX = 22

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "IMAGE",
        2: "VIDEO",
        3: "AUDIO",
        4: "HTML",
        5: "PDF",
        6: "CALL",
        7: "STICKER",
        8: "PRESENCE",
        9: "GIFT",
        10: "GROUPBOARD",
        11: "APPLINK",
        12: "LINK",
        13: "CONTACT",
        14: "FILE",
        15: "LOCATION",
        16: "POSTNOTIFICATION",
        17: "RICH",
        18: "CHATEVENT",
        19: "MUSIC",
        20: "PAYMENT",
        21: "EXTIMAGE",
        22: "FLEX",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "IMAGE": 1,
        "VIDEO": 2,
        "AUDIO": 3,
        "HTML": 4,
        "PDF": 5,
        "CALL": 6,
        "STICKER": 7,
        "PRESENCE": 8,
        "GIFT": 9,
        "GROUPBOARD": 10,
        "APPLINK": 11,
        "LINK": 12,
        "CONTACT": 13,
        "FILE": 14,
        "LOCATION": 15,
        "POSTNOTIFICATION": 16,
        "RICH": 17,
        "CHATEVENT": 18,
        "MUSIC": 19,
        "PAYMENT": 20,
        "EXTIMAGE": 21,
        "FLEX": 22,
    }

class MidType(int):
    USER = 0
    ROOM = 1
    GROUP = 2
    SQUARE = 3
    SQUARE_CHAT = 4
    SQUARE_MEMBER = 5
    BOT = 6

    _VALUES_TO_NAMES = {
        0: "USER",
        1: "ROOM",
        2: "GROUP",
        3: "SQUARE",
        4: "SQUARE_CHAT",
        5: "SQUARE_MEMBER",
        6: "BOT",
    }

    _NAMES_TO_VALUES = {
        "USER": 0,
        "ROOM": 1,
        "GROUP": 2,
        "SQUARE": 3,
        "SQUARE_CHAT": 4,
        "SQUARE_MEMBER": 5,
        "BOT": 6,
    }

class ContactType(int):
    MID = 0
    PHONE = 1
    EMAIL = 2
    USERID = 3
    PROXIMITY = 4
    GROUP = 5
    USER = 6
    QRCODE = 7
    PROMOTION_BOT = 8
    CONTACT_MESSAGE = 9
    FRIEND_REQUEST = 10
    REPAIR = 128
    FACEBOOK = 2305
    SINA = 2306
    RENREN = 2307
    FEIXIN = 2308
    BBM = 2309
    BEACON = 11

    _VALUES_TO_NAMES = {
        0: "MID",
        1: "PHONE",
        2: "EMAIL",
        3: "USERID",
        4: "PROXIMITY",
        5: "GROUP",
        6: "USER",
        7: "QRCODE",
        8: "PROMOTION_BOT",
        9: "CONTACT_MESSAGE",
        10: "FRIEND_REQUEST",
        128: "REPAIR",
        2305: "FACEBOOK",
        2306: "SINA",
        2307: "RENREN",
        2308: "FEIXIN",
        2309: "BBM",
        11: "BEACON",
    }

    _NAMES_TO_VALUES = {
        "MID": 0,
        "PHONE": 1,
        "EMAIL": 2,
        "USERID": 3,
        "PROXIMITY": 4,
        "GROUP": 5,
        "USER": 6,
        "QRCODE": 7,
        "PROMOTION_BOT": 8,
        "CONTACT_MESSAGE": 9,
        "FRIEND_REQUEST": 10,
        "REPAIR": 128,
        "FACEBOOK": 2305,
        "SINA": 2306,
        "RENREN": 2307,
        "FEIXIN": 2308,
        "BBM": 2309,
        "BEACON": 11,
    }

class ContactStatus(int):
    UNSPECIFIED = 0
    FRIEND = 1
    FRIEND_BLOCKED = 2
    RECOMMEND = 3
    RECOMMEND_BLOCKED = 4
    DELETED = 5
    DELETED_BLOCKED = 6

    _VALUES_TO_NAMES = {
        0: "UNSPECIFIED",
        1: "FRIEND",
        2: "FRIEND_BLOCKED",
        3: "RECOMMEND",
        4: "RECOMMEND_BLOCKED",
        5: "DELETED",
        6: "DELETED_BLOCKED",
    }

    _NAMES_TO_VALUES = {
        "UNSPECIFIED": 0,
        "FRIEND": 1,
        "FRIEND_BLOCKED": 2,
        "RECOMMEND": 3,
        "RECOMMEND_BLOCKED": 4,
        "DELETED": 5,
        "DELETED_BLOCKED": 6,
    }

class ContactRelation(int):
    ONEWAY = 0
    BOTH = 1
    NOT_REGISTERED = 2

    _VALUES_TO_NAMES = {
        0: "ONEWAY",
        1: "BOTH",
        2: "NOT_REGISTERED",
    }

    _NAMES_TO_VALUES = {
        "ONEWAY": 0,
        "BOTH": 1,
        "NOT_REGISTERED": 2,
    }

class ContactSetting(int):
    CONTACT_SETTING_NOTIFICATION_DISABLE = 1
    CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2
    CONTACT_SETTING_CONTACT_HIDE = 4
    CONTACT_SETTING_FAVORITE = 8
    CONTACT_SETTING_DELETE = 16
    CONTACT_SETTING_FRIEND_RINGTONE = 32
    CONTACT_SETTING_FRIEND_RINGBACK_TONE = 64

    _VALUES_TO_NAMES = {
        1: "CONTACT_SETTING_NOTIFICATION_DISABLE",
        2: "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE",
        4: "CONTACT_SETTING_CONTACT_HIDE",
        8: "CONTACT_SETTING_FAVORITE",
        16: "CONTACT_SETTING_DELETE",
        32: "CONTACT_SETTING_FRIEND_RINGTONE",
        64: "CONTACT_SETTING_FRIEND_RINGBACK_TONE",
    }

    _NAMES_TO_VALUES = {
        "CONTACT_SETTING_NOTIFICATION_DISABLE": 1,
        "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": 2,
        "CONTACT_SETTING_CONTACT_HIDE": 4,
        "CONTACT_SETTING_FAVORITE": 8,
        "CONTACT_SETTING_DELETE": 16,
        "CONTACT_SETTING_FRIEND_RINGTONE": 32,
        "CONTACT_SETTING_FRIEND_RINGBACK_TONE": 64,
    }

class ContactModificationType(int):
    ADD = 0
    REMOVE = 1
    MODIFY = 2

    _VALUES_TO_NAMES = {
        0: "ADD",
        1: "REMOVE",
        2: "MODIFY",
    }

    _NAMES_TO_VALUES = {
        "ADD": 0,
        "REMOVE": 1,
        "MODIFY": 2,
    }

class AnnouncementType(int):
    MESSAGE = 0
    NOTE = 1
    CHANNEL = 2

    _VALUES_TO_NAMES = {
        0: "MESSAGE",
        1: "NOTE",
        2: "CHANNEL",
    }

    _NAMES_TO_VALUES = {
        "MESSAGE": 0,
        "NOTE": 1,
        "CHANNEL": 2,
    }

class DeletePermission(int):
    ANYONE_IN_CHAT = 0
    CREATOR_ONLY = 1
    NO_ONE = 2

    _VALUES_TO_NAMES = {
        0: "ANYONE_IN_CHAT",
        1: "CREATOR_ONLY",
        2: "NO_ONE",
    }

    _NAMES_TO_VALUES = {
        "ANYONE_IN_CHAT": 0,
        "CREATOR_ONLY": 1,
        "NO_ONE": 2,
    }

class PrivacyAllowProfileHistory(int):
    OWNER = 0
    FRIEND = 1

    _VALUES_TO_NAMES = {
        0: "OWNER",
        1: "FRIEND",
    }

    _NAMES_TO_VALUES = {
        "OWNER": 0,
        "FRIEND": 1,
    }

class PrivacyStatusMessageHistory(int):
    NONE = 1
    ALL = 2

    _VALUES_TO_NAMES = {
        1: "NONE",
        2: "ALL",
    }

    _NAMES_TO_VALUES = {
        "NONE": 1,
        "ALL": 2,
    }

class PrivacySharePersonalInfoToFriends(int):
    NEVER_SHOW = 0
    ONE_WAY = 1
    MUTUAL = 2

    _VALUES_TO_NAMES = {
        0: "NEVER_SHOW",
        1: "ONE_WAY",
        2: "MUTUAL",
    }

    _NAMES_TO_VALUES = {
        "NEVER_SHOW": 0,
        "ONE_WAY": 1,
        "MUTUAL": 2,
    }

class FriendRequestStatus(int):
    NONE = 0
    AVAILABLE = 1
    ALREADY_REQUESTED = 2
    UNAVAILABLE = 3

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "AVAILABLE",
        2: "ALREADY_REQUESTED",
        3: "UNAVAILABLE",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "AVAILABLE": 1,
        "ALREADY_REQUESTED": 2,
        "UNAVAILABLE": 3,
    }

class FriendRequestMethod(int):
    TIMELINE = 1
    NEARBY = 2
    SQUARE = 3

    _VALUES_TO_NAMES = {
        1: "TIMELINE",
        2: "NEARBY",
        3: "SQUARE",
    }

    _NAMES_TO_VALUES = {
        "TIMELINE": 1,
        "NEARBY": 2,
        "SQUARE": 3,
    }

class FriendRequestDirection(int):
    INCOMING = 1
    OUTGOING = 2

    _VALUES_TO_NAMES = {
        1: "INCOMING",
        2: "OUTGOING",
    }

    _NAMES_TO_VALUES = {
        "INCOMING": 1,
        "OUTGOING": 2,
    }

class BooleanState(int):
    BEACON_AGREEMENT = 1
    BLUETOOTH = 2
    SHAKE_AGREEMENT = 3
    AUTO_SUGGEST = 4
    CHATROOM_CAPTURE = 5
    CHATROOM_MINIMIZEBROWSER = 6
    CHATROOM_MOBILESAFARI = 7
    VIDEO_HIGHTLIGHT_WIZARD = 8
    CHAT_FOLDER = 9

    _VALUES_TO_NAMES = {
        1: "BEACON_AGREEMENT",
        2: "BLUETOOTH",
        3: "SHAKE_AGREEMENT",
        4: "AUTO_SUGGEST",
        5: "CHATROOM_CAPTURE",
        6: "CHATROOM_MINIMIZEBROWSER",
        7: "CHATROOM_MOBILESAFARI",
        8: "VIDEO_HIGHTLIGHT_WIZARD",
        9: "CHAT_FOLDER",
    }

    _NAMES_TO_VALUES = {
        "BEACON_AGREEMENT": 1,
        "BLUETOOTH": 2,
        "SHAKE_AGREEMENT": 3,
        "AUTO_SUGGEST": 4,
        "CHATROOM_CAPTURE": 5,
        "CHATROOM_MINIMIZEBROWSER": 6,
        "CHATROOM_MOBILESAFARI": 7,
        "VIDEO_HIGHTLIGHT_WIZARD": 8,
        "CHAT_FOLDER": 9,
    }

class StringState(int):
    LOCATION_OS = 1
    LOCATION_APP = 2
    VIDEO_AUTO_PLAY = 3
    HNI = 4
    AUTO_SUGGEST_LANG = 5
    CHAT_EFFECT_CACHED_CONTENT_LIST = 6
    IFA = 7

    _VALUES_TO_NAMES = {
        1: "LOCATION_OS",
        2: "LOCATION_APP",
        3: "VIDEO_AUTO_PLAY",
        4: "HNI",
        5: "AUTO_SUGGEST_LANG",
        6: "CHAT_EFFECT_CACHED_CONTENT_LIST",
        7: "IFA",
    }

    _NAMES_TO_VALUES = {
        "LOCATION_OS": 1,
        "LOCATION_APP": 2,
        "VIDEO_AUTO_PLAY": 3,
        "HNI": 4,
        "AUTO_SUGGEST_LANG": 5,
        "CHAT_EFFECT_CACHED_CONTENT_LIST": 6,
        "IFA": 7,
    }

class CalendarState(int):
    SHOW = 0
    HIDE = 1

    _VALUES_TO_NAMES = {
        0: "SHOW",
        1: "HIDE",
    }

    _NAMES_TO_VALUES = {
        "SHOW": 0,
        "HIDE": 1,
    }

class FeatureType(int):
    OBS_VIDEO = 1
    OBS_GENERAL = 2
    OBS_RINGBACK_TONE = 3

    _VALUES_TO_NAMES = {
        1: "OBS_VIDEO",
        2: "OBS_GENERAL",
        3: "OBS_RINGBACK_TONE",
    }

    _NAMES_TO_VALUES = {
        "OBS_VIDEO": 1,
        "OBS_GENERAL": 2,
        "OBS_RINGBACK_TONE": 3,
    }

class SyncReason(int):
    UNSPECIFIED = 0
    UNKNOWN = 1
    INITIALIZATION = 2
    OPERATION = 3
    FULL_SYNC = 4
    AUTO_REPAIR = 5
    MANUAL_REPAIR = 6
    INTERNAL = 7
    USER_INITIATED = 8

    _VALUES_TO_NAMES = {
        0: "UNSPECIFIED",
        1: "UNKNOWN",
        2: "INITIALIZATION",
        3: "OPERATION",
        4: "FULL_SYNC",
        5: "AUTO_REPAIR",
        6: "MANUAL_REPAIR",
        7: "INTERNAL",
        8: "USER_INITIATED",
    }

    _NAMES_TO_VALUES = {
        "UNSPECIFIED": 0,
        "UNKNOWN": 1,
        "INITIALIZATION": 2,
        "OPERATION": 3,
        "FULL_SYNC": 4,
        "AUTO_REPAIR": 5,
        "MANUAL_REPAIR": 6,
        "INTERNAL": 7,
        "USER_INITIATED": 8,
    }

class ChatType(int):
    GROUP = 0
    ROOM = 1
    PEER = 2

    _VALUES_TO_NAMES = {
        0: "GROUP",
        1: "ROOM",
        2: "PEER",
    }

    _NAMES_TO_VALUES = {
        "GROUP": 0,
        "ROOM": 1,
        "PEER": 2,
    }

class ChatEffectCategories(int):
    BACKGROUND = 0
    KEYWORD = 1

    _VALUES_TO_NAMES = {
        0: "BACKGROUND",
        1: "KEYWORD",
    }

    _NAMES_TO_VALUES = {
        "BACKGROUND": 0,
        "KEYWORD": 1,
    }

class TokenNotificationType(int):
    APPLE_APNS = 1
    GOOGLE_C2DM = 2
    NHN_NNI = 3
    SKT_AOM = 4
    MS_MPNS = 5
    RIM_BIS = 6
    GOOGLE_GCM = 7
    NOKIA_NNAPI = 8
    TIZEN = 9
    MOZILLA_SIMPLE = 10
    LINE_BOT = 17
    LINE_WAP = 18
    APPLE_APNS_VOIP = 19
    MS_WNS = 20
    GOOGLE_FCM = 21
    CLOVA = 22
    CLOVA_VOIP = 23
    HUAWEI_HCM = 24

    _VALUES_TO_NAMES = {
        1: "APPLE_APNS",
        2: "GOOGLE_C2DM",
        3: "NHN_NNI",
        4: "SKT_AOM",
        5: "MS_MPNS",
        6: "RIM_BIS",
        7: "GOOGLE_GCM",
        8: "NOKIA_NNAPI",
        9: "TIZEN",
        10: "MOZILLA_SIMPLE",
        17: "LINE_BOT",
        18: "LINE_WAP",
        19: "APPLE_APNS_VOIP",
        20: "MS_WNS",
        21: "GOOGLE_FCM",
        22: "CLOVA",
        23: "CLOVA_VOIP",
        24: "HUAWEI_HCM",
    }

    _NAMES_TO_VALUES = {
        "APPLE_APNS": 1,
        "GOOGLE_C2DM": 2,
        "NHN_NNI": 3,
        "SKT_AOM": 4,
        "MS_MPNS": 5,
        "RIM_BIS": 6,
        "GOOGLE_GCM": 7,
        "NOKIA_NNAPI": 8,
        "TIZEN": 9,
        "MOZILLA_SIMPLE": 10,
        "LINE_BOT": 17,
        "LINE_WAP": 18,
        "APPLE_APNS_VOIP": 19,
        "MS_WNS": 20,
        "GOOGLE_FCM": 21,
        "CLOVA": 22,
        "CLOVA_VOIP": 23,
        "HUAWEI_HCM": 24,
    }

class AppExtensionType(int):
    SIRI = 1
    GOOGLE_ASSISTANT = 2
    OS_SHARE = 3

    _VALUES_TO_NAMES = {
        1: "SIRI",
        2: "GOOGLE_ASSISTANT",
        3: "OS_SHARE",
    }

    _NAMES_TO_VALUES = {
        "SIRI": 1,
        "GOOGLE_ASSISTANT": 2,
        "OS_SHARE": 3,
    }

class DataTypes(int):
    UNKNOWN = 0
    LOCATION = 1

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "LOCATION",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "LOCATION": 1,
    }

class Trigger(int):
    UNKNOWN = 0
    APP_FOREGROUND = 1
    PERIODIC = 2
    MANUAL = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "APP_FOREGROUND",
        2: "PERIODIC",
        3: "MANUAL",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "APP_FOREGROUND": 1,
        "PERIODIC": 2,
        "MANUAL": 3,
    }

class LocationProvider(int):
    GOOGLE = 0
    BAIDU = 1
    FOURSQUARE = 2
    YAHOOJAPAN = 3

    _VALUES_TO_NAMES = {
        0: "GOOGLE",
        1: "BAIDU",
        2: "FOURSQUARE",
        3: "YAHOOJAPAN",
    }

    _NAMES_TO_VALUES = {
        "GOOGLE": 0,
        "BAIDU": 1,
        "FOURSQUARE": 2,
        "YAHOOJAPAN": 3,
    }

class ProfileAttributes(int):
    ALL = 0
    EMAIL = 1
    DISPLAY_NAME = 2
    PHONETIC_NAME = 4
    PICTURE = 8
    STATUS_MESSAGE = 16
    ALLOW_SEARCH_BY_USERID = 32
    ALLOW_SEARCH_BY_EMAIL = 64
    BUDDY_STATUS = 128
    MUSIC_PROFILE = 256
    AVATAR_PROFILE = 512

    _VALUES_TO_NAMES = {
        0: "ALL",
        1: "EMAIL",
        2: "DISPLAY_NAME",
        4: "PHONETIC_NAME",
        8: "PICTURE",
        16: "STATUS_MESSAGE",
        32: "ALLOW_SEARCH_BY_USERID",
        64: "ALLOW_SEARCH_BY_EMAIL",
        128: "BUDDY_STATUS",
        256: "MUSIC_PROFILE",
        512: "AVATAR_PROFILE",
    }

    _NAMES_TO_VALUES = {
        "ALL": 0,
        "EMAIL": 1,
        "DISPLAY_NAME": 2,
        "PHONETIC_NAME": 4,
        "PICTURE": 8,
        "STATUS_MESSAGE": 16,
        "ALLOW_SEARCH_BY_USERID": 32,
        "ALLOW_SEARCH_BY_EMAIL": 64,
        "BUDDY_STATUS": 128,
        "MUSIC_PROFILE": 256,
        "AVATAR_PROFILE": 512,
    }

class ExtendedProfileAttribute(int):
    BIRTHDAY = 0

    _VALUES_TO_NAMES = {
        0: "BIRTHDAY",
    }

    _NAMES_TO_VALUES = {
        "BIRTHDAY": 0,
    }

class PrivacyLevelType(int):
    PUBLIC = 0
    PRIVATE = 1

    _VALUES_TO_NAMES = {
        0: "PUBLIC",
        1: "PRIVATE",
    }

    _NAMES_TO_VALUES = {
        "PUBLIC": 0,
        "PRIVATE": 1,
    }

class AccuracyMode(int):
    UNKNOWN = 0
    IOS_REDUCED_ACCURACY = 1
    IOS_FULL_ACCURACY = 2
    AOS_PRECISE_LOCATION = 3
    AOS_APPROXIMATE_LOCATION = 4

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "IOS_REDUCED_ACCURACY",
        2: "IOS_FULL_ACCURACY",
        3: "AOS_PRECISE_LOCATION",
        4: "AOS_APPROXIMATE_LOCATION",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "IOS_REDUCED_ACCURACY": 1,
        "IOS_FULL_ACCURACY": 2,
        "AOS_PRECISE_LOCATION": 3,
        "AOS_APPROXIMATE_LOCATION": 4,
    }

class VerificationPhoneResult(int):
    FAILED = 0
    OK_NOT_REGISTERED_YET = 1
    OK_REGISTERED_WITH_SAME_DEVICE = 2
    OK_REGISTERED_WITH_ANOTHER_DEVICE = 3

    _VALUES_TO_NAMES = {
        0: "FAILED",
        1: "OK_NOT_REGISTERED_YET",
        2: "OK_REGISTERED_WITH_SAME_DEVICE",
        3: "OK_REGISTERED_WITH_ANOTHER_DEVICE",
    }

    _NAMES_TO_VALUES = {
        "FAILED": 0,
        "OK_NOT_REGISTERED_YET": 1,
        "OK_REGISTERED_WITH_SAME_DEVICE": 2,
        "OK_REGISTERED_WITH_ANOTHER_DEVICE": 3,
    }

class EmailConfirmationStatus(int):
    NOT_SPECIFIED = 0
    NOT_YET = 1
    DONE = 3
    NEED_ENFORCED_INPUT = 4

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "NOT_YET",
        3: "DONE",
        4: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "NOT_YET": 1,
        "DONE": 3,
        "NEED_ENFORCED_INPUT": 4,
    }

class AccountMigrationPincodeType(int):
    NOT_APPLICABLE = 0
    NOT_SET = 1
    SET = 2
    NEED_ENFORCED_INPUT = 3

    _VALUES_TO_NAMES = {
        0: "NOT_APPLICABLE",
        1: "NOT_SET",
        2: "SET",
        3: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_APPLICABLE": 0,
        "NOT_SET": 1,
        "SET": 2,
        "NEED_ENFORCED_INPUT": 3,
    }

class SecurityCenterSettingsType(int):
    NOT_APPLICABLE = 0
    NOT_SET = 1
    SET = 2
    NEED_ENFORCED_INPUT = 3

    _VALUES_TO_NAMES = {
        0: "NOT_APPLICABLE",
        1: "NOT_SET",
        2: "SET",
        3: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_APPLICABLE": 0,
        "NOT_SET": 1,
        "SET": 2,
        "NEED_ENFORCED_INPUT": 3,
    }

class AccountMigrationCheckType(int):
    SKIP = 0
    PINCODE = 1
    SECURITY_CENTER = 2

    _VALUES_TO_NAMES = {
        0: "SKIP",
        1: "PINCODE",
        2: "SECURITY_CENTER",
    }

    _NAMES_TO_VALUES = {
        "SKIP": 0,
        "PINCODE": 1,
        "SECURITY_CENTER": 2,
    }

class SNSAccountType(int):
    FACEBOOK = 1
    SINA = 2
    RENREN = 3
    FEIXIN = 4
    BBM = 5
    APPLE = 6
    YAHOOJAPAN = 7

    _VALUES_TO_NAMES = {
        1: "FACEBOOK",
        2: "SINA",
        3: "RENREN",
        4: "FEIXIN",
        5: "BBM",
        6: "APPLE",
        7: "YAHOOJAPAN",
    }

    _NAMES_TO_VALUES = {
        "FACEBOOK": 1,
        "SINA": 2,
        "RENREN": 3,
        "FEIXIN": 4,
        "BBM": 5,
        "APPLE": 6,
        "YAHOOJAPAN": 7,
    }

class CustomModes(int):
    PROMOTION_FRIENDS_INVITE = 1
    CAPABILITY_SERVER_SIDE_SMS = 2
    LINE_CLIENT_ANALYTICS_CONFIGURATION = 3

    _VALUES_TO_NAMES = {
        1: "PROMOTION_FRIENDS_INVITE",
        2: "CAPABILITY_SERVER_SIDE_SMS",
        3: "LINE_CLIENT_ANALYTICS_CONFIGURATION",
    }

    _NAMES_TO_VALUES = {
        "PROMOTION_FRIENDS_INVITE": 1,
        "CAPABILITY_SERVER_SIDE_SMS": 2,
        "LINE_CLIENT_ANALYTICS_CONFIGURATION": 3,
    }

class BatteryMode(int):
    NORMAL = 1
    LOW_BATTERY = 2

    _VALUES_TO_NAMES = {
        1: "NORMAL",
        2: "LOW_BATTERY",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 1,
        "LOW_BATTERY": 2,
    }

class ClientNetworkType(int):
    UNKNOWN = 0
    WIFI = 1
    CELLULAR_NETWORK = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "WIFI",
        2: "CELLULAR_NETWORK",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "WIFI": 1,
        "CELLULAR_NETWORK": 2,
    }

class ReportCategory(int):
    PROFILE = 0
    SETTINGS = 1
    OPS = 2
    CONTACT = 3
    RECOMMEND = 4
    BLOCK = 5
    GROUP = 6
    ROOM = 7
    NOTIFICATION = 8
    ADDRESS_BOOK = 9

    _VALUES_TO_NAMES = {
        0: "PROFILE",
        1: "SETTINGS",
        2: "OPS",
        3: "CONTACT",
        4: "RECOMMEND",
        5: "BLOCK",
        6: "GROUP",
        7: "ROOM",
        8: "NOTIFICATION",
        9: "ADDRESS_BOOK",
    }

    _NAMES_TO_VALUES = {
        "PROFILE": 0,
        "SETTINGS": 1,
        "OPS": 2,
        "CONTACT": 3,
        "RECOMMEND": 4,
        "BLOCK": 5,
        "GROUP": 6,
        "ROOM": 7,
        "NOTIFICATION": 8,
        "ADDRESS_BOOK": 9,
    }

class Reason(int):
    UNKNOWN = 0
    BACKGROUND_NEW_KEY_CREATED = 1
    BACKGROUND_PERIODICAL_VERIFICATION = 2
    FOREGROUND_NEW_PIN_REGISTERED = 3
    FOREGROUND_VERIFICATION = 4

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "BACKGROUND_NEW_KEY_CREATED",
        2: "BACKGROUND_PERIODICAL_VERIFICATION",
        3: "FOREGROUND_NEW_PIN_REGISTERED",
        4: "FOREGROUND_VERIFICATION",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "BACKGROUND_NEW_KEY_CREATED": 1,
        "BACKGROUND_PERIODICAL_VERIFICATION": 2,
        "FOREGROUND_NEW_PIN_REGISTERED": 3,
        "FOREGROUND_VERIFICATION": 4,
    }

class FlowType(int):
    V1 = 1
    V2 = 2

    _VALUES_TO_NAMES = {
        1: "V1",
        2: "V2",
    }

    _NAMES_TO_VALUES = {
        "V1": 1,
        "V2": 2,
    }

class FullSyncRequestReason(int):
    OTHER = 0
    INITIALIZATION = 1
    PERIODIC_SYNC = 2
    MANUAL_SYNC = 3
    LOCAL_DB_CORRUPTED = 4

    _VALUES_TO_NAMES = {
        0: "OTHER",
        1: "INITIALIZATION",
        2: "PERIODIC_SYNC",
        3: "MANUAL_SYNC",
        4: "LOCAL_DB_CORRUPTED",
    }

    _NAMES_TO_VALUES = {
        "OTHER": 0,
        "INITIALIZATION": 1,
        "PERIODIC_SYNC": 2,
        "MANUAL_SYNC": 3,
        "LOCAL_DB_CORRUPTED": 4,
    }

class LastPartialFullSyncs(int):
    ALL = 0
    PROFILE = 1
    SETTINGS = 2
    CONFIGURATIONS = 3
    CONTACT = 4
    GROUP = 5
    E2EE = 6
    MESSAGE = 7

    _VALUES_TO_NAMES = {
        0: "ALL",
        1: "PROFILE",
        2: "SETTINGS",
        3: "CONFIGURATIONS",
        4: "CONTACT",
        5: "GROUP",
        6: "E2EE",
        7: "MESSAGE",
    }

    _NAMES_TO_VALUES = {
        "ALL": 0,
        "PROFILE": 1,
        "SETTINGS": 2,
        "CONFIGURATIONS": 3,
        "CONTACT": 4,
        "GROUP": 5,
        "E2EE": 6,
        "MESSAGE": 7,
    }

class GlobalEventType(int):
    DUMMY = 0
    NOTICE = 1
    MORETAB = 2
    STICKERSHOP = 3
    CHANNEL = 4
    DENY_KEYWORD = 5
    CONNECTIONINFO = 6
    BUDDY = 7
    TIMELINEINFO = 8
    THEMESHOP = 9
    CALLRATE = 10
    CONFIGURATION = 11
    STICONSHOP = 12
    SUGGESTDICTIONARY = 13
    SUGGESTSETTINGS = 14
    USERSETTINGS = 15
    ANALYTICSINFO = 16
    SEARCHPOPULARKEYWORD = 17
    SEARCHNOTICE = 18
    TIMELINE = 19
    SEARCHPOPULARCATEGORY = 20
    EXTENDEDPROFILE = 21
    SEASONALMARKETING = 22
    NEWSTAB = 23
    SUGGESTDICTIONARYV2 = 24
    CHATAPPSYNC = 25
    AGREEMENTS = 26
    INSTANTNEWS = 27
    EMOJI_MAPPING = 28
    SEARCHBARKEYWORDS = 29
    SHOPPING = 30
    CHAT_EFFECT_BACKGROUND = 31
    CHAT_EFFECT_KEYWORD = 32
    SEARCHINDEX = 33
    HUBTAB = 34
    PAY_RULE_UPDATED = 35
    SMARTCH = 36
    HOME_SERVICE_LIST = 37
    TIMELINESTORY = 38
    WALLET_TAB = 39
    POD_TAB = 40
    HOME_SAFETY_CHECK = 41
    HOME_SEASONAL_EFFECT = 42

    _VALUES_TO_NAMES = {
        0: "DUMMY",
        1: "NOTICE",
        2: "MORETAB",
        3: "STICKERSHOP",
        4: "CHANNEL",
        5: "DENY_KEYWORD",
        6: "CONNECTIONINFO",
        7: "BUDDY",
        8: "TIMELINEINFO",
        9: "THEMESHOP",
        10: "CALLRATE",
        11: "CONFIGURATION",
        12: "STICONSHOP",
        13: "SUGGESTDICTIONARY",
        14: "SUGGESTSETTINGS",
        15: "USERSETTINGS",
        16: "ANALYTICSINFO",
        17: "SEARCHPOPULARKEYWORD",
        18: "SEARCHNOTICE",
        19: "TIMELINE",
        20: "SEARCHPOPULARCATEGORY",
        21: "EXTENDEDPROFILE",
        22: "SEASONALMARKETING",
        23: "NEWSTAB",
        24: "SUGGESTDICTIONARYV2",
        25: "CHATAPPSYNC",
        26: "AGREEMENTS",
        27: "INSTANTNEWS",
        28: "EMOJI_MAPPING",
        29: "SEARCHBARKEYWORDS",
        30: "SHOPPING",
        31: "CHAT_EFFECT_BACKGROUND",
        32: "CHAT_EFFECT_KEYWORD",
        33: "SEARCHINDEX",
        34: "HUBTAB",
        35: "PAY_RULE_UPDATED",
        36: "SMARTCH",
        37: "HOME_SERVICE_LIST",
        38: "TIMELINESTORY",
        39: "WALLET_TAB",
        40: "POD_TAB",
        41: "HOME_SAFETY_CHECK",
        42: "HOME_SEASONAL_EFFECT",
    }

    _NAMES_TO_VALUES = {
        "DUMMY": 0,
        "NOTICE": 1,
        "MORETAB": 2,
        "STICKERSHOP": 3,
        "CHANNEL": 4,
        "DENY_KEYWORD": 5,
        "CONNECTIONINFO": 6,
        "BUDDY": 7,
        "TIMELINEINFO": 8,
        "THEMESHOP": 9,
        "CALLRATE": 10,
        "CONFIGURATION": 11,
        "STICONSHOP": 12,
        "SUGGESTDICTIONARY": 13,
        "SUGGESTSETTINGS": 14,
        "USERSETTINGS": 15,
        "ANALYTICSINFO": 16,
        "SEARCHPOPULARKEYWORD": 17,
        "SEARCHNOTICE": 18,
        "TIMELINE": 19,
        "SEARCHPOPULARCATEGORY": 20,
        "EXTENDEDPROFILE": 21,
        "SEASONALMARKETING": 22,
        "NEWSTAB": 23,
        "SUGGESTDICTIONARYV2": 24,
        "CHATAPPSYNC": 25,
        "AGREEMENTS": 26,
        "INSTANTNEWS": 27,
        "EMOJI_MAPPING": 28,
        "SEARCHBARKEYWORDS": 29,
        "SHOPPING": 30,
        "CHAT_EFFECT_BACKGROUND": 31,
        "CHAT_EFFECT_KEYWORD": 32,
        "SEARCHINDEX": 33,
        "HUBTAB": 34,
        "PAY_RULE_UPDATED": 35,
        "SMARTCH": 36,
        "HOME_SERVICE_LIST": 37,
        "TIMELINESTORY": 38,
        "WALLET_TAB": 39,
        "POD_TAB": 40,
        "HOME_SAFETY_CHECK": 41,
        "HOME_SEASONAL_EFFECT": 42,
    }

class IndividualEventType(int):
    NOTIFICATION_ITEM_EXIST = 1
    TIMELINE_ITEM_EXIST = 2
    NOTE_GROUP_NEW_ITEM_EXIST = 4
    TIMELINE_BUDDYGROUP_CHANGED = 8
    NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16
    ALBUM_ITEM_EXIST = 32
    TIMELINE_ITEM_DELETED = 64
    OTOGROUP_ITEM_EXIST = 128
    GROUPHOME_NEW_ITEM_EXIST = 256
    GROUPHOME_HIDDEN_ITEM_CHANGED = 512
    NOTIFICATION_ITEM_CHANGED = 1024
    BEAD_ITEM_HIDE = 2048
    BEAD_ITEM_SHOW = 4096
    LINE_TICKET_UPDATED = 8192
    TIMELINE_STORY_UPDATED = 16384
    SMARTCH_UPDATED = 32768
    AVATAR_UPDATED = 65536
    HOME_NOTIFICATION_ITEM_EXIST = 131072
    TIMELINE_REBOOT_COMPLETED = 262144
    TIMELINE_GUIDE_STORY_UPDATED = 524288

    _VALUES_TO_NAMES = {
        1: "NOTIFICATION_ITEM_EXIST",
        2: "TIMELINE_ITEM_EXIST",
        4: "NOTE_GROUP_NEW_ITEM_EXIST",
        8: "TIMELINE_BUDDYGROUP_CHANGED",
        16: "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST",
        32: "ALBUM_ITEM_EXIST",
        64: "TIMELINE_ITEM_DELETED",
        128: "OTOGROUP_ITEM_EXIST",
        256: "GROUPHOME_NEW_ITEM_EXIST",
        512: "GROUPHOME_HIDDEN_ITEM_CHANGED",
        1024: "NOTIFICATION_ITEM_CHANGED",
        2048: "BEAD_ITEM_HIDE",
        4096: "BEAD_ITEM_SHOW",
        8192: "LINE_TICKET_UPDATED",
        16384: "TIMELINE_STORY_UPDATED",
        32768: "SMARTCH_UPDATED",
        65536: "AVATAR_UPDATED",
        131072: "HOME_NOTIFICATION_ITEM_EXIST",
        262144: "TIMELINE_REBOOT_COMPLETED",
        524288: "TIMELINE_GUIDE_STORY_UPDATED",
    }

    _NAMES_TO_VALUES = {
        "NOTIFICATION_ITEM_EXIST": 1,
        "TIMELINE_ITEM_EXIST": 2,
        "NOTE_GROUP_NEW_ITEM_EXIST": 4,
        "TIMELINE_BUDDYGROUP_CHANGED": 8,
        "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST": 16,
        "ALBUM_ITEM_EXIST": 32,
        "TIMELINE_ITEM_DELETED": 64,
        "OTOGROUP_ITEM_EXIST": 128,
        "GROUPHOME_NEW_ITEM_EXIST": 256,
        "GROUPHOME_HIDDEN_ITEM_CHANGED": 512,
        "NOTIFICATION_ITEM_CHANGED": 1024,
        "BEAD_ITEM_HIDE": 2048,
        "BEAD_ITEM_SHOW": 4096,
        "LINE_TICKET_UPDATED": 8192,
        "TIMELINE_STORY_UPDATED": 16384,
        "SMARTCH_UPDATED": 32768,
        "AVATAR_UPDATED": 65536,
        "HOME_NOTIFICATION_ITEM_EXIST": 131072,
        "TIMELINE_REBOOT_COMPLETED": 262144,
        "TIMELINE_GUIDE_STORY_UPDATED": 524288,
    }

class SettingsAttributes(int):
    NOTIFICATION_ENABLE = 0
    NOTIFICATION_MUTE_EXPIRATION = 1
    NOTIFICATION_NEW_MESSAGE = 2
    NOTIFICATION_GROUP_INVITATION = 3
    NOTIFICATION_SHOW_MESSAGE = 4
    NOTIFICATION_INCOMING_CALL = 5
    PRIVACY_SYNC_CONTACTS = 6
    PRIVACY_SEARCH_BY_PHONE_NUMBER = 7
    NOTIFICATION_SOUND_MESSAGE = 8
    NOTIFICATION_SOUND_GROUP = 9
    CONTACT_MY_TICKET = 10
    IDENTITY_PROVIDER = 11
    IDENTITY_IDENTIFIER = 12
    PRIVACY_SEARCH_BY_USERID = 13
    PRIVACY_SEARCH_BY_EMAIL = 14
    PREFERENCE_LOCALE = 15
    NOTIFICATION_DISABLED_WITH_SUB = 16
    NOTIFICATION_PAYMENT = 17
    SECURITY_CENTER_SETTINGS = 18
    SNS_ACCOUNT = 19
    PHONE_REGISTRATION = 20
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21
    CUSTOM_MODE = 22
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23
    EMAIL_CONFIRMATION_STATUS = 24
    PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25
    PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26
    PRIVACY_AGREE_USE_PAIDCALL = 27
    ACCOUNT_MIGRATION_PINCODE = 28
    ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29
    PRIVACY_ALLOW_FRIEND_REQUEST = 30
    PWLESS_PRIMARY_CREDENTIAL_REGISTRATION = 31
    ALLOWED_TO_CONNECT_EAP_ACCOUNT = 32
    E2EE_ENABLE = 33
    HITOKOTO_BACKUP_REQUESTED = 34
    PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35
    CONTACT_ALLOW_FOLLOWING = 36
    PRIVACY_ALLOW_NEARBY = 37
    AGREEMENT_NEARBY = 38
    AGREEMENT_SQUARE = 39
    NOTIFICATION_MENTION = 40
    ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41
    AGREEMENT_BOT_USE = 42
    AGREEMENT_SHAKE_FUNCTION = 43
    AGREEMENT_MOBILE_CONTACT_NAME = 44
    NOTIFICATION_THUMBNAIL = 45
    AGREEMENT_SOUND_TO_TEXT = 46
    AGREEMENT_PRIVACY_POLICY_VERSION = 47
    AGREEMENT_AD_BY_WEB_ACCESS = 48
    AGREEMENT_PHONE_NUMBER_MATCHING = 49
    AGREEMENT_COMMUNICATION_INFO = 50
    PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS = 51
    AGREEMENT_THINGS_WIRELESS_COMMUNICATION = 52
    AGREEMENT_GDPR = 53
    PRIVACY_STATUS_MESSAGE_HISTORY = 54
    AGREEMENT_PROVIDE_LOCATION = 55
    AGREEMENT_BEACON = 56
    PRIVACY_PROFILE_HISTORY = 57
    AGREEMENT_CONTENTS_SUGGEST = 58
    AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION = 59
    PRIVACY_AGE_RESULT = 60
    PRIVACY_AGE_RESULT_RECEIVED = 61
    AGREEMENT_OCR_IMAGE_COLLECTION = 62
    PRIVACY_ALLOW_FOLLOW = 63
    PRIVACY_SHOW_FOLLOW_LIST = 64
    NOTIFICATION_BADGE_TALK_ONLY = 65
    AGREEMENT_ICNA = 66
    NOTIFICATION_REACTION = 67
    AGREEMENT_MID = 68
    HOME_NOTIFICATION_NEW_FRIEND = 69
    HOME_NOTIFICATION_FAVORITE_FRIEND_UPDATE = 70
    HOME_NOTIFICATION_GROUP_MEMBER_UPDATE = 71
    HOME_NOTIFICATION_BIRTHDAY = 72
    AGREEMENT_LINE_OUT_USE = 73
    AGREEMENT_LINE_OUT_PROVIDE_INFO = 74
    NOTIFICATION_SHOW_PROFILE_IMAGE = 75
    AGREEMENT_PDPA = 76
    AGREEMENT_LOCATION_VERSION = 77

    _VALUES_TO_NAMES = {
        0: "NOTIFICATION_ENABLE",
        1: "NOTIFICATION_MUTE_EXPIRATION",
        2: "NOTIFICATION_NEW_MESSAGE",
        3: "NOTIFICATION_GROUP_INVITATION",
        4: "NOTIFICATION_SHOW_MESSAGE",
        5: "NOTIFICATION_INCOMING_CALL",
        6: "PRIVACY_SYNC_CONTACTS",
        7: "PRIVACY_SEARCH_BY_PHONE_NUMBER",
        8: "NOTIFICATION_SOUND_MESSAGE",
        9: "NOTIFICATION_SOUND_GROUP",
        10: "CONTACT_MY_TICKET",
        11: "IDENTITY_PROVIDER",
        12: "IDENTITY_IDENTIFIER",
        13: "PRIVACY_SEARCH_BY_USERID",
        14: "PRIVACY_SEARCH_BY_EMAIL",
        15: "PREFERENCE_LOCALE",
        16: "NOTIFICATION_DISABLED_WITH_SUB",
        17: "NOTIFICATION_PAYMENT",
        18: "SECURITY_CENTER_SETTINGS",
        19: "SNS_ACCOUNT",
        20: "PHONE_REGISTRATION",
        21: "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN",
        22: "CUSTOM_MODE",
        23: "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME",
        24: "EMAIL_CONFIRMATION_STATUS",
        25: "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND",
        26: "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL",
        27: "PRIVACY_AGREE_USE_PAIDCALL",
        28: "ACCOUNT_MIGRATION_PINCODE",
        29: "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE",
        30: "PRIVACY_ALLOW_FRIEND_REQUEST",
        31: "PWLESS_PRIMARY_CREDENTIAL_REGISTRATION",
        32: "ALLOWED_TO_CONNECT_EAP_ACCOUNT",
        33: "E2EE_ENABLE",
        34: "HITOKOTO_BACKUP_REQUESTED",
        35: "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME",
        36: "CONTACT_ALLOW_FOLLOWING",
        37: "PRIVACY_ALLOW_NEARBY",
        38: "AGREEMENT_NEARBY",
        39: "AGREEMENT_SQUARE",
        40: "NOTIFICATION_MENTION",
        41: "ALLOW_UNREGISTRATION_SECONDARY_DEVICE",
        42: "AGREEMENT_BOT_USE",
        43: "AGREEMENT_SHAKE_FUNCTION",
        44: "AGREEMENT_MOBILE_CONTACT_NAME",
        45: "NOTIFICATION_THUMBNAIL",
        46: "AGREEMENT_SOUND_TO_TEXT",
        47: "AGREEMENT_PRIVACY_POLICY_VERSION",
        48: "AGREEMENT_AD_BY_WEB_ACCESS",
        49: "AGREEMENT_PHONE_NUMBER_MATCHING",
        50: "AGREEMENT_COMMUNICATION_INFO",
        51: "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS",
        52: "AGREEMENT_THINGS_WIRELESS_COMMUNICATION",
        53: "AGREEMENT_GDPR",
        54: "PRIVACY_STATUS_MESSAGE_HISTORY",
        55: "AGREEMENT_PROVIDE_LOCATION",
        56: "AGREEMENT_BEACON",
        57: "PRIVACY_PROFILE_HISTORY",
        58: "AGREEMENT_CONTENTS_SUGGEST",
        59: "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION",
        60: "PRIVACY_AGE_RESULT",
        61: "PRIVACY_AGE_RESULT_RECEIVED",
        62: "AGREEMENT_OCR_IMAGE_COLLECTION",
        63: "PRIVACY_ALLOW_FOLLOW",
        64: "PRIVACY_SHOW_FOLLOW_LIST",
        65: "NOTIFICATION_BADGE_TALK_ONLY",
        66: "AGREEMENT_ICNA",
        67: "NOTIFICATION_REACTION",
        68: "AGREEMENT_MID",
        69: "HOME_NOTIFICATION_NEW_FRIEND",
        70: "HOME_NOTIFICATION_FAVORITE_FRIEND_UPDATE",
        71: "HOME_NOTIFICATION_GROUP_MEMBER_UPDATE",
        72: "HOME_NOTIFICATION_BIRTHDAY",
        73: "AGREEMENT_LINE_OUT_USE",
        74: "AGREEMENT_LINE_OUT_PROVIDE_INFO",
        75: "NOTIFICATION_SHOW_PROFILE_IMAGE",
        76: "AGREEMENT_PDPA",
        77: "AGREEMENT_LOCATION_VERSION",
    }

    _NAMES_TO_VALUES = {
        "NOTIFICATION_ENABLE": 0,
        "NOTIFICATION_MUTE_EXPIRATION": 1,
        "NOTIFICATION_NEW_MESSAGE": 2,
        "NOTIFICATION_GROUP_INVITATION": 3,
        "NOTIFICATION_SHOW_MESSAGE": 4,
        "NOTIFICATION_INCOMING_CALL": 5,
        "PRIVACY_SYNC_CONTACTS": 6,
        "PRIVACY_SEARCH_BY_PHONE_NUMBER": 7,
        "NOTIFICATION_SOUND_MESSAGE": 8,
        "NOTIFICATION_SOUND_GROUP": 9,
        "CONTACT_MY_TICKET": 10,
        "IDENTITY_PROVIDER": 11,
        "IDENTITY_IDENTIFIER": 12,
        "PRIVACY_SEARCH_BY_USERID": 13,
        "PRIVACY_SEARCH_BY_EMAIL": 14,
        "PREFERENCE_LOCALE": 15,
        "NOTIFICATION_DISABLED_WITH_SUB": 16,
        "NOTIFICATION_PAYMENT": 17,
        "SECURITY_CENTER_SETTINGS": 18,
        "SNS_ACCOUNT": 19,
        "PHONE_REGISTRATION": 20,
        "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": 21,
        "CUSTOM_MODE": 22,
        "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": 23,
        "EMAIL_CONFIRMATION_STATUS": 24,
        "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": 25,
        "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": 26,
        "PRIVACY_AGREE_USE_PAIDCALL": 27,
        "ACCOUNT_MIGRATION_PINCODE": 28,
        "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": 29,
        "PRIVACY_ALLOW_FRIEND_REQUEST": 30,
        "PWLESS_PRIMARY_CREDENTIAL_REGISTRATION": 31,
        "ALLOWED_TO_CONNECT_EAP_ACCOUNT": 32,
        "E2EE_ENABLE": 33,
        "HITOKOTO_BACKUP_REQUESTED": 34,
        "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": 35,
        "CONTACT_ALLOW_FOLLOWING": 36,
        "PRIVACY_ALLOW_NEARBY": 37,
        "AGREEMENT_NEARBY": 38,
        "AGREEMENT_SQUARE": 39,
        "NOTIFICATION_MENTION": 40,
        "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": 41,
        "AGREEMENT_BOT_USE": 42,
        "AGREEMENT_SHAKE_FUNCTION": 43,
        "AGREEMENT_MOBILE_CONTACT_NAME": 44,
        "NOTIFICATION_THUMBNAIL": 45,
        "AGREEMENT_SOUND_TO_TEXT": 46,
        "AGREEMENT_PRIVACY_POLICY_VERSION": 47,
        "AGREEMENT_AD_BY_WEB_ACCESS": 48,
        "AGREEMENT_PHONE_NUMBER_MATCHING": 49,
        "AGREEMENT_COMMUNICATION_INFO": 50,
        "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": 51,
        "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": 52,
        "AGREEMENT_GDPR": 53,
        "PRIVACY_STATUS_MESSAGE_HISTORY": 54,
        "AGREEMENT_PROVIDE_LOCATION": 55,
        "AGREEMENT_BEACON": 56,
        "PRIVACY_PROFILE_HISTORY": 57,
        "AGREEMENT_CONTENTS_SUGGEST": 58,
        "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": 59,
        "PRIVACY_AGE_RESULT": 60,
        "PRIVACY_AGE_RESULT_RECEIVED": 61,
        "AGREEMENT_OCR_IMAGE_COLLECTION": 62,
        "PRIVACY_ALLOW_FOLLOW": 63,
        "PRIVACY_SHOW_FOLLOW_LIST": 64,
        "NOTIFICATION_BADGE_TALK_ONLY": 65,
        "AGREEMENT_ICNA": 66,
        "NOTIFICATION_REACTION": 67,
        "AGREEMENT_MID": 68,
        "HOME_NOTIFICATION_NEW_FRIEND": 69,
        "HOME_NOTIFICATION_FAVORITE_FRIEND_UPDATE": 70,
        "HOME_NOTIFICATION_GROUP_MEMBER_UPDATE": 71,
        "HOME_NOTIFICATION_BIRTHDAY": 72,
        "AGREEMENT_LINE_OUT_USE": 73,
        "AGREEMENT_LINE_OUT_PROVIDE_INFO": 74,
        "NOTIFICATION_SHOW_PROFILE_IMAGE": 75,
        "AGREEMENT_PDPA": 76,
        "AGREEMENT_LOCATION_VERSION": 77,
    }

class LoginType(int):
    ID_CREDENTIAL = 0
    QRCODE = 1
    ID_CREDENTIAL_WITH_E2EE = 2

    _VALUES_TO_NAMES = {
        0: "ID_CREDENTIAL",
        1: "QRCODE",
        2: "ID_CREDENTIAL_WITH_E2EE",
    }

    _NAMES_TO_VALUES = {
        "ID_CREDENTIAL": 0,
        "QRCODE": 1,
        "ID_CREDENTIAL_WITH_E2EE": 2,
    }

class LoginResultType(int):
    SUCCESS = 1
    REQUIRE_QRCODE = 2
    REQUIRE_DEVICE_CONFIRM = 3
    REQUIRE_SMS_CONFIRM = 4

    _VALUES_TO_NAMES = {
        1: "SUCCESS",
        2: "REQUIRE_QRCODE",
        3: "REQUIRE_DEVICE_CONFIRM",
        4: "REQUIRE_SMS_CONFIRM",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 1,
        "REQUIRE_QRCODE": 2,
        "REQUIRE_DEVICE_CONFIRM": 3,
        "REQUIRE_SMS_CONFIRM": 4,
    }

class VerificationType(int):
    NO_AVAILABLE = 0
    PIN_VIA_SMS = 1
    CALLERID_INDIGO = 2
    PIN_VIA_TTS = 4
    SKIP = 10

    _VALUES_TO_NAMES = {
        0: "NO_AVAILABLE",
        1: "PIN_VIA_SMS",
        2: "CALLERID_INDIGO",
        4: "PIN_VIA_TTS",
        10: "SKIP",
    }

    _NAMES_TO_VALUES = {
        "NO_AVAILABLE": 0,
        "PIN_VIA_SMS": 1,
        "CALLERID_INDIGO": 2,
        "PIN_VIA_TTS": 4,
        "SKIP": 10,
    }

class IdentityCredentialResponseType(int):
    UNKNOWN = 0
    SUCCESS = 1
    REQUIRE_SERVER_SIDE_EMAIL = 2
    REQUIRE_CLIENT_SIDE_EMAIL = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "SUCCESS",
        2: "REQUIRE_SERVER_SIDE_EMAIL",
        3: "REQUIRE_CLIENT_SIDE_EMAIL",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "SUCCESS": 1,
        "REQUIRE_SERVER_SIDE_EMAIL": 2,
        "REQUIRE_CLIENT_SIDE_EMAIL": 3,
    }

class AuthKeyVersion(int):
    UNKNOWN = 0
    V1 = 1

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "V1",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "V1": 1,
    }

class AuthLoginVersion(int):
    UNKNOWN = 0
    V1 = 1
    V2 = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "V1",
        2: "V2",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "V1": 1,
        "V2": 2,
    }

class UserStatus(int):
    NORMAL = 0
    UNBOUND = 1
    UNREGISTERED = 2
    UNKNOWN = 3

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "UNBOUND",
        2: "UNREGISTERED",
        3: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "UNBOUND": 1,
        "UNREGISTERED": 2,
        "UNKNOWN": 3,
    }

class OpStatus(int):
    NORMAL = 0
    ALERT_DISABLED = 1
    ALWAYS = 2

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "ALERT_DISABLED",
        2: "ALWAYS",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "ALERT_DISABLED": 1,
        "ALWAYS": 2,
    }

class OpType(int):
    END_OF_OPERATION = 0
    UPDATE_PROFILE = 1
    UPDATE_SETTINGS = 36
    NOTIFIED_UPDATE_PROFILE = 2
    REGISTER_USERID = 3
    ADD_CONTACT = 4
    NOTIFIED_ADD_CONTACT = 5
    BLOCK_CONTACT = 6
    UNBLOCK_CONTACT = 7
    NOTIFIED_RECOMMEND_CONTACT = 8
    CREATE_GROUP = 9
    UPDATE_GROUP = 10
    NOTIFIED_UPDATE_GROUP = 11
    INVITE_INTO_GROUP = 12
    NOTIFIED_INVITE_INTO_GROUP = 13
    CANCEL_INVITATION_GROUP = 31
    NOTIFIED_CANCEL_INVITATION_GROUP = 32
    LEAVE_GROUP = 14
    NOTIFIED_LEAVE_GROUP = 15
    ACCEPT_GROUP_INVITATION = 16
    NOTIFIED_ACCEPT_GROUP_INVITATION = 17
    REJECT_GROUP_INVITATION = 34
    NOTIFIED_REJECT_GROUP_INVITATION = 35
    KICKOUT_FROM_GROUP = 18
    NOTIFIED_KICKOUT_FROM_GROUP = 19
    CREATE_ROOM = 20
    INVITE_INTO_ROOM = 21
    NOTIFIED_INVITE_INTO_ROOM = 22
    LEAVE_ROOM = 23
    NOTIFIED_LEAVE_ROOM = 24
    SEND_MESSAGE = 25
    RECEIVE_MESSAGE = 26
    SEND_MESSAGE_RECEIPT = 27
    RECEIVE_MESSAGE_RECEIPT = 28
    SEND_CONTENT_RECEIPT = 29
    SEND_CHAT_CHECKED = 40
    SEND_CHAT_REMOVED = 41
    RECEIVE_ANNOUNCEMENT = 30
    INVITE_VIA_EMAIL = 38
    NOTIFIED_REGISTER_USER = 37
    NOTIFIED_UNREGISTER_USER = 33
    NOTIFIED_REQUEST_RECOVERY = 39
    NOTIFIED_FORCE_SYNC = 42
    SEND_CONTENT = 43
    SEND_MESSAGE_MYHOME = 44
    NOTIFIED_UPDATE_CONTENT_PREVIEW = 45
    REMOVE_ALL_MESSAGES = 46
    NOTIFIED_UPDATE_PURCHASES = 47
    DUMMY = 48
    UPDATE_CONTACT = 49
    NOTIFIED_RECEIVED_CALL = 50
    CANCEL_CALL = 51
    NOTIFIED_REDIRECT = 52
    NOTIFIED_CHANNEL_SYNC = 53
    FAILED_SEND_MESSAGE = 54
    NOTIFIED_READ_MESSAGE = 55
    FAILED_EMAIL_CONFIRMATION = 56
    NOTIFIED_PUSH_NOTICENTER_ITEM = 59
    NOTIFIED_CHAT_CONTENT = 58
    NOTIFIED_JOIN_CHAT = 60
    NOTIFIED_LEAVE_CHAT = 61
    NOTIFIED_TYPING = 62
    FRIEND_REQUEST_ACCEPTED = 63
    DESTROY_MESSAGE = 64
    NOTIFIED_DESTROY_MESSAGE = 65
    UPDATE_PUBLICKEYCHAIN = 66
    NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67
    NOTIFIED_BLOCK_CONTACT = 68
    NOTIFIED_UNBLOCK_CONTACT = 69
    UPDATE_GROUPPREFERENCE = 70
    NOTIFIED_PAYMENT_EVENT = 71
    REGISTER_E2EE_PUBLICKEY = 72
    NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73
    NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74
    NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75
    NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76
    NOTIFIED_E2EE_KEY_UPDATE = 77
    NOTIFIED_BUDDY_UPDATE_PROFILE = 78
    NOTIFIED_UPDATE_LINEAT_TABS = 79
    UPDATE_ROOM = 80
    NOTIFIED_BEACON_DETECTED = 81
    UPDATE_EXTENDED_PROFILE = 82
    ADD_FOLLOW = 83
    NOTIFIED_ADD_FOLLOW = 84
    DELETE_FOLLOW = 85
    NOTIFIED_DELETE_FOLLOW = 86
    UPDATE_TIMELINE_SETTINGS = 87
    NOTIFIED_FRIEND_REQUEST = 88
    UPDATE_RINGBACK_TONE = 89
    NOTIFIED_POSTBACK = 90
    RECEIVE_READ_WATERMARK = 91
    NOTIFIED_MESSAGE_DELIVERED = 92
    NOTIFIED_UPDATE_CHAT_BAR = 93
    NOTIFIED_CHATAPP_INSTALLED = 94
    NOTIFIED_CHATAPP_UPDATED = 95
    NOTIFIED_CHATAPP_NEW_MARK = 96
    NOTIFIED_CHATAPP_DELETED = 97
    NOTIFIED_CHATAPP_SYNC = 98
    NOTIFIED_UPDATE_MESSAGE = 99
    UPDATE_CHATROOMBGM = 100
    NOTIFIED_UPDATE_CHATROOMBGM = 101
    UPDATE_RINGTONE = 102
    UPDATE_USER_SETTINGS = 118
    NOTIFIED_UPDATE_STATUS_BAR = 119
    CREATE_CHAT = 120
    UPDATE_CHAT = 121
    NOTIFIED_UPDATE_CHAT = 122
    INVITE_INTO_CHAT = 123
    NOTIFIED_INVITE_INTO_CHAT = 124
    CANCEL_CHAT_INVITATION = 125
    NOTIFIED_CANCEL_CHAT_INVITATION = 126
    DELETE_SELF_FROM_CHAT = 127
    NOTIFIED_DELETE_SELF_FROM_CHAT = 128
    ACCEPT_CHAT_INVITATION = 129
    NOTIFIED_ACCEPT_CHAT_INVITATION = 130
    REJECT_CHAT_INVITATION = 131
    DELETE_OTHER_FROM_CHAT = 132
    NOTIFIED_DELETE_OTHER_FROM_CHAT = 133
    NOTIFIED_CONTACT_CALENDAR_EVENT = 134
    NOTIFIED_CONTACT_CALENDAR_EVENT_ALL = 135
    UPDATE_THINGS_OPERATIONS = 136
    SEND_CHAT_HIDDEN = 137
    CHAT_META_SYNC_ALL = 138
    SEND_REACTION = 139
    NOTIFIED_SEND_REACTION = 140
    NOTIFIED_UPDATE_PROFILE_CONTENT = 141
    FAILED_DELIVERY_MESSAGE = 142
    SEND_ENCRYPTED_E2EE_KEY_REQUESTED = 143

    _VALUES_TO_NAMES = {
        0: "END_OF_OPERATION",
        1: "UPDATE_PROFILE",
        36: "UPDATE_SETTINGS",
        2: "NOTIFIED_UPDATE_PROFILE",
        3: "REGISTER_USERID",
        4: "ADD_CONTACT",
        5: "NOTIFIED_ADD_CONTACT",
        6: "BLOCK_CONTACT",
        7: "UNBLOCK_CONTACT",
        8: "NOTIFIED_RECOMMEND_CONTACT",
        9: "CREATE_GROUP",
        10: "UPDATE_GROUP",
        11: "NOTIFIED_UPDATE_GROUP",
        12: "INVITE_INTO_GROUP",
        13: "NOTIFIED_INVITE_INTO_GROUP",
        31: "CANCEL_INVITATION_GROUP",
        32: "NOTIFIED_CANCEL_INVITATION_GROUP",
        14: "LEAVE_GROUP",
        15: "NOTIFIED_LEAVE_GROUP",
        16: "ACCEPT_GROUP_INVITATION",
        17: "NOTIFIED_ACCEPT_GROUP_INVITATION",
        34: "REJECT_GROUP_INVITATION",
        35: "NOTIFIED_REJECT_GROUP_INVITATION",
        18: "KICKOUT_FROM_GROUP",
        19: "NOTIFIED_KICKOUT_FROM_GROUP",
        20: "CREATE_ROOM",
        21: "INVITE_INTO_ROOM",
        22: "NOTIFIED_INVITE_INTO_ROOM",
        23: "LEAVE_ROOM",
        24: "NOTIFIED_LEAVE_ROOM",
        25: "SEND_MESSAGE",
        26: "RECEIVE_MESSAGE",
        27: "SEND_MESSAGE_RECEIPT",
        28: "RECEIVE_MESSAGE_RECEIPT",
        29: "SEND_CONTENT_RECEIPT",
        40: "SEND_CHAT_CHECKED",
        41: "SEND_CHAT_REMOVED",
        30: "RECEIVE_ANNOUNCEMENT",
        38: "INVITE_VIA_EMAIL",
        37: "NOTIFIED_REGISTER_USER",
        33: "NOTIFIED_UNREGISTER_USER",
        39: "NOTIFIED_REQUEST_RECOVERY",
        42: "NOTIFIED_FORCE_SYNC",
        43: "SEND_CONTENT",
        44: "SEND_MESSAGE_MYHOME",
        45: "NOTIFIED_UPDATE_CONTENT_PREVIEW",
        46: "REMOVE_ALL_MESSAGES",
        47: "NOTIFIED_UPDATE_PURCHASES",
        48: "DUMMY",
        49: "UPDATE_CONTACT",
        50: "NOTIFIED_RECEIVED_CALL",
        51: "CANCEL_CALL",
        52: "NOTIFIED_REDIRECT",
        53: "NOTIFIED_CHANNEL_SYNC",
        54: "FAILED_SEND_MESSAGE",
        55: "NOTIFIED_READ_MESSAGE",
        56: "FAILED_EMAIL_CONFIRMATION",
        59: "NOTIFIED_PUSH_NOTICENTER_ITEM",
        58: "NOTIFIED_CHAT_CONTENT",
        60: "NOTIFIED_JOIN_CHAT",
        61: "NOTIFIED_LEAVE_CHAT",
        62: "NOTIFIED_TYPING",
        63: "FRIEND_REQUEST_ACCEPTED",
        64: "DESTROY_MESSAGE",
        65: "NOTIFIED_DESTROY_MESSAGE",
        66: "UPDATE_PUBLICKEYCHAIN",
        67: "NOTIFIED_UPDATE_PUBLICKEYCHAIN",
        68: "NOTIFIED_BLOCK_CONTACT",
        69: "NOTIFIED_UNBLOCK_CONTACT",
        70: "UPDATE_GROUPPREFERENCE",
        71: "NOTIFIED_PAYMENT_EVENT",
        72: "REGISTER_E2EE_PUBLICKEY",
        73: "NOTIFIED_E2EE_KEY_EXCHANGE_REQ",
        74: "NOTIFIED_E2EE_KEY_EXCHANGE_RESP",
        75: "NOTIFIED_E2EE_MESSAGE_RESEND_REQ",
        76: "NOTIFIED_E2EE_MESSAGE_RESEND_RESP",
        77: "NOTIFIED_E2EE_KEY_UPDATE",
        78: "NOTIFIED_BUDDY_UPDATE_PROFILE",
        79: "NOTIFIED_UPDATE_LINEAT_TABS",
        80: "UPDATE_ROOM",
        81: "NOTIFIED_BEACON_DETECTED",
        82: "UPDATE_EXTENDED_PROFILE",
        83: "ADD_FOLLOW",
        84: "NOTIFIED_ADD_FOLLOW",
        85: "DELETE_FOLLOW",
        86: "NOTIFIED_DELETE_FOLLOW",
        87: "UPDATE_TIMELINE_SETTINGS",
        88: "NOTIFIED_FRIEND_REQUEST",
        89: "UPDATE_RINGBACK_TONE",
        90: "NOTIFIED_POSTBACK",
        91: "RECEIVE_READ_WATERMARK",
        92: "NOTIFIED_MESSAGE_DELIVERED",
        93: "NOTIFIED_UPDATE_CHAT_BAR",
        94: "NOTIFIED_CHATAPP_INSTALLED",
        95: "NOTIFIED_CHATAPP_UPDATED",
        96: "NOTIFIED_CHATAPP_NEW_MARK",
        97: "NOTIFIED_CHATAPP_DELETED",
        98: "NOTIFIED_CHATAPP_SYNC",
        99: "NOTIFIED_UPDATE_MESSAGE",
        100: "UPDATE_CHATROOMBGM",
        101: "NOTIFIED_UPDATE_CHATROOMBGM",
        102: "UPDATE_RINGTONE",
        118: "UPDATE_USER_SETTINGS",
        119: "NOTIFIED_UPDATE_STATUS_BAR",
        120: "CREATE_CHAT",
        121: "UPDATE_CHAT",
        122: "NOTIFIED_UPDATE_CHAT",
        123: "INVITE_INTO_CHAT",
        124: "NOTIFIED_INVITE_INTO_CHAT",
        125: "CANCEL_CHAT_INVITATION",
        126: "NOTIFIED_CANCEL_CHAT_INVITATION",
        127: "DELETE_SELF_FROM_CHAT",
        128: "NOTIFIED_DELETE_SELF_FROM_CHAT",
        129: "ACCEPT_CHAT_INVITATION",
        130: "NOTIFIED_ACCEPT_CHAT_INVITATION",
        131: "REJECT_CHAT_INVITATION",
        132: "DELETE_OTHER_FROM_CHAT",
        133: "NOTIFIED_DELETE_OTHER_FROM_CHAT",
        134: "NOTIFIED_CONTACT_CALENDAR_EVENT",
        135: "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL",
        136: "UPDATE_THINGS_OPERATIONS",
        137: "SEND_CHAT_HIDDEN",
        138: "CHAT_META_SYNC_ALL",
        139: "SEND_REACTION",
        140: "NOTIFIED_SEND_REACTION",
        141: "NOTIFIED_UPDATE_PROFILE_CONTENT",
        142: "FAILED_DELIVERY_MESSAGE",
        143: "SEND_ENCRYPTED_E2EE_KEY_REQUESTED",
    }

    _NAMES_TO_VALUES = {
        "END_OF_OPERATION": 0,
        "UPDATE_PROFILE": 1,
        "UPDATE_SETTINGS": 36,
        "NOTIFIED_UPDATE_PROFILE": 2,
        "REGISTER_USERID": 3,
        "ADD_CONTACT": 4,
        "NOTIFIED_ADD_CONTACT": 5,
        "BLOCK_CONTACT": 6,
        "UNBLOCK_CONTACT": 7,
        "NOTIFIED_RECOMMEND_CONTACT": 8,
        "CREATE_GROUP": 9,
        "UPDATE_GROUP": 10,
        "NOTIFIED_UPDATE_GROUP": 11,
        "INVITE_INTO_GROUP": 12,
        "NOTIFIED_INVITE_INTO_GROUP": 13,
        "CANCEL_INVITATION_GROUP": 31,
        "NOTIFIED_CANCEL_INVITATION_GROUP": 32,
        "LEAVE_GROUP": 14,
        "NOTIFIED_LEAVE_GROUP": 15,
        "ACCEPT_GROUP_INVITATION": 16,
        "NOTIFIED_ACCEPT_GROUP_INVITATION": 17,
        "REJECT_GROUP_INVITATION": 34,
        "NOTIFIED_REJECT_GROUP_INVITATION": 35,
        "KICKOUT_FROM_GROUP": 18,
        "NOTIFIED_KICKOUT_FROM_GROUP": 19,
        "CREATE_ROOM": 20,
        "INVITE_INTO_ROOM": 21,
        "NOTIFIED_INVITE_INTO_ROOM": 22,
        "LEAVE_ROOM": 23,
        "NOTIFIED_LEAVE_ROOM": 24,
        "SEND_MESSAGE": 25,
        "RECEIVE_MESSAGE": 26,
        "SEND_MESSAGE_RECEIPT": 27,
        "RECEIVE_MESSAGE_RECEIPT": 28,
        "SEND_CONTENT_RECEIPT": 29,
        "SEND_CHAT_CHECKED": 40,
        "SEND_CHAT_REMOVED": 41,
        "RECEIVE_ANNOUNCEMENT": 30,
        "INVITE_VIA_EMAIL": 38,
        "NOTIFIED_REGISTER_USER": 37,
        "NOTIFIED_UNREGISTER_USER": 33,
        "NOTIFIED_REQUEST_RECOVERY": 39,
        "NOTIFIED_FORCE_SYNC": 42,
        "SEND_CONTENT": 43,
        "SEND_MESSAGE_MYHOME": 44,
        "NOTIFIED_UPDATE_CONTENT_PREVIEW": 45,
        "REMOVE_ALL_MESSAGES": 46,
        "NOTIFIED_UPDATE_PURCHASES": 47,
        "DUMMY": 48,
        "UPDATE_CONTACT": 49,
        "NOTIFIED_RECEIVED_CALL": 50,
        "CANCEL_CALL": 51,
        "NOTIFIED_REDIRECT": 52,
        "NOTIFIED_CHANNEL_SYNC": 53,
        "FAILED_SEND_MESSAGE": 54,
        "NOTIFIED_READ_MESSAGE": 55,
        "FAILED_EMAIL_CONFIRMATION": 56,
        "NOTIFIED_PUSH_NOTICENTER_ITEM": 59,
        "NOTIFIED_CHAT_CONTENT": 58,
        "NOTIFIED_JOIN_CHAT": 60,
        "NOTIFIED_LEAVE_CHAT": 61,
        "NOTIFIED_TYPING": 62,
        "FRIEND_REQUEST_ACCEPTED": 63,
        "DESTROY_MESSAGE": 64,
        "NOTIFIED_DESTROY_MESSAGE": 65,
        "UPDATE_PUBLICKEYCHAIN": 66,
        "NOTIFIED_UPDATE_PUBLICKEYCHAIN": 67,
        "NOTIFIED_BLOCK_CONTACT": 68,
        "NOTIFIED_UNBLOCK_CONTACT": 69,
        "UPDATE_GROUPPREFERENCE": 70,
        "NOTIFIED_PAYMENT_EVENT": 71,
        "REGISTER_E2EE_PUBLICKEY": 72,
        "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": 73,
        "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": 74,
        "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": 75,
        "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": 76,
        "NOTIFIED_E2EE_KEY_UPDATE": 77,
        "NOTIFIED_BUDDY_UPDATE_PROFILE": 78,
        "NOTIFIED_UPDATE_LINEAT_TABS": 79,
        "UPDATE_ROOM": 80,
        "NOTIFIED_BEACON_DETECTED": 81,
        "UPDATE_EXTENDED_PROFILE": 82,
        "ADD_FOLLOW": 83,
        "NOTIFIED_ADD_FOLLOW": 84,
        "DELETE_FOLLOW": 85,
        "NOTIFIED_DELETE_FOLLOW": 86,
        "UPDATE_TIMELINE_SETTINGS": 87,
        "NOTIFIED_FRIEND_REQUEST": 88,
        "UPDATE_RINGBACK_TONE": 89,
        "NOTIFIED_POSTBACK": 90,
        "RECEIVE_READ_WATERMARK": 91,
        "NOTIFIED_MESSAGE_DELIVERED": 92,
        "NOTIFIED_UPDATE_CHAT_BAR": 93,
        "NOTIFIED_CHATAPP_INSTALLED": 94,
        "NOTIFIED_CHATAPP_UPDATED": 95,
        "NOTIFIED_CHATAPP_NEW_MARK": 96,
        "NOTIFIED_CHATAPP_DELETED": 97,
        "NOTIFIED_CHATAPP_SYNC": 98,
        "NOTIFIED_UPDATE_MESSAGE": 99,
        "UPDATE_CHATROOMBGM": 100,
        "NOTIFIED_UPDATE_CHATROOMBGM": 101,
        "UPDATE_RINGTONE": 102,
        "UPDATE_USER_SETTINGS": 118,
        "NOTIFIED_UPDATE_STATUS_BAR": 119,
        "CREATE_CHAT": 120,
        "UPDATE_CHAT": 121,
        "NOTIFIED_UPDATE_CHAT": 122,
        "INVITE_INTO_CHAT": 123,
        "NOTIFIED_INVITE_INTO_CHAT": 124,
        "CANCEL_CHAT_INVITATION": 125,
        "NOTIFIED_CANCEL_CHAT_INVITATION": 126,
        "DELETE_SELF_FROM_CHAT": 127,
        "NOTIFIED_DELETE_SELF_FROM_CHAT": 128,
        "ACCEPT_CHAT_INVITATION": 129,
        "NOTIFIED_ACCEPT_CHAT_INVITATION": 130,
        "REJECT_CHAT_INVITATION": 131,
        "DELETE_OTHER_FROM_CHAT": 132,
        "NOTIFIED_DELETE_OTHER_FROM_CHAT": 133,
        "NOTIFIED_CONTACT_CALENDAR_EVENT": 134,
        "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL": 135,
        "UPDATE_THINGS_OPERATIONS": 136,
        "SEND_CHAT_HIDDEN": 137,
        "CHAT_META_SYNC_ALL": 138,
        "SEND_REACTION": 139,
        "NOTIFIED_SEND_REACTION": 140,
        "NOTIFIED_UPDATE_PROFILE_CONTENT": 141,
        "FAILED_DELIVERY_MESSAGE": 142,
        "SEND_ENCRYPTED_E2EE_KEY_REQUESTED": 143,
    }

class BotType(int):
    RESERVED = 0
    OFFICIAL = 1
    LINE_AT_0 = 2
    LINE_AT = 3

    _VALUES_TO_NAMES = {
        0: "RESERVED",
        1: "OFFICIAL",
        2: "LINE_AT_0",
        3: "LINE_AT",
    }

    _NAMES_TO_VALUES = {
        "RESERVED": 0,
        "OFFICIAL": 1,
        "LINE_AT_0": 2,
        "LINE_AT": 3,
    }

class OnAirType(int):
    NORMAL = 0
    VIDEOCAM = 1
    VOIP = 2
    RECORD = 3

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "VIDEOCAM",
        2: "VOIP",
        3: "RECORD",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "VIDEOCAM": 1,
        "VOIP": 2,
        "RECORD": 3,
    }

class BuddyDisplayType(int):
    NOT_A_FRIEND = 0
    ALWAYS = 1

    _VALUES_TO_NAMES = {
        0: "NOT_A_FRIEND",
        1: "ALWAYS",
    }

    _NAMES_TO_VALUES = {
        "NOT_A_FRIEND": 0,
        "ALWAYS": 1,
    }

class BuddyRequestSource(int):
    NA = 0
    FRIEND_VIEW = 1
    OFFICIAL_ACCOUNT_VIEW = 2

    _VALUES_TO_NAMES = {
        0: "NA",
        1: "FRIEND_VIEW",
        2: "OFFICIAL_ACCOUNT_VIEW",
    }

    _NAMES_TO_VALUES = {
        "NA": 0,
        "FRIEND_VIEW": 1,
        "OFFICIAL_ACCOUNT_VIEW": 2,
    }

class OnAirLabel(int):
    ON_AIR = 0
    LIVE = 1
    GLP = 2

    _VALUES_TO_NAMES = {
        0: "ON_AIR",
        1: "LIVE",
        2: "GLP",
    }

    _NAMES_TO_VALUES = {
        "ON_AIR": 0,
        "LIVE": 1,
        "GLP": 2,
    }

class BotActiveStatus(int):
    UNSPECIFIED = 0
    INACTIVE = 1
    ACTIVE = 2
    DELETED = 3

    _VALUES_TO_NAMES = {
        0: "UNSPECIFIED",
        1: "INACTIVE",
        2: "ACTIVE",
        3: "DELETED",
    }

    _NAMES_TO_VALUES = {
        "UNSPECIFIED": 0,
        "INACTIVE": 1,
        "ACTIVE": 2,
        "DELETED": 3,
    }

class BuddyAttributeSet(int):
    RICH_MENU_ID = 0
    STATUS_BAR = 1

    _VALUES_TO_NAMES = {
        0: "RICH_MENU_ID",
        1: "STATUS_BAR",
    }

    _NAMES_TO_VALUES = {
        "RICH_MENU_ID": 0,
        "STATUS_BAR": 1,
    }

class CallType(int):
    AUDIO = 1
    VIDEO = 2
    FACEPLAY = 3

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
        3: "FACEPLAY",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
        "FACEPLAY": 3,
    }

class MediaType(int):
    AUDIO = 1
    VIDEO = 2
    LIVE = 3

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
        3: "LIVE",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
        "LIVE": 3,
    }

class CallFlowType(int):
    NEW = 1
    PLANET = 2

    _VALUES_TO_NAMES = {
        1: "NEW",
        2: "PLANET",
    }

    _NAMES_TO_VALUES = {
        "NEW": 1,
        "PLANET": 2,
    }

class CallProto(int):
    STANDARD = 1
    CONSTELLA = 2

    _VALUES_TO_NAMES = {
        1: "STANDARD",
        2: "CONSTELLA",
    }

    _NAMES_TO_VALUES = {
        "STANDARD": 1,
        "CONSTELLA": 2,
    }

class PaidCallType(int):
    OUT = 0
    IN = 1
    TOLLFREE = 2
    RECORD = 3
    AD = 4
    CS = 5
    OA = 6
    OAM = 7

    _VALUES_TO_NAMES = {
        0: "OUT",
        1: "IN",
        2: "TOLLFREE",
        3: "RECORD",
        4: "AD",
        5: "CS",
        6: "OA",
        7: "OAM",
    }

    _NAMES_TO_VALUES = {
        "OUT": 0,
        "IN": 1,
        "TOLLFREE": 2,
        "RECORD": 3,
        "AD": 4,
        "CS": 5,
        "OA": 6,
        "OAM": 7,
    }

class PaidCallProductType(int):
    COIN = 0
    CREDIT = 1
    MONTHLY = 2
    OAM = 3

    _VALUES_TO_NAMES = {
        0: "COIN",
        1: "CREDIT",
        2: "MONTHLY",
        3: "OAM",
    }

    _NAMES_TO_VALUES = {
        "COIN": 0,
        "CREDIT": 1,
        "MONTHLY": 2,
        "OAM": 3,
    }

class PaidCallerIdStatus(int):
    NOT_SPECIFIED = 0
    VALID = 1
    VERIFICATION_REQUIRED = 2
    NOT_PERMITTED = 3
    LIMIT_EXCEEDED = 4
    LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "VALID",
        2: "VERIFICATION_REQUIRED",
        3: "NOT_PERMITTED",
        4: "LIMIT_EXCEEDED",
        5: "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "VALID": 1,
        "VERIFICATION_REQUIRED": 2,
        "NOT_PERMITTED": 3,
        "LIMIT_EXCEEDED": 4,
        "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 5,
    }

class SpotCategory(int):
    UNKNOWN = 0
    GOURMET = 1
    BEAUTY = 2
    TRAVEL = 3
    SHOPPING = 4
    ENTERTAINMENT = 5
    SPORTS = 6
    TRANSPORT = 7
    LIFE = 8
    HOSPITAL = 9
    FINANCE = 10
    EDUCATION = 11
    OTHER = 12
    ALL = 10000

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "GOURMET",
        2: "BEAUTY",
        3: "TRAVEL",
        4: "SHOPPING",
        5: "ENTERTAINMENT",
        6: "SPORTS",
        7: "TRANSPORT",
        8: "LIFE",
        9: "HOSPITAL",
        10: "FINANCE",
        11: "EDUCATION",
        12: "OTHER",
        10000: "ALL",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "GOURMET": 1,
        "BEAUTY": 2,
        "TRAVEL": 3,
        "SHOPPING": 4,
        "ENTERTAINMENT": 5,
        "SPORTS": 6,
        "TRANSPORT": 7,
        "LIFE": 8,
        "HOSPITAL": 9,
        "FINANCE": 10,
        "EDUCATION": 11,
        "OTHER": 12,
        "ALL": 10000,
    }

class ChannelPublicType(int):
    HIDDEN = 0
    PUBLIC = 1000

    _VALUES_TO_NAMES = {
        0: "HIDDEN",
        1000: "PUBLIC",
    }

    _NAMES_TO_VALUES = {
        "HIDDEN": 0,
        "PUBLIC": 1000,
    }

class ChannelConfigurations(int):
    MESSAGE = 0
    MESSAGE_NOTIFICATION = 1
    NOTIFICATION_CENTER = 2

    _VALUES_TO_NAMES = {
        0: "MESSAGE",
        1: "MESSAGE_NOTIFICATION",
        2: "NOTIFICATION_CENTER",
    }

    _NAMES_TO_VALUES = {
        "MESSAGE": 0,
        "MESSAGE_NOTIFICATION": 1,
        "NOTIFICATION_CENTER": 2,
    }

class ChannelAllowedPermissions(int):
    PROFILE = 0
    FRIENDS = 1
    GROUP = 2

    _VALUES_TO_NAMES = {
        0: "PROFILE",
        1: "FRIENDS",
        2: "GROUP",
    }

    _NAMES_TO_VALUES = {
        "PROFILE": 0,
        "FRIENDS": 1,
        "GROUP": 2,
    }

class AppStoreCode(int):
    PAYMENT_APPLE = 1
    PAYMENT_GOOGLE = 2

    _VALUES_TO_NAMES = {
        1: "PAYMENT_APPLE",
        2: "PAYMENT_GOOGLE",
    }

    _NAMES_TO_VALUES = {
        "PAYMENT_APPLE": 1,
        "PAYMENT_GOOGLE": 2,
    }

class ChannelFeatureLicenses(int):
    BLE_LCS_API_USABLE = 26
    PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27
    ALLOW_IOS_WEBKIT = 28
    PURCHASE_LCS_API_USABLE = 38
    ALLOW_ANDROID_ENABLE_ZOOM = 48

    _VALUES_TO_NAMES = {
        26: "BLE_LCS_API_USABLE",
        27: "PROHIBIT_MINIMIZE_CHANNEL_BROWSER",
        28: "ALLOW_IOS_WEBKIT",
        38: "PURCHASE_LCS_API_USABLE",
        48: "ALLOW_ANDROID_ENABLE_ZOOM",
    }

    _NAMES_TO_VALUES = {
        "BLE_LCS_API_USABLE": 26,
        "PROHIBIT_MINIMIZE_CHANNEL_BROWSER": 27,
        "ALLOW_IOS_WEBKIT": 28,
        "PURCHASE_LCS_API_USABLE": 38,
        "ALLOW_ANDROID_ENABLE_ZOOM": 48,
    }

class AvailableChatTypes(int):
    PERSONAL = 1
    ROOM = 2
    GROUP = 3
    SQUARE_CHAT = 4

    _VALUES_TO_NAMES = {
        1: "PERSONAL",
        2: "ROOM",
        3: "GROUP",
        4: "SQUARE_CHAT",
    }

    _NAMES_TO_VALUES = {
        "PERSONAL": 1,
        "ROOM": 2,
        "GROUP": 3,
        "SQUARE_CHAT": 4,
    }

class ChatAppCategory(int):
    PRIORITY = 2
    REGULAR = 1
    MORE = 3

    _VALUES_TO_NAMES = {
        2: "PRIORITY",
        1: "REGULAR",
        3: "MORE",
    }

    _NAMES_TO_VALUES = {
        "PRIORITY": 2,
        "REGULAR": 1,
        "MORE": 3,
    }

class PgCode(int):
    PAYMENT_PG_NONE = 0
    PAYMENT_PG_AU = 1
    PAYMENT_PG_AL = 2

    _VALUES_TO_NAMES = {
        0: "PAYMENT_PG_NONE",
        1: "PAYMENT_PG_AU",
        2: "PAYMENT_PG_AL",
    }

    _NAMES_TO_VALUES = {
        "PAYMENT_PG_NONE": 0,
        "PAYMENT_PG_AU": 1,
        "PAYMENT_PG_AL": 2,
    }

class CoinPayLoadType(int):
    PAYLOAD_BUY = 101
    PAYLOAD_CS = 111
    PAYLOAD_BONUS = 121
    PAYLOAD_EVENT = 131
    PAYLOAD_POINT_AUTO_EXCHANGED = 141
    PAYLOAD_POINT_MANUAL_EXCHANGED = 151

    _VALUES_TO_NAMES = {
        101: "PAYLOAD_BUY",
        111: "PAYLOAD_CS",
        121: "PAYLOAD_BONUS",
        131: "PAYLOAD_EVENT",
        141: "PAYLOAD_POINT_AUTO_EXCHANGED",
        151: "PAYLOAD_POINT_MANUAL_EXCHANGED",
    }

    _NAMES_TO_VALUES = {
        "PAYLOAD_BUY": 101,
        "PAYLOAD_CS": 111,
        "PAYLOAD_BONUS": 121,
        "PAYLOAD_EVENT": 131,
        "PAYLOAD_POINT_AUTO_EXCHANGED": 141,
        "PAYLOAD_POINT_MANUAL_EXCHANGED": 151,
    }

class SecondaryQrErrorCode(int):
    INTERNAL_ERROR = 0
    ILLEGAL_ARGUMENT = 1
    VERIFICATION_FAILED = 2
    NOT_ALLOWED_QR_CODE_LOGIN = 3
    VERIFICATION_NOTICE_FAILED = 4
    RETRY_LATER = 5
    INVALID_CONTEXT = 100
    APP_UPGRADE_REQUIRED = 101

    _VALUES_TO_NAMES = {
        0: "INTERNAL_ERROR",
        1: "ILLEGAL_ARGUMENT",
        2: "VERIFICATION_FAILED",
        3: "NOT_ALLOWED_QR_CODE_LOGIN",
        4: "VERIFICATION_NOTICE_FAILED",
        5: "RETRY_LATER",
        100: "INVALID_CONTEXT",
        101: "APP_UPGRADE_REQUIRED",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_ERROR": 0,
        "ILLEGAL_ARGUMENT": 1,
        "VERIFICATION_FAILED": 2,
        "NOT_ALLOWED_QR_CODE_LOGIN": 3,
        "VERIFICATION_NOTICE_FAILED": 4,
        "RETRY_LATER": 5,
        "INVALID_CONTEXT": 100,
        "APP_UPGRADE_REQUIRED": 101,
    }

class CoinErrorCode(int):
    ILLEGAL_ARGUMENT = 0
    AUTHENTICATION_FAILED = 1
    INTERNAL_ERROR = 20
    MESSAGE_DEFINED_ERROR = 29
    MAINTENANCE_ERROR = 33

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "AUTHENTICATION_FAILED",
        20: "INTERNAL_ERROR",
        29: "MESSAGE_DEFINED_ERROR",
        33: "MAINTENANCE_ERROR",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "AUTHENTICATION_FAILED": 1,
        "INTERNAL_ERROR": 20,
        "MESSAGE_DEFINED_ERROR": 29,
        "MAINTENANCE_ERROR": 33,
    }

class ChatappErrorCode(int):
    INVALID_REQUEST = 1
    UNAUTHORIZED = 2
    SERVER_ERROR = 100

    _VALUES_TO_NAMES = {
        1: "INVALID_REQUEST",
        2: "UNAUTHORIZED",
        100: "SERVER_ERROR",
    }

    _NAMES_TO_VALUES = {
        "INVALID_REQUEST": 1,
        "UNAUTHORIZED": 2,
        "SERVER_ERROR": 100,
    }

class ChannelErrorCode(int):
    ILLEGAL_ARGUMENT = 0
    INTERNAL_ERROR = 1
    CONNECTION_ERROR = 2
    AUTHENTICATIONI_FAILED = 3
    NEED_PERMISSION_APPROVAL = 4
    COIN_NOT_USABLE = 5
    WEBVIEW_NOT_ALLOWED = 6

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "INTERNAL_ERROR",
        2: "CONNECTION_ERROR",
        3: "AUTHENTICATIONI_FAILED",
        4: "NEED_PERMISSION_APPROVAL",
        5: "COIN_NOT_USABLE",
        6: "WEBVIEW_NOT_ALLOWED",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "INTERNAL_ERROR": 1,
        "CONNECTION_ERROR": 2,
        "AUTHENTICATIONI_FAILED": 3,
        "NEED_PERMISSION_APPROVAL": 4,
        "COIN_NOT_USABLE": 5,
        "WEBVIEW_NOT_ALLOWED": 6,
    }

class E2EEKeyBackupErrorCode(int):
    ILLEGAL_ARGUMENT = 0
    AUTHENTICATION_FAILED = 1
    INTERNAL_ERROR = 2
    RESTORE_KEY_FIRST = 3
    NO_BACKUP = 4
    INVALID_PIN = 6
    PERMANENTLY_LOCKED = 7

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "AUTHENTICATION_FAILED",
        2: "INTERNAL_ERROR",
        3: "RESTORE_KEY_FIRST",
        4: "NO_BACKUP",
        6: "INVALID_PIN",
        7: "PERMANENTLY_LOCKED",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "AUTHENTICATION_FAILED": 1,
        "INTERNAL_ERROR": 2,
        "RESTORE_KEY_FIRST": 3,
        "NO_BACKUP": 4,
        "INVALID_PIN": 6,
        "PERMANENTLY_LOCKED": 7,
    }

class TalkErrorCode(int):
    ILLEGAL_ARGUMENT = 0
    AUTHENTICATION_FAILED = 1
    DB_FAILED = 2
    INVALID_STATE = 3
    EXCESSIVE_ACCESS = 4
    NOT_FOUND = 5
    INVALID_MID = 9
    NOT_A_MEMBER = 10
    INVALID_LENGTH = 6
    NOT_AVAILABLE_USER = 7
    NOT_AUTHORIZED_DEVICE = 8
    NOT_AUTHORIZED_SESSION = 14
    INCOMPATIBLE_APP_VERSION = 11
    NOT_READY = 12
    NOT_AVAILABLE_SESSION = 13
    SYSTEM_ERROR = 15
    NO_AVAILABLE_VERIFICATION_METHOD = 16
    NOT_AUTHENTICATED = 17
    INVALID_IDENTITY_CREDENTIAL = 18
    NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19
    INTERNAL_ERROR = 20
    NO_SUCH_IDENTITY_IDENFIER = 21
    DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22
    ILLEGAL_IDENTITY_CREDENTIAL = 23
    UNKNOWN_CHANNEL = 24
    NO_SUCH_MESSAGE_BOX = 25
    NOT_AVAILABLE_MESSAGE_BOX = 26
    CHANNEL_DOES_NOT_MATCH = 27
    NOT_YOUR_MESSAGE = 28
    MESSAGE_DEFINED_ERROR = 29
    USER_CANNOT_ACCEPT_PRESENTS = 30
    USER_NOT_STICKER_OWNER = 32
    MAINTENANCE_ERROR = 33
    ACCOUNT_NOT_MATCHED = 34
    ABUSE_BLOCK = 35
    NOT_FRIEND = 36
    NOT_ALLOWED_CALL = 37
    BLOCK_FRIEND = 38
    INCOMPATIBLE_VOIP_VERSION = 39
    INVALID_SNS_ACCESS_TOKEN = 40
    EXTERNAL_SERVICE_NOT_AVAILABLE = 41
    NOT_ALLOWED_ADD_CONTACT = 42
    NOT_CERTIFICATED = 43
    NOT_ALLOWED_SECONDARY_DEVICE = 44
    INVALID_PIN_CODE = 45
    NOT_FOUND_IDENTITY_CREDENTIAL = 46
    EXCEED_FILE_MAX_SIZE = 47
    EXCEED_DAILY_QUOTA = 48
    NOT_SUPPORT_SEND_FILE = 49
    MUST_UPGRADE = 50
    NOT_AVAILABLE_PIN_CODE_SESSION = 51
    EXPIRED_REVISION = 52
    NOT_YET_PHONE_NUMBER = 54
    BAD_CALL_NUMBER = 55
    UNAVAILABLE_CALL_NUMBER = 56
    NOT_SUPPORT_CALL_SERVICE = 57
    CONGESTION_CONTROL = 58
    NO_BALANCE = 59
    NOT_PERMITTED_CALLER_ID = 60
    NO_CALLER_ID_LIMIT_EXCEEDED = 61
    CALLER_ID_VERIFICATION_REQUIRED = 62
    NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63
    MESSAGE_NOT_FOUND = 64
    INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65
    ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66
    ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67
    INVALID_PASSWORD_FORMAT = 69
    FEATURE_RESTRICTED = 70
    MESSAGE_NOT_DESTRUCTIBLE = 71
    PAID_CALL_REDEEM_FAILED = 72
    PREVENTED_JOIN_BY_TICKET = 73
    SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75
    SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76
    SECURITY_CENTER_NOT_VERIFIED = 77
    SECURITY_CENTER_BLOCKED_BY_SETTING = 78
    SECURITY_CENTER_BLOCKED = 79
    TALK_PROXY_EXCEPTION = 80
    E2EE_INVALID_PROTOCOL = 81
    E2EE_RETRY_ENCRYPT = 82
    E2EE_UPDATE_SENDER_KEY = 83
    E2EE_UPDATE_RECEIVER_KEY = 84
    E2EE_INVALID_ARGUMENT = 85
    E2EE_INVALID_VERSION = 86
    E2EE_SENDER_DISABLED = 87
    E2EE_RECEIVER_DISABLED = 88
    E2EE_SENDER_NOT_ALLOWED = 89
    E2EE_RECEIVER_NOT_ALLOWED = 90
    E2EE_RESEND_FAIL = 91
    E2EE_RESEND_OK = 92
    HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93
    E2EE_UPDATE_PRIMARY_DEVICE = 94
    SUCCESS = 95
    CANCEL = 96
    E2EE_PRIMARY_NOT_SUPPORT = 97
    E2EE_RETRY_PLAIN = 98
    E2EE_RECREATE_GROUP_KEY = 99
    E2EE_GROUP_TOO_MANY_MEMBERS = 100
    SERVER_BUSY = 101
    NOT_ALLOWED_ADD_FOLLOW = 102
    INCOMING_FRIEND_REQUEST_LIMIT = 103
    OUTGOING_FRIEND_REQUEST_LIMIT = 104
    OUTGOING_FRIEND_REQUEST_QUOTA = 105
    DUPLICATED = 106
    BANNED = 107
    NOT_AN_INVITEE = 108
    NOT_AN_OUTSIDER = 109
    EMPTY_GROUP = 111
    EXCEED_FOLLOW_LIMIT = 112
    UNSUPPORTED_ACCOUNT_TYPE = 113
    AGREEMENT_REQUIRED = 114
    SHOULD_RETRY = 115
    OVER_MAX_CHATS_PER_USER = 116
    NOT_AVAILABLE_API = 117
    INVALID_OTP = 118
    MUST_REFRESH_V3_TOKEN = 119
    ALREADY_EXPIRED = 120
    USER_NOT_STICON_OWNER = 121
    REFRESH_MEDIA_FLOW = 122
    EXCEED_FOLLOWER_LIMIT = 123

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "AUTHENTICATION_FAILED",
        2: "DB_FAILED",
        3: "INVALID_STATE",
        4: "EXCESSIVE_ACCESS",
        5: "NOT_FOUND",
        9: "INVALID_MID",
        10: "NOT_A_MEMBER",
        6: "INVALID_LENGTH",
        7: "NOT_AVAILABLE_USER",
        8: "NOT_AUTHORIZED_DEVICE",
        14: "NOT_AUTHORIZED_SESSION",
        11: "INCOMPATIBLE_APP_VERSION",
        12: "NOT_READY",
        13: "NOT_AVAILABLE_SESSION",
        15: "SYSTEM_ERROR",
        16: "NO_AVAILABLE_VERIFICATION_METHOD",
        17: "NOT_AUTHENTICATED",
        18: "INVALID_IDENTITY_CREDENTIAL",
        19: "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
        20: "INTERNAL_ERROR",
        21: "NO_SUCH_IDENTITY_IDENFIER",
        22: "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
        23: "ILLEGAL_IDENTITY_CREDENTIAL",
        24: "UNKNOWN_CHANNEL",
        25: "NO_SUCH_MESSAGE_BOX",
        26: "NOT_AVAILABLE_MESSAGE_BOX",
        27: "CHANNEL_DOES_NOT_MATCH",
        28: "NOT_YOUR_MESSAGE",
        29: "MESSAGE_DEFINED_ERROR",
        30: "USER_CANNOT_ACCEPT_PRESENTS",
        32: "USER_NOT_STICKER_OWNER",
        33: "MAINTENANCE_ERROR",
        34: "ACCOUNT_NOT_MATCHED",
        35: "ABUSE_BLOCK",
        36: "NOT_FRIEND",
        37: "NOT_ALLOWED_CALL",
        38: "BLOCK_FRIEND",
        39: "INCOMPATIBLE_VOIP_VERSION",
        40: "INVALID_SNS_ACCESS_TOKEN",
        41: "EXTERNAL_SERVICE_NOT_AVAILABLE",
        42: "NOT_ALLOWED_ADD_CONTACT",
        43: "NOT_CERTIFICATED",
        44: "NOT_ALLOWED_SECONDARY_DEVICE",
        45: "INVALID_PIN_CODE",
        46: "NOT_FOUND_IDENTITY_CREDENTIAL",
        47: "EXCEED_FILE_MAX_SIZE",
        48: "EXCEED_DAILY_QUOTA",
        49: "NOT_SUPPORT_SEND_FILE",
        50: "MUST_UPGRADE",
        51: "NOT_AVAILABLE_PIN_CODE_SESSION",
        52: "EXPIRED_REVISION",
        54: "NOT_YET_PHONE_NUMBER",
        55: "BAD_CALL_NUMBER",
        56: "UNAVAILABLE_CALL_NUMBER",
        57: "NOT_SUPPORT_CALL_SERVICE",
        58: "CONGESTION_CONTROL",
        59: "NO_BALANCE",
        60: "NOT_PERMITTED_CALLER_ID",
        61: "NO_CALLER_ID_LIMIT_EXCEEDED",
        62: "CALLER_ID_VERIFICATION_REQUIRED",
        63: "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
        64: "MESSAGE_NOT_FOUND",
        65: "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
        66: "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
        67: "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
        69: "INVALID_PASSWORD_FORMAT",
        70: "FEATURE_RESTRICTED",
        71: "MESSAGE_NOT_DESTRUCTIBLE",
        72: "PAID_CALL_REDEEM_FAILED",
        73: "PREVENTED_JOIN_BY_TICKET",
        75: "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
        76: "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
        77: "SECURITY_CENTER_NOT_VERIFIED",
        78: "SECURITY_CENTER_BLOCKED_BY_SETTING",
        79: "SECURITY_CENTER_BLOCKED",
        80: "TALK_PROXY_EXCEPTION",
        81: "E2EE_INVALID_PROTOCOL",
        82: "E2EE_RETRY_ENCRYPT",
        83: "E2EE_UPDATE_SENDER_KEY",
        84: "E2EE_UPDATE_RECEIVER_KEY",
        85: "E2EE_INVALID_ARGUMENT",
        86: "E2EE_INVALID_VERSION",
        87: "E2EE_SENDER_DISABLED",
        88: "E2EE_RECEIVER_DISABLED",
        89: "E2EE_SENDER_NOT_ALLOWED",
        90: "E2EE_RECEIVER_NOT_ALLOWED",
        91: "E2EE_RESEND_FAIL",
        92: "E2EE_RESEND_OK",
        93: "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
        94: "E2EE_UPDATE_PRIMARY_DEVICE",
        95: "SUCCESS",
        96: "CANCEL",
        97: "E2EE_PRIMARY_NOT_SUPPORT",
        98: "E2EE_RETRY_PLAIN",
        99: "E2EE_RECREATE_GROUP_KEY",
        100: "E2EE_GROUP_TOO_MANY_MEMBERS",
        101: "SERVER_BUSY",
        102: "NOT_ALLOWED_ADD_FOLLOW",
        103: "INCOMING_FRIEND_REQUEST_LIMIT",
        104: "OUTGOING_FRIEND_REQUEST_LIMIT",
        105: "OUTGOING_FRIEND_REQUEST_QUOTA",
        106: "DUPLICATED",
        107: "BANNED",
        108: "NOT_AN_INVITEE",
        109: "NOT_AN_OUTSIDER",
        111: "EMPTY_GROUP",
        112: "EXCEED_FOLLOW_LIMIT",
        113: "UNSUPPORTED_ACCOUNT_TYPE",
        114: "AGREEMENT_REQUIRED",
        115: "SHOULD_RETRY",
        116: "OVER_MAX_CHATS_PER_USER",
        117: "NOT_AVAILABLE_API",
        118: "INVALID_OTP",
        119: "MUST_REFRESH_V3_TOKEN",
        120: "ALREADY_EXPIRED",
        121: "USER_NOT_STICON_OWNER",
        122: "REFRESH_MEDIA_FLOW",
        123: "EXCEED_FOLLOWER_LIMIT",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "AUTHENTICATION_FAILED": 1,
        "DB_FAILED": 2,
        "INVALID_STATE": 3,
        "EXCESSIVE_ACCESS": 4,
        "NOT_FOUND": 5,
        "INVALID_MID": 9,
        "NOT_A_MEMBER": 10,
        "INVALID_LENGTH": 6,
        "NOT_AVAILABLE_USER": 7,
        "NOT_AUTHORIZED_DEVICE": 8,
        "NOT_AUTHORIZED_SESSION": 14,
        "INCOMPATIBLE_APP_VERSION": 11,
        "NOT_READY": 12,
        "NOT_AVAILABLE_SESSION": 13,
        "SYSTEM_ERROR": 15,
        "NO_AVAILABLE_VERIFICATION_METHOD": 16,
        "NOT_AUTHENTICATED": 17,
        "INVALID_IDENTITY_CREDENTIAL": 18,
        "NOT_AVAILABLE_IDENTITY_IDENTIFIER": 19,
        "INTERNAL_ERROR": 20,
        "NO_SUCH_IDENTITY_IDENFIER": 21,
        "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": 22,
        "ILLEGAL_IDENTITY_CREDENTIAL": 23,
        "UNKNOWN_CHANNEL": 24,
        "NO_SUCH_MESSAGE_BOX": 25,
        "NOT_AVAILABLE_MESSAGE_BOX": 26,
        "CHANNEL_DOES_NOT_MATCH": 27,
        "NOT_YOUR_MESSAGE": 28,
        "MESSAGE_DEFINED_ERROR": 29,
        "USER_CANNOT_ACCEPT_PRESENTS": 30,
        "USER_NOT_STICKER_OWNER": 32,
        "MAINTENANCE_ERROR": 33,
        "ACCOUNT_NOT_MATCHED": 34,
        "ABUSE_BLOCK": 35,
        "NOT_FRIEND": 36,
        "NOT_ALLOWED_CALL": 37,
        "BLOCK_FRIEND": 38,
        "INCOMPATIBLE_VOIP_VERSION": 39,
        "INVALID_SNS_ACCESS_TOKEN": 40,
        "EXTERNAL_SERVICE_NOT_AVAILABLE": 41,
        "NOT_ALLOWED_ADD_CONTACT": 42,
        "NOT_CERTIFICATED": 43,
        "NOT_ALLOWED_SECONDARY_DEVICE": 44,
        "INVALID_PIN_CODE": 45,
        "NOT_FOUND_IDENTITY_CREDENTIAL": 46,
        "EXCEED_FILE_MAX_SIZE": 47,
        "EXCEED_DAILY_QUOTA": 48,
        "NOT_SUPPORT_SEND_FILE": 49,
        "MUST_UPGRADE": 50,
        "NOT_AVAILABLE_PIN_CODE_SESSION": 51,
        "EXPIRED_REVISION": 52,
        "NOT_YET_PHONE_NUMBER": 54,
        "BAD_CALL_NUMBER": 55,
        "UNAVAILABLE_CALL_NUMBER": 56,
        "NOT_SUPPORT_CALL_SERVICE": 57,
        "CONGESTION_CONTROL": 58,
        "NO_BALANCE": 59,
        "NOT_PERMITTED_CALLER_ID": 60,
        "NO_CALLER_ID_LIMIT_EXCEEDED": 61,
        "CALLER_ID_VERIFICATION_REQUIRED": 62,
        "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 63,
        "MESSAGE_NOT_FOUND": 64,
        "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": 65,
        "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": 66,
        "ACCOUNT_MIGRATION_PINCODE_BLOCKED": 67,
        "INVALID_PASSWORD_FORMAT": 69,
        "FEATURE_RESTRICTED": 70,
        "MESSAGE_NOT_DESTRUCTIBLE": 71,
        "PAID_CALL_REDEEM_FAILED": 72,
        "PREVENTED_JOIN_BY_TICKET": 73,
        "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": 75,
        "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": 76,
        "SECURITY_CENTER_NOT_VERIFIED": 77,
        "SECURITY_CENTER_BLOCKED_BY_SETTING": 78,
        "SECURITY_CENTER_BLOCKED": 79,
        "TALK_PROXY_EXCEPTION": 80,
        "E2EE_INVALID_PROTOCOL": 81,
        "E2EE_RETRY_ENCRYPT": 82,
        "E2EE_UPDATE_SENDER_KEY": 83,
        "E2EE_UPDATE_RECEIVER_KEY": 84,
        "E2EE_INVALID_ARGUMENT": 85,
        "E2EE_INVALID_VERSION": 86,
        "E2EE_SENDER_DISABLED": 87,
        "E2EE_RECEIVER_DISABLED": 88,
        "E2EE_SENDER_NOT_ALLOWED": 89,
        "E2EE_RECEIVER_NOT_ALLOWED": 90,
        "E2EE_RESEND_FAIL": 91,
        "E2EE_RESEND_OK": 92,
        "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": 93,
        "E2EE_UPDATE_PRIMARY_DEVICE": 94,
        "SUCCESS": 95,
        "CANCEL": 96,
        "E2EE_PRIMARY_NOT_SUPPORT": 97,
        "E2EE_RETRY_PLAIN": 98,
        "E2EE_RECREATE_GROUP_KEY": 99,
        "E2EE_GROUP_TOO_MANY_MEMBERS": 100,
        "SERVER_BUSY": 101,
        "NOT_ALLOWED_ADD_FOLLOW": 102,
        "INCOMING_FRIEND_REQUEST_LIMIT": 103,
        "OUTGOING_FRIEND_REQUEST_LIMIT": 104,
        "OUTGOING_FRIEND_REQUEST_QUOTA": 105,
        "DUPLICATED": 106,
        "BANNED": 107,
        "NOT_AN_INVITEE": 108,
        "NOT_AN_OUTSIDER": 109,
        "EMPTY_GROUP": 111,
        "EXCEED_FOLLOW_LIMIT": 112,
        "UNSUPPORTED_ACCOUNT_TYPE": 113,
        "AGREEMENT_REQUIRED": 114,
        "SHOULD_RETRY": 115,
        "OVER_MAX_CHATS_PER_USER": 116,
        "NOT_AVAILABLE_API": 117,
        "INVALID_OTP": 118,
        "MUST_REFRESH_V3_TOKEN": 119,
        "ALREADY_EXPIRED": 120,
        "USER_NOT_STICON_OWNER": 121,
        "REFRESH_MEDIA_FLOW": 122,
        "EXCEED_FOLLOWER_LIMIT": 123,
    }

class Message(object):
    """
    Attributes:
     - _from
     - to
     - toType
     - id
     - createdTime
     - deliveredTime
     - text
     - location
     - hasContent
     - contentType
     - contentPreview
     - contentMetadata
     - sessionId
     - chunks
     - relatedMessageId
     - messageRelationType
     - readCount
     - relatedMessageServiceCode
     - appExtensionType
     - reactions
    """
    def __init__(self, _from=None, to=None, toType=None, id=None, createdTime=None, deliveredTime=None, text=None, location=None, hasContent=None, contentType=None, contentPreview=None, contentMetadata=None, sessionId=None, chunks=None, relatedMessageId=None, messageRelationType=None, readCount=None, relatedMessageServiceCode=None, appExtensionType=None, reactions=None):
        self._from = _from
        self.to = to
        self.toType = toType
        self.id = id
        self.createdTime = createdTime
        self.deliveredTime = deliveredTime
        self.text = text
        self.location = location
        self.hasContent = hasContent
        self.contentType = contentType
        self.contentPreview = contentPreview
        self.contentMetadata = contentMetadata
        self.sessionId = sessionId
        self.chunks = chunks
        self.relatedMessageId = relatedMessageId
        self.messageRelationType = messageRelationType
        self.readCount = readCount
        self.relatedMessageServiceCode = relatedMessageServiceCode
        self.appExtensionType = appExtensionType
        self.reactions = reactions

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self._from = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.to = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.toType = MidType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.deliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.hasContent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.contentType = ContentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.contentPreview = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.MAP:
                    self.contentMetadata = {}
                    (_, _, elem0) = iprot.readMapBegin()
                    for _ in range(elem0):
                        elem2 = iprot.readString()
                        elem1 = iprot.readString()
                        self.contentMetadata[elem2] = elem1
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BYTE:
                    self.sessionId = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.chunks = []
                    (_, elem3) = iprot.readListBegin()
                    for _ in range(elem3):
                        elem4 = iprot.readBinary()
                        self.chunks.append(elem4)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.relatedMessageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.messageRelationType = MessageRelationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.readCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.relatedMessageServiceCode = RelatedMessageServiceCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.appExtensionType = AppExtensionType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.LIST:
                    self.reactions = []
                    (_, elem5) = iprot.readListBegin()
                    for _ in range(elem5):
                        elem6 = Reaction()
                        elem6.read(iprot)
                        self.reactions.append(elem6)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Message')
        if self._from is not None:
            oprot.writeFieldBegin('_from', TType.STRING, 1)
            oprot.writeString(self._from)
            oprot.writeFieldEnd()
        if self.to is not None:
            oprot.writeFieldBegin('to', TType.STRING, 2)
            oprot.writeString(self.to)
            oprot.writeFieldEnd()
        if self.toType is not None:
            oprot.writeFieldBegin('toType', TType.I32, 3)
            oprot.writeI32(self.toType)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 4)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.deliveredTime is not None:
            oprot.writeFieldBegin('deliveredTime', TType.I64, 6)
            oprot.writeI64(self.deliveredTime)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 10)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 11)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.hasContent is not None:
            oprot.writeFieldBegin('hasContent', TType.BOOL, 14)
            oprot.writeBool(self.hasContent)
            oprot.writeFieldEnd()
        if self.contentType is not None:
            oprot.writeFieldBegin('contentType', TType.I32, 15)
            oprot.writeI32(self.contentType)
            oprot.writeFieldEnd()
        if self.contentPreview is not None:
            oprot.writeFieldBegin('contentPreview', TType.STRING, 17)
            oprot.writeBinary(self.contentPreview)
            oprot.writeFieldEnd()
        if self.contentMetadata is not None:
            oprot.writeFieldBegin('contentMetadata', TType.MAP, 18)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.contentMetadata))
            for elem8, elem7 in self.contentMetadata.items():
                oprot.writeString(elem8)
                oprot.writeString(elem7)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.BYTE, 19)
            oprot.writeByte(self.sessionId)
            oprot.writeFieldEnd()
        if self.chunks is not None:
            oprot.writeFieldBegin('chunks', TType.LIST, 20)
            oprot.writeListBegin(TType.STRING, len(self.chunks))
            for elem9 in self.chunks:
                oprot.writeBinary(elem9)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.relatedMessageId is not None:
            oprot.writeFieldBegin('relatedMessageId', TType.STRING, 21)
            oprot.writeString(self.relatedMessageId)
            oprot.writeFieldEnd()
        if self.messageRelationType is not None:
            oprot.writeFieldBegin('messageRelationType', TType.I32, 22)
            oprot.writeI32(self.messageRelationType)
            oprot.writeFieldEnd()
        if self.readCount is not None:
            oprot.writeFieldBegin('readCount', TType.I32, 23)
            oprot.writeI32(self.readCount)
            oprot.writeFieldEnd()
        if self.relatedMessageServiceCode is not None:
            oprot.writeFieldBegin('relatedMessageServiceCode', TType.I32, 24)
            oprot.writeI32(self.relatedMessageServiceCode)
            oprot.writeFieldEnd()
        if self.appExtensionType is not None:
            oprot.writeFieldBegin('appExtensionType', TType.I32, 25)
            oprot.writeI32(self.appExtensionType)
            oprot.writeFieldEnd()
        if self.reactions is not None:
            oprot.writeFieldBegin('reactions', TType.LIST, 27)
            oprot.writeListBegin(TType.STRUCT, len(self.reactions))
            for elem10 in self.reactions:
                elem10.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self._from))
        value = (value * 31) ^ hash(make_hashable(self.to))
        value = (value * 31) ^ hash(make_hashable(self.toType))
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.deliveredTime))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.location))
        value = (value * 31) ^ hash(make_hashable(self.hasContent))
        value = (value * 31) ^ hash(make_hashable(self.contentType))
        value = (value * 31) ^ hash(make_hashable(self.contentPreview))
        value = (value * 31) ^ hash(make_hashable(self.contentMetadata))
        value = (value * 31) ^ hash(make_hashable(self.sessionId))
        value = (value * 31) ^ hash(make_hashable(self.chunks))
        value = (value * 31) ^ hash(make_hashable(self.relatedMessageId))
        value = (value * 31) ^ hash(make_hashable(self.messageRelationType))
        value = (value * 31) ^ hash(make_hashable(self.readCount))
        value = (value * 31) ^ hash(make_hashable(self.relatedMessageServiceCode))
        value = (value * 31) ^ hash(make_hashable(self.appExtensionType))
        value = (value * 31) ^ hash(make_hashable(self.reactions))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Reaction(object):
    """
    Attributes:
     - fromUserMid
     - atMillis
     - reactionType
    """
    def __init__(self, fromUserMid=None, atMillis=None, reactionType=None):
        self.fromUserMid = fromUserMid
        self.atMillis = atMillis
        self.reactionType = reactionType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fromUserMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.atMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.reactionType = ReactionType()
                    self.reactionType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Reaction')
        if self.fromUserMid is not None:
            oprot.writeFieldBegin('fromUserMid', TType.STRING, 1)
            oprot.writeString(self.fromUserMid)
            oprot.writeFieldEnd()
        if self.atMillis is not None:
            oprot.writeFieldBegin('atMillis', TType.I64, 2)
            oprot.writeI64(self.atMillis)
            oprot.writeFieldEnd()
        if self.reactionType is not None:
            oprot.writeFieldBegin('reactionType', TType.STRUCT, 3)
            self.reactionType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.fromUserMid))
        value = (value * 31) ^ hash(make_hashable(self.atMillis))
        value = (value * 31) ^ hash(make_hashable(self.reactionType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReactionType(object):
    """
    Attributes:
     - predefinedReactionType
    """
    def __init__(self, predefinedReactionType=None):
        self.predefinedReactionType = predefinedReactionType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.predefinedReactionType = PredefinedReactionType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReactionType')
        if self.predefinedReactionType is not None:
            oprot.writeFieldBegin('predefinedReactionType', TType.I32, 1)
            oprot.writeI32(self.predefinedReactionType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.predefinedReactionType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Location(object):
    """
    Attributes:
     - title
     - address
     - latitude
     - longitude
     - phone
     - categoryId
     - provider
     - accuracy
     - altitudeMeters
    """
    def __init__(self, title=None, address=None, latitude=None, longitude=None, phone=None, categoryId=None, provider=None, accuracy=None, altitudeMeters=None):
        self.title = title
        self.address = address
        self.latitude = latitude
        self.longitude = longitude
        self.phone = phone
        self.categoryId = categoryId
        self.provider = provider
        self.accuracy = accuracy
        self.altitudeMeters = altitudeMeters

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.address = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.phone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.categoryId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.provider = LocationProvider(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.accuracy = GeolocationAccuracy()
                    self.accuracy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.altitudeMeters = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Location')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 2)
            oprot.writeString(self.address)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 4)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 5)
            oprot.writeString(self.phone)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.STRING, 6)
            oprot.writeString(self.categoryId)
            oprot.writeFieldEnd()
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.I32, 7)
            oprot.writeI32(self.provider)
            oprot.writeFieldEnd()
        if self.accuracy is not None:
            oprot.writeFieldBegin('accuracy', TType.STRUCT, 8)
            self.accuracy.write(oprot)
            oprot.writeFieldEnd()
        if self.altitudeMeters is not None:
            oprot.writeFieldBegin('altitudeMeters', TType.DOUBLE, 9)
            oprot.writeDouble(self.altitudeMeters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.address))
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        value = (value * 31) ^ hash(make_hashable(self.phone))
        value = (value * 31) ^ hash(make_hashable(self.categoryId))
        value = (value * 31) ^ hash(make_hashable(self.provider))
        value = (value * 31) ^ hash(make_hashable(self.accuracy))
        value = (value * 31) ^ hash(make_hashable(self.altitudeMeters))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GeolocationAccuracy(object):
    """
    Attributes:
     - radiusMeters
     - radiusConfidence
     - altitudeAccuracy
     - velocityAccuracy
     - bearingAccuracy
     - accuracyMode
    """
    def __init__(self, radiusMeters=None, radiusConfidence=None, altitudeAccuracy=None, velocityAccuracy=None, bearingAccuracy=None, accuracyMode=None):
        self.radiusMeters = radiusMeters
        self.radiusConfidence = radiusConfidence
        self.altitudeAccuracy = altitudeAccuracy
        self.velocityAccuracy = velocityAccuracy
        self.bearingAccuracy = bearingAccuracy
        self.accuracyMode = accuracyMode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.radiusMeters = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.radiusConfidence = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.altitudeAccuracy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.velocityAccuracy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.bearingAccuracy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.accuracyMode = AccuracyMode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GeolocationAccuracy')
        if self.radiusMeters is not None:
            oprot.writeFieldBegin('radiusMeters', TType.DOUBLE, 1)
            oprot.writeDouble(self.radiusMeters)
            oprot.writeFieldEnd()
        if self.radiusConfidence is not None:
            oprot.writeFieldBegin('radiusConfidence', TType.DOUBLE, 2)
            oprot.writeDouble(self.radiusConfidence)
            oprot.writeFieldEnd()
        if self.altitudeAccuracy is not None:
            oprot.writeFieldBegin('altitudeAccuracy', TType.DOUBLE, 3)
            oprot.writeDouble(self.altitudeAccuracy)
            oprot.writeFieldEnd()
        if self.velocityAccuracy is not None:
            oprot.writeFieldBegin('velocityAccuracy', TType.DOUBLE, 4)
            oprot.writeDouble(self.velocityAccuracy)
            oprot.writeFieldEnd()
        if self.bearingAccuracy is not None:
            oprot.writeFieldBegin('bearingAccuracy', TType.DOUBLE, 5)
            oprot.writeDouble(self.bearingAccuracy)
            oprot.writeFieldEnd()
        if self.accuracyMode is not None:
            oprot.writeFieldBegin('accuracyMode', TType.I32, 6)
            oprot.writeI32(self.accuracyMode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.radiusMeters))
        value = (value * 31) ^ hash(make_hashable(self.radiusConfidence))
        value = (value * 31) ^ hash(make_hashable(self.altitudeAccuracy))
        value = (value * 31) ^ hash(make_hashable(self.velocityAccuracy))
        value = (value * 31) ^ hash(make_hashable(self.bearingAccuracy))
        value = (value * 31) ^ hash(make_hashable(self.accuracyMode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Geolocation(object):
    """
    Attributes:
     - longitude
     - latitude
     - accuracy
     - altitudeMeters
     - velocityMetersPerSecond
     - bearingDegrees
     - beaconData
    """
    def __init__(self, longitude=None, latitude=None, accuracy=None, altitudeMeters=None, velocityMetersPerSecond=None, bearingDegrees=None, beaconData=None):
        self.longitude = longitude
        self.latitude = latitude
        self.accuracy = accuracy
        self.altitudeMeters = altitudeMeters
        self.velocityMetersPerSecond = velocityMetersPerSecond
        self.bearingDegrees = bearingDegrees
        self.beaconData = beaconData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.accuracy = GeolocationAccuracy()
                    self.accuracy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.altitudeMeters = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.velocityMetersPerSecond = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.bearingDegrees = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.beaconData = []
                    (_, elem11) = iprot.readListBegin()
                    for _ in range(elem11):
                        elem12 = BeaconData()
                        elem12.read(iprot)
                        self.beaconData.append(elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Geolocation')
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.accuracy is not None:
            oprot.writeFieldBegin('accuracy', TType.STRUCT, 3)
            self.accuracy.write(oprot)
            oprot.writeFieldEnd()
        if self.altitudeMeters is not None:
            oprot.writeFieldBegin('altitudeMeters', TType.DOUBLE, 4)
            oprot.writeDouble(self.altitudeMeters)
            oprot.writeFieldEnd()
        if self.velocityMetersPerSecond is not None:
            oprot.writeFieldBegin('velocityMetersPerSecond', TType.DOUBLE, 5)
            oprot.writeDouble(self.velocityMetersPerSecond)
            oprot.writeFieldEnd()
        if self.bearingDegrees is not None:
            oprot.writeFieldBegin('bearingDegrees', TType.DOUBLE, 6)
            oprot.writeDouble(self.bearingDegrees)
            oprot.writeFieldEnd()
        if self.beaconData is not None:
            oprot.writeFieldBegin('beaconData', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.beaconData))
            for elem13 in self.beaconData:
                elem13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        value = (value * 31) ^ hash(make_hashable(self.accuracy))
        value = (value * 31) ^ hash(make_hashable(self.altitudeMeters))
        value = (value * 31) ^ hash(make_hashable(self.velocityMetersPerSecond))
        value = (value * 31) ^ hash(make_hashable(self.bearingDegrees))
        value = (value * 31) ^ hash(make_hashable(self.beaconData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BeaconData(object):
    """
    Attributes:
     - hwid
     - rssi
     - txPower
     - scannedTimestampMs
    """
    def __init__(self, hwid=None, rssi=None, txPower=None, scannedTimestampMs=None):
        self.hwid = hwid
        self.rssi = rssi
        self.txPower = txPower
        self.scannedTimestampMs = scannedTimestampMs

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hwid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rssi = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.txPower = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.scannedTimestampMs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BeaconData')
        if self.hwid is not None:
            oprot.writeFieldBegin('hwid', TType.STRING, 1)
            oprot.writeString(self.hwid)
            oprot.writeFieldEnd()
        if self.rssi is not None:
            oprot.writeFieldBegin('rssi', TType.I32, 2)
            oprot.writeI32(self.rssi)
            oprot.writeFieldEnd()
        if self.txPower is not None:
            oprot.writeFieldBegin('txPower', TType.I32, 3)
            oprot.writeI32(self.txPower)
            oprot.writeFieldEnd()
        if self.scannedTimestampMs is not None:
            oprot.writeFieldBegin('scannedTimestampMs', TType.I64, 4)
            oprot.writeI64(self.scannedTimestampMs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.hwid))
        value = (value * 31) ^ hash(make_hashable(self.rssi))
        value = (value * 31) ^ hash(make_hashable(self.txPower))
        value = (value * 31) ^ hash(make_hashable(self.scannedTimestampMs))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Chat(object):
    """
    Attributes:
     - type
     - chatMid
     - createdTime
     - notificationDisabled
     - favoriteTimestamp
     - chatName
     - picturePath
     - extra
    """
    def __init__(self, type=None, chatMid=None, createdTime=None, notificationDisabled=None, favoriteTimestamp=None, chatName=None, picturePath=None, extra=None):
        self.type = type
        self.chatMid = chatMid
        self.createdTime = createdTime
        self.notificationDisabled = notificationDisabled
        self.favoriteTimestamp = favoriteTimestamp
        self.chatName = chatName
        self.picturePath = picturePath
        self.extra = extra

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = ChatType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.notificationDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.favoriteTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.chatName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.extra = Extra()
                    self.extra.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Chat')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 3)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.notificationDisabled is not None:
            oprot.writeFieldBegin('notificationDisabled', TType.BOOL, 4)
            oprot.writeBool(self.notificationDisabled)
            oprot.writeFieldEnd()
        if self.favoriteTimestamp is not None:
            oprot.writeFieldBegin('favoriteTimestamp', TType.I64, 5)
            oprot.writeI64(self.favoriteTimestamp)
            oprot.writeFieldEnd()
        if self.chatName is not None:
            oprot.writeFieldBegin('chatName', TType.STRING, 6)
            oprot.writeString(self.chatName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 7)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.STRUCT, 8)
            self.extra.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.notificationDisabled))
        value = (value * 31) ^ hash(make_hashable(self.favoriteTimestamp))
        value = (value * 31) ^ hash(make_hashable(self.chatName))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.extra))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Extra(object):
    """
    Attributes:
     - groupExtra
     - peerExtra
    """
    def __init__(self, groupExtra=None, peerExtra=None):
        self.groupExtra = groupExtra
        self.peerExtra = peerExtra

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.groupExtra = GroupExtra()
                    self.groupExtra.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.peerExtra = PeerExtra()
                    self.peerExtra.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Extra')
        if self.groupExtra is not None:
            oprot.writeFieldBegin('groupExtra', TType.STRUCT, 1)
            self.groupExtra.write(oprot)
            oprot.writeFieldEnd()
        if self.peerExtra is not None:
            oprot.writeFieldBegin('peerExtra', TType.STRUCT, 2)
            self.peerExtra.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.groupExtra))
        value = (value * 31) ^ hash(make_hashable(self.peerExtra))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupExtra(object):
    """
    Attributes:
     - creator
     - preventedJoinByTicket
     - invitationTicket
     - memberMids
     - inviteeMids
     - addFriendDisabled
     - ticketDisabled
    """
    def __init__(self, creator=None, preventedJoinByTicket=None, invitationTicket=None, memberMids=None, inviteeMids=None, addFriendDisabled=None, ticketDisabled=None):
        self.creator = creator
        self.preventedJoinByTicket = preventedJoinByTicket
        self.invitationTicket = invitationTicket
        self.memberMids = memberMids
        self.inviteeMids = inviteeMids
        self.addFriendDisabled = addFriendDisabled
        self.ticketDisabled = ticketDisabled

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.creator = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.preventedJoinByTicket = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.invitationTicket = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.memberMids = {}
                    (_, _, elem14) = iprot.readMapBegin()
                    for _ in range(elem14):
                        elem16 = iprot.readString()
                        elem15 = iprot.readI64()
                        self.memberMids[elem16] = elem15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.inviteeMids = {}
                    (_, _, elem17) = iprot.readMapBegin()
                    for _ in range(elem17):
                        elem19 = iprot.readString()
                        elem18 = iprot.readI64()
                        self.inviteeMids[elem19] = elem18
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.addFriendDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.ticketDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupExtra')
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRING, 1)
            oprot.writeString(self.creator)
            oprot.writeFieldEnd()
        if self.preventedJoinByTicket is not None:
            oprot.writeFieldBegin('preventedJoinByTicket', TType.BOOL, 2)
            oprot.writeBool(self.preventedJoinByTicket)
            oprot.writeFieldEnd()
        if self.invitationTicket is not None:
            oprot.writeFieldBegin('invitationTicket', TType.STRING, 3)
            oprot.writeString(self.invitationTicket)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.memberMids))
            for elem21, elem20 in self.memberMids.items():
                oprot.writeString(elem21)
                oprot.writeI64(elem20)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.inviteeMids is not None:
            oprot.writeFieldBegin('inviteeMids', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.inviteeMids))
            for elem23, elem22 in self.inviteeMids.items():
                oprot.writeString(elem23)
                oprot.writeI64(elem22)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.addFriendDisabled is not None:
            oprot.writeFieldBegin('addFriendDisabled', TType.BOOL, 6)
            oprot.writeBool(self.addFriendDisabled)
            oprot.writeFieldEnd()
        if self.ticketDisabled is not None:
            oprot.writeFieldBegin('ticketDisabled', TType.BOOL, 7)
            oprot.writeBool(self.ticketDisabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.creator))
        value = (value * 31) ^ hash(make_hashable(self.preventedJoinByTicket))
        value = (value * 31) ^ hash(make_hashable(self.invitationTicket))
        value = (value * 31) ^ hash(make_hashable(self.memberMids))
        value = (value * 31) ^ hash(make_hashable(self.inviteeMids))
        value = (value * 31) ^ hash(make_hashable(self.addFriendDisabled))
        value = (value * 31) ^ hash(make_hashable(self.ticketDisabled))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PeerExtra(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PeerExtra')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Ringtone(object):
    """
    Attributes:
     - title
     - artist
     - oid
     - channelId
    """
    def __init__(self, title=None, artist=None, oid=None, channelId=None):
        self.title = title
        self.artist = artist
        self.oid = oid
        self.channelId = channelId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.artist = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.oid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Ringtone')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.artist is not None:
            oprot.writeFieldBegin('artist', TType.STRING, 2)
            oprot.writeString(self.artist)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.STRING, 3)
            oprot.writeString(self.oid)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 4)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.artist))
        value = (value * 31) ^ hash(make_hashable(self.oid))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RingbackTone(object):
    """
    Attributes:
     - uuid
     - trackId
     - title
     - oid
     - tids
     - sid
     - artist
     - channelId
    """
    def __init__(self, uuid=None, trackId=None, title=None, oid=None, tids=None, sid=None, artist=None, channelId=None):
        self.uuid = uuid
        self.trackId = trackId
        self.title = title
        self.oid = oid
        self.tids = tids
        self.sid = sid
        self.artist = artist
        self.channelId = channelId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.trackId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.oid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.tids = {}
                    (_, _, elem24) = iprot.readMapBegin()
                    for _ in range(elem24):
                        elem26 = iprot.readString()
                        elem25 = iprot.readString()
                        self.tids[elem26] = elem25
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.artist = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RingbackTone')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid)
            oprot.writeFieldEnd()
        if self.trackId is not None:
            oprot.writeFieldBegin('trackId', TType.STRING, 2)
            oprot.writeString(self.trackId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.STRING, 4)
            oprot.writeString(self.oid)
            oprot.writeFieldEnd()
        if self.tids is not None:
            oprot.writeFieldBegin('tids', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.tids))
            for elem28, elem27 in self.tids.items():
                oprot.writeString(elem28)
                oprot.writeString(elem27)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 6)
            oprot.writeString(self.sid)
            oprot.writeFieldEnd()
        if self.artist is not None:
            oprot.writeFieldBegin('artist', TType.STRING, 7)
            oprot.writeString(self.artist)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 8)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.uuid))
        value = (value * 31) ^ hash(make_hashable(self.trackId))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.oid))
        value = (value * 31) ^ hash(make_hashable(self.tids))
        value = (value * 31) ^ hash(make_hashable(self.sid))
        value = (value * 31) ^ hash(make_hashable(self.artist))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Profile(object):
    """
    Attributes:
     - mid
     - userid
     - phone
     - email
     - regionCode
     - displayName
     - phoneticName
     - pictureStatus
     - thumbnailUrl
     - statusMessage
     - allowSearchByUserid
     - allowSearchByEmail
     - picturePath
     - musicProfile
     - videoProfile
     - statusMessageContentMetadata
     - avatarProfile
    """
    def __init__(self, mid=None, userid=None, phone=None, email=None, regionCode=None, displayName=None, phoneticName=None, pictureStatus=None, thumbnailUrl=None, statusMessage=None, allowSearchByUserid=None, allowSearchByEmail=None, picturePath=None, musicProfile=None, videoProfile=None, statusMessageContentMetadata=None, avatarProfile=None):
        self.mid = mid
        self.userid = userid
        self.phone = phone
        self.email = email
        self.regionCode = regionCode
        self.displayName = displayName
        self.phoneticName = phoneticName
        self.pictureStatus = pictureStatus
        self.thumbnailUrl = thumbnailUrl
        self.statusMessage = statusMessage
        self.allowSearchByUserid = allowSearchByUserid
        self.allowSearchByEmail = allowSearchByEmail
        self.picturePath = picturePath
        self.musicProfile = musicProfile
        self.videoProfile = videoProfile
        self.statusMessageContentMetadata = statusMessageContentMetadata
        self.avatarProfile = avatarProfile

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.phone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.email = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.regionCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.allowSearchByUserid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.allowSearchByEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.musicProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.videoProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.MAP:
                    self.statusMessageContentMetadata = {}
                    (_, _, elem29) = iprot.readMapBegin()
                    for _ in range(elem29):
                        elem31 = iprot.readString()
                        elem30 = iprot.readString()
                        self.statusMessageContentMetadata[elem31] = elem30
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRUCT:
                    self.avatarProfile = AvatarProfile()
                    self.avatarProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Profile')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 3)
            oprot.writeString(self.userid)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 10)
            oprot.writeString(self.phone)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 11)
            oprot.writeString(self.email)
            oprot.writeFieldEnd()
        if self.regionCode is not None:
            oprot.writeFieldBegin('regionCode', TType.STRING, 12)
            oprot.writeString(self.regionCode)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 20)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 21)
            oprot.writeString(self.phoneticName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 22)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 23)
            oprot.writeString(self.thumbnailUrl)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 24)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.allowSearchByUserid is not None:
            oprot.writeFieldBegin('allowSearchByUserid', TType.BOOL, 31)
            oprot.writeBool(self.allowSearchByUserid)
            oprot.writeFieldEnd()
        if self.allowSearchByEmail is not None:
            oprot.writeFieldBegin('allowSearchByEmail', TType.BOOL, 32)
            oprot.writeBool(self.allowSearchByEmail)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 33)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.musicProfile is not None:
            oprot.writeFieldBegin('musicProfile', TType.STRING, 34)
            oprot.writeString(self.musicProfile)
            oprot.writeFieldEnd()
        if self.videoProfile is not None:
            oprot.writeFieldBegin('videoProfile', TType.STRING, 35)
            oprot.writeString(self.videoProfile)
            oprot.writeFieldEnd()
        if self.statusMessageContentMetadata is not None:
            oprot.writeFieldBegin('statusMessageContentMetadata', TType.MAP, 36)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.statusMessageContentMetadata))
            for elem33, elem32 in self.statusMessageContentMetadata.items():
                oprot.writeString(elem33)
                oprot.writeString(elem32)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.avatarProfile is not None:
            oprot.writeFieldBegin('avatarProfile', TType.STRUCT, 37)
            self.avatarProfile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.userid))
        value = (value * 31) ^ hash(make_hashable(self.phone))
        value = (value * 31) ^ hash(make_hashable(self.email))
        value = (value * 31) ^ hash(make_hashable(self.regionCode))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.phoneticName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.thumbnailUrl))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.allowSearchByUserid))
        value = (value * 31) ^ hash(make_hashable(self.allowSearchByEmail))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.musicProfile))
        value = (value * 31) ^ hash(make_hashable(self.videoProfile))
        value = (value * 31) ^ hash(make_hashable(self.statusMessageContentMetadata))
        value = (value * 31) ^ hash(make_hashable(self.avatarProfile))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AvatarProfile(object):
    """
    Attributes:
     - version
     - updatedMillis
     - thumbnail
     - usablePublicly
    """
    def __init__(self, version=None, updatedMillis=None, thumbnail=None, usablePublicly=None):
        self.version = version
        self.updatedMillis = updatedMillis
        self.thumbnail = thumbnail
        self.usablePublicly = usablePublicly

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.version = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updatedMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.thumbnail = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.usablePublicly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AvatarProfile')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 1)
            oprot.writeString(self.version)
            oprot.writeFieldEnd()
        if self.updatedMillis is not None:
            oprot.writeFieldBegin('updatedMillis', TType.I64, 2)
            oprot.writeI64(self.updatedMillis)
            oprot.writeFieldEnd()
        if self.thumbnail is not None:
            oprot.writeFieldBegin('thumbnail', TType.STRING, 3)
            oprot.writeString(self.thumbnail)
            oprot.writeFieldEnd()
        if self.usablePublicly is not None:
            oprot.writeFieldBegin('usablePublicly', TType.BOOL, 4)
            oprot.writeBool(self.usablePublicly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.version))
        value = (value * 31) ^ hash(make_hashable(self.updatedMillis))
        value = (value * 31) ^ hash(make_hashable(self.thumbnail))
        value = (value * 31) ^ hash(make_hashable(self.usablePublicly))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Contact(object):
    """
    Attributes:
     - mid
     - createdTime
     - type
     - status
     - relation
     - displayName
     - phoneticName
     - pictureStatus
     - thumbnailUrl
     - statusMessage
     - displayNameOverridden
     - favoriteTime
     - capableVoiceCall
     - capableVideoCall
     - capableMyhome
     - capableBuddy
     - attributes
     - settings
     - picturePath
     - recommendParams
     - friendRequestStatus
     - musicProfile
     - videoProfile
     - statusMessageContentMetadata
     - avatarProfile
     - friendRingtone
     - friendRingbackTone
    """
    def __init__(self, mid=None, createdTime=None, type=None, status=None, relation=None, displayName=None, phoneticName=None, pictureStatus=None, thumbnailUrl=None, statusMessage=None, displayNameOverridden=None, favoriteTime=None, capableVoiceCall=None, capableVideoCall=None, capableMyhome=None, capableBuddy=None, attributes=None, settings=None, picturePath=None, recommendParams=None, friendRequestStatus=None, musicProfile=None, videoProfile=None, statusMessageContentMetadata=None, avatarProfile=None, friendRingtone=None, friendRingbackTone=None):
        self.mid = mid
        self.createdTime = createdTime
        self.type = type
        self.status = status
        self.relation = relation
        self.displayName = displayName
        self.phoneticName = phoneticName
        self.pictureStatus = pictureStatus
        self.thumbnailUrl = thumbnailUrl
        self.statusMessage = statusMessage
        self.displayNameOverridden = displayNameOverridden
        self.favoriteTime = favoriteTime
        self.capableVoiceCall = capableVoiceCall
        self.capableVideoCall = capableVideoCall
        self.capableMyhome = capableMyhome
        self.capableBuddy = capableBuddy
        self.attributes = attributes
        self.settings = settings
        self.picturePath = picturePath
        self.recommendParams = recommendParams
        self.friendRequestStatus = friendRequestStatus
        self.musicProfile = musicProfile
        self.videoProfile = videoProfile
        self.statusMessageContentMetadata = statusMessageContentMetadata
        self.avatarProfile = avatarProfile
        self.friendRingtone = friendRingtone
        self.friendRingbackTone = friendRingbackTone

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.type = ContactType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.status = ContactStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.relation = ContactRelation(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.displayNameOverridden = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I64:
                    self.favoriteTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.capableVoiceCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.capableVideoCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.BOOL:
                    self.capableMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.capableBuddy = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.I32:
                    self.attributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.I64:
                    self.settings = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.recommendParams = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I32:
                    self.friendRequestStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.musicProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRING:
                    self.videoProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.MAP:
                    self.statusMessageContentMetadata = {}
                    (_, _, elem34) = iprot.readMapBegin()
                    for _ in range(elem34):
                        elem36 = iprot.readString()
                        elem35 = iprot.readString()
                        self.statusMessageContentMetadata[elem36] = elem35
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.STRUCT:
                    self.avatarProfile = AvatarProfile()
                    self.avatarProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.STRING:
                    self.friendRingtone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.STRING:
                    self.friendRingbackTone = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Contact')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 10)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 11)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.relation is not None:
            oprot.writeFieldBegin('relation', TType.I32, 21)
            oprot.writeI32(self.relation)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 22)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 23)
            oprot.writeString(self.phoneticName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 24)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 25)
            oprot.writeString(self.thumbnailUrl)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 26)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.displayNameOverridden is not None:
            oprot.writeFieldBegin('displayNameOverridden', TType.STRING, 27)
            oprot.writeString(self.displayNameOverridden)
            oprot.writeFieldEnd()
        if self.favoriteTime is not None:
            oprot.writeFieldBegin('favoriteTime', TType.I64, 28)
            oprot.writeI64(self.favoriteTime)
            oprot.writeFieldEnd()
        if self.capableVoiceCall is not None:
            oprot.writeFieldBegin('capableVoiceCall', TType.BOOL, 31)
            oprot.writeBool(self.capableVoiceCall)
            oprot.writeFieldEnd()
        if self.capableVideoCall is not None:
            oprot.writeFieldBegin('capableVideoCall', TType.BOOL, 32)
            oprot.writeBool(self.capableVideoCall)
            oprot.writeFieldEnd()
        if self.capableMyhome is not None:
            oprot.writeFieldBegin('capableMyhome', TType.BOOL, 33)
            oprot.writeBool(self.capableMyhome)
            oprot.writeFieldEnd()
        if self.capableBuddy is not None:
            oprot.writeFieldBegin('capableBuddy', TType.BOOL, 34)
            oprot.writeBool(self.capableBuddy)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.I32, 35)
            oprot.writeI32(self.attributes)
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.I64, 36)
            oprot.writeI64(self.settings)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 37)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.recommendParams is not None:
            oprot.writeFieldBegin('recommendParams', TType.STRING, 38)
            oprot.writeString(self.recommendParams)
            oprot.writeFieldEnd()
        if self.friendRequestStatus is not None:
            oprot.writeFieldBegin('friendRequestStatus', TType.I32, 39)
            oprot.writeI32(self.friendRequestStatus)
            oprot.writeFieldEnd()
        if self.musicProfile is not None:
            oprot.writeFieldBegin('musicProfile', TType.STRING, 40)
            oprot.writeString(self.musicProfile)
            oprot.writeFieldEnd()
        if self.videoProfile is not None:
            oprot.writeFieldBegin('videoProfile', TType.STRING, 42)
            oprot.writeString(self.videoProfile)
            oprot.writeFieldEnd()
        if self.statusMessageContentMetadata is not None:
            oprot.writeFieldBegin('statusMessageContentMetadata', TType.MAP, 43)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.statusMessageContentMetadata))
            for elem38, elem37 in self.statusMessageContentMetadata.items():
                oprot.writeString(elem38)
                oprot.writeString(elem37)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.avatarProfile is not None:
            oprot.writeFieldBegin('avatarProfile', TType.STRUCT, 44)
            self.avatarProfile.write(oprot)
            oprot.writeFieldEnd()
        if self.friendRingtone is not None:
            oprot.writeFieldBegin('friendRingtone', TType.STRING, 45)
            oprot.writeString(self.friendRingtone)
            oprot.writeFieldEnd()
        if self.friendRingbackTone is not None:
            oprot.writeFieldBegin('friendRingbackTone', TType.STRING, 46)
            oprot.writeString(self.friendRingbackTone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.relation))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.phoneticName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.thumbnailUrl))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.displayNameOverridden))
        value = (value * 31) ^ hash(make_hashable(self.favoriteTime))
        value = (value * 31) ^ hash(make_hashable(self.capableVoiceCall))
        value = (value * 31) ^ hash(make_hashable(self.capableVideoCall))
        value = (value * 31) ^ hash(make_hashable(self.capableMyhome))
        value = (value * 31) ^ hash(make_hashable(self.capableBuddy))
        value = (value * 31) ^ hash(make_hashable(self.attributes))
        value = (value * 31) ^ hash(make_hashable(self.settings))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.recommendParams))
        value = (value * 31) ^ hash(make_hashable(self.friendRequestStatus))
        value = (value * 31) ^ hash(make_hashable(self.musicProfile))
        value = (value * 31) ^ hash(make_hashable(self.videoProfile))
        value = (value * 31) ^ hash(make_hashable(self.statusMessageContentMetadata))
        value = (value * 31) ^ hash(make_hashable(self.avatarProfile))
        value = (value * 31) ^ hash(make_hashable(self.friendRingtone))
        value = (value * 31) ^ hash(make_hashable(self.friendRingbackTone))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactModification(object):
    """
    Attributes:
     - type
     - luid
     - phones
     - emails
     - userids
     - mobileContactName
     - phoneticName
    """
    def __init__(self, type=None, luid=None, phones=None, emails=None, userids=None, mobileContactName=None, phoneticName=None):
        self.type = type
        self.luid = luid
        self.phones = phones
        self.emails = emails
        self.userids = userids
        self.mobileContactName = mobileContactName
        self.phoneticName = phoneticName

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = ContactModificationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.luid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.phones = []
                    (_, elem39) = iprot.readListBegin()
                    for _ in range(elem39):
                        elem40 = iprot.readString()
                        self.phones.append(elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.emails = []
                    (_, elem41) = iprot.readListBegin()
                    for _ in range(elem41):
                        elem42 = iprot.readString()
                        self.emails.append(elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.userids = []
                    (_, elem43) = iprot.readListBegin()
                    for _ in range(elem43):
                        elem44 = iprot.readString()
                        self.userids.append(elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.mobileContactName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactModification')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.luid is not None:
            oprot.writeFieldBegin('luid', TType.STRING, 2)
            oprot.writeString(self.luid)
            oprot.writeFieldEnd()
        if self.phones is not None:
            oprot.writeFieldBegin('phones', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.phones))
            for elem45 in self.phones:
                oprot.writeString(elem45)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.emails is not None:
            oprot.writeFieldBegin('emails', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.emails))
            for elem46 in self.emails:
                oprot.writeString(elem46)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userids is not None:
            oprot.writeFieldBegin('userids', TType.LIST, 13)
            oprot.writeListBegin(TType.STRING, len(self.userids))
            for elem47 in self.userids:
                oprot.writeString(elem47)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mobileContactName is not None:
            oprot.writeFieldBegin('mobileContactName', TType.STRING, 14)
            oprot.writeString(self.mobileContactName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 15)
            oprot.writeString(self.phoneticName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.luid))
        value = (value * 31) ^ hash(make_hashable(self.phones))
        value = (value * 31) ^ hash(make_hashable(self.emails))
        value = (value * 31) ^ hash(make_hashable(self.userids))
        value = (value * 31) ^ hash(make_hashable(self.mobileContactName))
        value = (value * 31) ^ hash(make_hashable(self.phoneticName))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactRegistration(object):
    """
    Attributes:
     - contact
     - luid
     - contactType
     - contactKey
    """
    def __init__(self, contact=None, luid=None, contactType=None, contactKey=None):
        self.contact = contact
        self.luid = luid
        self.contactType = contactType
        self.contactKey = contactKey

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.contact = Contact()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.luid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.contactType = ContactType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.contactKey = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactRegistration')
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 1)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.luid is not None:
            oprot.writeFieldBegin('luid', TType.STRING, 10)
            oprot.writeString(self.luid)
            oprot.writeFieldEnd()
        if self.contactType is not None:
            oprot.writeFieldBegin('contactType', TType.I32, 11)
            oprot.writeI32(self.contactType)
            oprot.writeFieldEnd()
        if self.contactKey is not None:
            oprot.writeFieldBegin('contactKey', TType.STRING, 12)
            oprot.writeString(self.contactKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.contact))
        value = (value * 31) ^ hash(make_hashable(self.luid))
        value = (value * 31) ^ hash(make_hashable(self.contactType))
        value = (value * 31) ^ hash(make_hashable(self.contactKey))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Settings(object):
    """
    Attributes:
     - notificationEnable
     - notificationMuteExpiration
     - notificationNewMessage
     - notificationGroupInvitation
     - notificationShowMessage
     - notificationIncomingCall
     - notificationSoundMessage
     - notificationSoundGroup
     - notificationDisabledWithSub
     - notificationPayment
     - privacySyncContacts
     - privacySearchByPhoneNumber
     - privacySearchByUserid
     - privacySearchByEmail
     - privacyAllowSecondaryDeviceLogin
     - privacyProfileImagePostToMyhome
     - privacyReceiveMessagesFromNotFriend
     - privacyAgreeUseLineCoinToPaidCall
     - privacyAgreeUsePaidCall
     - privacyAllowFriendRequest
     - contactMyTicket
     - identityProvider
     - identityIdentifier
     - snsAccounts
     - phoneRegistration
     - emailConfirmationStatus
     - accountMigrationPincodeType
     - enforcedInputAccountMigrationPincode
     - securityCenterSettingsType
     - allowUnregistrationSecondaryDevice
     - pwlessPrimaryCredentialRegistration
     - preferenceLocale
     - customModes
     - e2eeEnable
     - hitokotoBackupRequested
     - privacyProfileMusicPostToMyhome
     - privacyAllowNearby
     - agreementNearbyTime
     - agreementSquareTime
     - notificationMention
     - botUseAgreementAcceptedAt
     - agreementShakeFunction
     - agreementMobileContactName
     - notificationThumbnail
     - agreementSoundToText
     - privacyPolicyVersion
     - agreementAdByWebAccess
     - agreementPhoneNumberMatching
     - agreementCommunicationInfo
     - privacySharePersonalInfoToFriends
     - agreementThingsWirelessCommunication
     - agreementGdpr
     - privacyStatusMessageHistory
     - agreementProvideLocation
     - agreementBeacon
     - privacyAllowProfileHistory
     - agreementContentsSuggest
     - agreementContentsSuggestDataCollection
     - privacyAgeResult
     - privacyAgeResultReceived
     - agreementOcrImageCollection
     - privacyAllowFollow
     - privacyShowFollowList
     - notificationBadgeTalkOnly
     - agreementIcna
     - notificationReaction
     - agreementMid
     - homeNotificationNewFriend
     - homeNotificationFavoriteFriendUpdate
     - homeNotificationGroupMemberUpdate
     - homeNotificationBirthday
     - eapAllowedToConnect
     - agreementLineOutUse
     - agreementLineOutProvideInfo
     - notificationShowProfileImage
     - agreementPdpa
     - agreementLocationVersion
    """
    def __init__(self, notificationEnable=None, notificationMuteExpiration=None, notificationNewMessage=None, notificationGroupInvitation=None, notificationShowMessage=None, notificationIncomingCall=None, notificationSoundMessage=None, notificationSoundGroup=None, notificationDisabledWithSub=None, notificationPayment=None, privacySyncContacts=None, privacySearchByPhoneNumber=None, privacySearchByUserid=None, privacySearchByEmail=None, privacyAllowSecondaryDeviceLogin=None, privacyProfileImagePostToMyhome=None, privacyReceiveMessagesFromNotFriend=None, privacyAgreeUseLineCoinToPaidCall=None, privacyAgreeUsePaidCall=None, privacyAllowFriendRequest=None, contactMyTicket=None, identityProvider=None, identityIdentifier=None, snsAccounts=None, phoneRegistration=None, emailConfirmationStatus=None, accountMigrationPincodeType=None, enforcedInputAccountMigrationPincode=None, securityCenterSettingsType=None, allowUnregistrationSecondaryDevice=None, pwlessPrimaryCredentialRegistration=None, preferenceLocale=None, customModes=None, e2eeEnable=None, hitokotoBackupRequested=None, privacyProfileMusicPostToMyhome=None, privacyAllowNearby=None, agreementNearbyTime=None, agreementSquareTime=None, notificationMention=None, botUseAgreementAcceptedAt=None, agreementShakeFunction=None, agreementMobileContactName=None, notificationThumbnail=None, agreementSoundToText=None, privacyPolicyVersion=None, agreementAdByWebAccess=None, agreementPhoneNumberMatching=None, agreementCommunicationInfo=None, privacySharePersonalInfoToFriends=None, agreementThingsWirelessCommunication=None, agreementGdpr=None, privacyStatusMessageHistory=None, agreementProvideLocation=None, agreementBeacon=None, privacyAllowProfileHistory=None, agreementContentsSuggest=None, agreementContentsSuggestDataCollection=None, privacyAgeResult=None, privacyAgeResultReceived=None, agreementOcrImageCollection=None, privacyAllowFollow=None, privacyShowFollowList=None, notificationBadgeTalkOnly=None, agreementIcna=None, notificationReaction=None, agreementMid=None, homeNotificationNewFriend=None, homeNotificationFavoriteFriendUpdate=None, homeNotificationGroupMemberUpdate=None, homeNotificationBirthday=None, eapAllowedToConnect=None, agreementLineOutUse=None, agreementLineOutProvideInfo=None, notificationShowProfileImage=None, agreementPdpa=None, agreementLocationVersion=None):
        self.notificationEnable = notificationEnable
        self.notificationMuteExpiration = notificationMuteExpiration
        self.notificationNewMessage = notificationNewMessage
        self.notificationGroupInvitation = notificationGroupInvitation
        self.notificationShowMessage = notificationShowMessage
        self.notificationIncomingCall = notificationIncomingCall
        self.notificationSoundMessage = notificationSoundMessage
        self.notificationSoundGroup = notificationSoundGroup
        self.notificationDisabledWithSub = notificationDisabledWithSub
        self.notificationPayment = notificationPayment
        self.privacySyncContacts = privacySyncContacts
        self.privacySearchByPhoneNumber = privacySearchByPhoneNumber
        self.privacySearchByUserid = privacySearchByUserid
        self.privacySearchByEmail = privacySearchByEmail
        self.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin
        self.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome
        self.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend
        self.privacyAgreeUseLineCoinToPaidCall = privacyAgreeUseLineCoinToPaidCall
        self.privacyAgreeUsePaidCall = privacyAgreeUsePaidCall
        self.privacyAllowFriendRequest = privacyAllowFriendRequest
        self.contactMyTicket = contactMyTicket
        self.identityProvider = identityProvider
        self.identityIdentifier = identityIdentifier
        self.snsAccounts = snsAccounts
        self.phoneRegistration = phoneRegistration
        self.emailConfirmationStatus = emailConfirmationStatus
        self.accountMigrationPincodeType = accountMigrationPincodeType
        self.enforcedInputAccountMigrationPincode = enforcedInputAccountMigrationPincode
        self.securityCenterSettingsType = securityCenterSettingsType
        self.allowUnregistrationSecondaryDevice = allowUnregistrationSecondaryDevice
        self.pwlessPrimaryCredentialRegistration = pwlessPrimaryCredentialRegistration
        self.preferenceLocale = preferenceLocale
        self.customModes = customModes
        self.e2eeEnable = e2eeEnable
        self.hitokotoBackupRequested = hitokotoBackupRequested
        self.privacyProfileMusicPostToMyhome = privacyProfileMusicPostToMyhome
        self.privacyAllowNearby = privacyAllowNearby
        self.agreementNearbyTime = agreementNearbyTime
        self.agreementSquareTime = agreementSquareTime
        self.notificationMention = notificationMention
        self.botUseAgreementAcceptedAt = botUseAgreementAcceptedAt
        self.agreementShakeFunction = agreementShakeFunction
        self.agreementMobileContactName = agreementMobileContactName
        self.notificationThumbnail = notificationThumbnail
        self.agreementSoundToText = agreementSoundToText
        self.privacyPolicyVersion = privacyPolicyVersion
        self.agreementAdByWebAccess = agreementAdByWebAccess
        self.agreementPhoneNumberMatching = agreementPhoneNumberMatching
        self.agreementCommunicationInfo = agreementCommunicationInfo
        self.privacySharePersonalInfoToFriends = privacySharePersonalInfoToFriends
        self.agreementThingsWirelessCommunication = agreementThingsWirelessCommunication
        self.agreementGdpr = agreementGdpr
        self.privacyStatusMessageHistory = privacyStatusMessageHistory
        self.agreementProvideLocation = agreementProvideLocation
        self.agreementBeacon = agreementBeacon
        self.privacyAllowProfileHistory = privacyAllowProfileHistory
        self.agreementContentsSuggest = agreementContentsSuggest
        self.agreementContentsSuggestDataCollection = agreementContentsSuggestDataCollection
        self.privacyAgeResult = privacyAgeResult
        self.privacyAgeResultReceived = privacyAgeResultReceived
        self.agreementOcrImageCollection = agreementOcrImageCollection
        self.privacyAllowFollow = privacyAllowFollow
        self.privacyShowFollowList = privacyShowFollowList
        self.notificationBadgeTalkOnly = notificationBadgeTalkOnly
        self.agreementIcna = agreementIcna
        self.notificationReaction = notificationReaction
        self.agreementMid = agreementMid
        self.homeNotificationNewFriend = homeNotificationNewFriend
        self.homeNotificationFavoriteFriendUpdate = homeNotificationFavoriteFriendUpdate
        self.homeNotificationGroupMemberUpdate = homeNotificationGroupMemberUpdate
        self.homeNotificationBirthday = homeNotificationBirthday
        self.eapAllowedToConnect = eapAllowedToConnect
        self.agreementLineOutUse = agreementLineOutUse
        self.agreementLineOutProvideInfo = agreementLineOutProvideInfo
        self.notificationShowProfileImage = notificationShowProfileImage
        self.agreementPdpa = agreementPdpa
        self.agreementLocationVersion = agreementLocationVersion

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 10:
                if ftype == TType.BOOL:
                    self.notificationEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.notificationMuteExpiration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.notificationNewMessage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.notificationGroupInvitation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.notificationShowMessage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.notificationIncomingCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.notificationSoundMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.notificationSoundGroup = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.notificationDisabledWithSub = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.notificationPayment = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.privacySyncContacts = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.privacySearchByPhoneNumber = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.privacySearchByUserid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.privacySearchByEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.privacyAllowSecondaryDeviceLogin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.privacyProfileImagePostToMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.privacyReceiveMessagesFromNotFriend = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.privacyAgreeUseLineCoinToPaidCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.privacyAgreeUsePaidCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BOOL:
                    self.privacyAllowFriendRequest = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.contactMyTicket = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.I32:
                    self.identityProvider = IdentityProvider(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.identityIdentifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.MAP:
                    self.snsAccounts = {}
                    (_, _, elem48) = iprot.readMapBegin()
                    for _ in range(elem48):
                        elem50 = iprot.readString()
                        elem49 = SNSAccountType(iprot.readI32())
                        self.snsAccounts[elem50] = elem49
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.BOOL:
                    self.phoneRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.emailConfirmationStatus = EmailConfirmationStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.accountMigrationPincodeType = AccountMigrationPincodeType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.BOOL:
                    self.enforcedInputAccountMigrationPincode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.I32:
                    self.securityCenterSettingsType = SecurityCenterSettingsType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.BOOL:
                    self.allowUnregistrationSecondaryDevice = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.BOOL:
                    self.pwlessPrimaryCredentialRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.preferenceLocale = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.MAP:
                    self.customModes = {}
                    (_, _, elem51) = iprot.readMapBegin()
                    for _ in range(elem51):
                        elem53 = CustomModes(iprot.readI32())
                        elem52 = iprot.readString()
                        self.customModes[elem53] = elem52
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.BOOL:
                    self.e2eeEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.BOOL:
                    self.hitokotoBackupRequested = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.BOOL:
                    self.privacyProfileMusicPostToMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.BOOL:
                    self.privacyAllowNearby = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.I64:
                    self.agreementNearbyTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.I64:
                    self.agreementSquareTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.BOOL:
                    self.notificationMention = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.I64:
                    self.botUseAgreementAcceptedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.I64:
                    self.agreementShakeFunction = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.I64:
                    self.agreementMobileContactName = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.BOOL:
                    self.notificationThumbnail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 73:
                if ftype == TType.I64:
                    self.agreementSoundToText = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 74:
                if ftype == TType.STRING:
                    self.privacyPolicyVersion = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 75:
                if ftype == TType.I64:
                    self.agreementAdByWebAccess = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 76:
                if ftype == TType.I64:
                    self.agreementPhoneNumberMatching = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.I64:
                    self.agreementCommunicationInfo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 78:
                if ftype == TType.I32:
                    self.privacySharePersonalInfoToFriends = PrivacySharePersonalInfoToFriends(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 79:
                if ftype == TType.I64:
                    self.agreementThingsWirelessCommunication = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.I64:
                    self.agreementGdpr = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.I32:
                    self.privacyStatusMessageHistory = PrivacyStatusMessageHistory(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.I64:
                    self.agreementProvideLocation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.I64:
                    self.agreementBeacon = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.I32:
                    self.privacyAllowProfileHistory = PrivacyAllowProfileHistory(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.I64:
                    self.agreementContentsSuggest = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.I64:
                    self.agreementContentsSuggestDataCollection = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 88:
                if ftype == TType.I32:
                    self.privacyAgeResult = UserAge(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 89:
                if ftype == TType.BOOL:
                    self.privacyAgeResultReceived = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.I64:
                    self.agreementOcrImageCollection = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.BOOL:
                    self.privacyAllowFollow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.BOOL:
                    self.privacyShowFollowList = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 93:
                if ftype == TType.BOOL:
                    self.notificationBadgeTalkOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 94:
                if ftype == TType.I64:
                    self.agreementIcna = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 95:
                if ftype == TType.BOOL:
                    self.notificationReaction = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 96:
                if ftype == TType.I64:
                    self.agreementMid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 97:
                if ftype == TType.BOOL:
                    self.homeNotificationNewFriend = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 98:
                if ftype == TType.BOOL:
                    self.homeNotificationFavoriteFriendUpdate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 99:
                if ftype == TType.BOOL:
                    self.homeNotificationGroupMemberUpdate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.BOOL:
                    self.homeNotificationBirthday = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.MAP:
                    self.eapAllowedToConnect = {}
                    (_, _, elem54) = iprot.readMapBegin()
                    for _ in range(elem54):
                        elem56 = SNSAccountType(iprot.readI32())
                        elem55 = iprot.readBool()
                        self.eapAllowedToConnect[elem56] = elem55
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 102:
                if ftype == TType.I64:
                    self.agreementLineOutUse = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 103:
                if ftype == TType.I64:
                    self.agreementLineOutProvideInfo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 104:
                if ftype == TType.BOOL:
                    self.notificationShowProfileImage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 105:
                if ftype == TType.I64:
                    self.agreementPdpa = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 106:
                if ftype == TType.STRING:
                    self.agreementLocationVersion = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Settings')
        if self.notificationEnable is not None:
            oprot.writeFieldBegin('notificationEnable', TType.BOOL, 10)
            oprot.writeBool(self.notificationEnable)
            oprot.writeFieldEnd()
        if self.notificationMuteExpiration is not None:
            oprot.writeFieldBegin('notificationMuteExpiration', TType.I64, 11)
            oprot.writeI64(self.notificationMuteExpiration)
            oprot.writeFieldEnd()
        if self.notificationNewMessage is not None:
            oprot.writeFieldBegin('notificationNewMessage', TType.BOOL, 12)
            oprot.writeBool(self.notificationNewMessage)
            oprot.writeFieldEnd()
        if self.notificationGroupInvitation is not None:
            oprot.writeFieldBegin('notificationGroupInvitation', TType.BOOL, 13)
            oprot.writeBool(self.notificationGroupInvitation)
            oprot.writeFieldEnd()
        if self.notificationShowMessage is not None:
            oprot.writeFieldBegin('notificationShowMessage', TType.BOOL, 14)
            oprot.writeBool(self.notificationShowMessage)
            oprot.writeFieldEnd()
        if self.notificationIncomingCall is not None:
            oprot.writeFieldBegin('notificationIncomingCall', TType.BOOL, 15)
            oprot.writeBool(self.notificationIncomingCall)
            oprot.writeFieldEnd()
        if self.notificationSoundMessage is not None:
            oprot.writeFieldBegin('notificationSoundMessage', TType.STRING, 16)
            oprot.writeString(self.notificationSoundMessage)
            oprot.writeFieldEnd()
        if self.notificationSoundGroup is not None:
            oprot.writeFieldBegin('notificationSoundGroup', TType.STRING, 17)
            oprot.writeString(self.notificationSoundGroup)
            oprot.writeFieldEnd()
        if self.notificationDisabledWithSub is not None:
            oprot.writeFieldBegin('notificationDisabledWithSub', TType.BOOL, 18)
            oprot.writeBool(self.notificationDisabledWithSub)
            oprot.writeFieldEnd()
        if self.notificationPayment is not None:
            oprot.writeFieldBegin('notificationPayment', TType.BOOL, 19)
            oprot.writeBool(self.notificationPayment)
            oprot.writeFieldEnd()
        if self.privacySyncContacts is not None:
            oprot.writeFieldBegin('privacySyncContacts', TType.BOOL, 20)
            oprot.writeBool(self.privacySyncContacts)
            oprot.writeFieldEnd()
        if self.privacySearchByPhoneNumber is not None:
            oprot.writeFieldBegin('privacySearchByPhoneNumber', TType.BOOL, 21)
            oprot.writeBool(self.privacySearchByPhoneNumber)
            oprot.writeFieldEnd()
        if self.privacySearchByUserid is not None:
            oprot.writeFieldBegin('privacySearchByUserid', TType.BOOL, 22)
            oprot.writeBool(self.privacySearchByUserid)
            oprot.writeFieldEnd()
        if self.privacySearchByEmail is not None:
            oprot.writeFieldBegin('privacySearchByEmail', TType.BOOL, 23)
            oprot.writeBool(self.privacySearchByEmail)
            oprot.writeFieldEnd()
        if self.privacyAllowSecondaryDeviceLogin is not None:
            oprot.writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType.BOOL, 24)
            oprot.writeBool(self.privacyAllowSecondaryDeviceLogin)
            oprot.writeFieldEnd()
        if self.privacyProfileImagePostToMyhome is not None:
            oprot.writeFieldBegin('privacyProfileImagePostToMyhome', TType.BOOL, 25)
            oprot.writeBool(self.privacyProfileImagePostToMyhome)
            oprot.writeFieldEnd()
        if self.privacyReceiveMessagesFromNotFriend is not None:
            oprot.writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType.BOOL, 26)
            oprot.writeBool(self.privacyReceiveMessagesFromNotFriend)
            oprot.writeFieldEnd()
        if self.privacyAgreeUseLineCoinToPaidCall is not None:
            oprot.writeFieldBegin('privacyAgreeUseLineCoinToPaidCall', TType.BOOL, 27)
            oprot.writeBool(self.privacyAgreeUseLineCoinToPaidCall)
            oprot.writeFieldEnd()
        if self.privacyAgreeUsePaidCall is not None:
            oprot.writeFieldBegin('privacyAgreeUsePaidCall', TType.BOOL, 28)
            oprot.writeBool(self.privacyAgreeUsePaidCall)
            oprot.writeFieldEnd()
        if self.privacyAllowFriendRequest is not None:
            oprot.writeFieldBegin('privacyAllowFriendRequest', TType.BOOL, 29)
            oprot.writeBool(self.privacyAllowFriendRequest)
            oprot.writeFieldEnd()
        if self.contactMyTicket is not None:
            oprot.writeFieldBegin('contactMyTicket', TType.STRING, 30)
            oprot.writeString(self.contactMyTicket)
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 40)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.identityIdentifier is not None:
            oprot.writeFieldBegin('identityIdentifier', TType.STRING, 41)
            oprot.writeString(self.identityIdentifier)
            oprot.writeFieldEnd()
        if self.snsAccounts is not None:
            oprot.writeFieldBegin('snsAccounts', TType.MAP, 42)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.snsAccounts))
            for elem58, elem57 in self.snsAccounts.items():
                oprot.writeString(elem58)
                oprot.writeI32(elem57)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.phoneRegistration is not None:
            oprot.writeFieldBegin('phoneRegistration', TType.BOOL, 43)
            oprot.writeBool(self.phoneRegistration)
            oprot.writeFieldEnd()
        if self.emailConfirmationStatus is not None:
            oprot.writeFieldBegin('emailConfirmationStatus', TType.I32, 44)
            oprot.writeI32(self.emailConfirmationStatus)
            oprot.writeFieldEnd()
        if self.accountMigrationPincodeType is not None:
            oprot.writeFieldBegin('accountMigrationPincodeType', TType.I32, 45)
            oprot.writeI32(self.accountMigrationPincodeType)
            oprot.writeFieldEnd()
        if self.enforcedInputAccountMigrationPincode is not None:
            oprot.writeFieldBegin('enforcedInputAccountMigrationPincode', TType.BOOL, 46)
            oprot.writeBool(self.enforcedInputAccountMigrationPincode)
            oprot.writeFieldEnd()
        if self.securityCenterSettingsType is not None:
            oprot.writeFieldBegin('securityCenterSettingsType', TType.I32, 47)
            oprot.writeI32(self.securityCenterSettingsType)
            oprot.writeFieldEnd()
        if self.allowUnregistrationSecondaryDevice is not None:
            oprot.writeFieldBegin('allowUnregistrationSecondaryDevice', TType.BOOL, 48)
            oprot.writeBool(self.allowUnregistrationSecondaryDevice)
            oprot.writeFieldEnd()
        if self.pwlessPrimaryCredentialRegistration is not None:
            oprot.writeFieldBegin('pwlessPrimaryCredentialRegistration', TType.BOOL, 49)
            oprot.writeBool(self.pwlessPrimaryCredentialRegistration)
            oprot.writeFieldEnd()
        if self.preferenceLocale is not None:
            oprot.writeFieldBegin('preferenceLocale', TType.STRING, 50)
            oprot.writeString(self.preferenceLocale)
            oprot.writeFieldEnd()
        if self.customModes is not None:
            oprot.writeFieldBegin('customModes', TType.MAP, 60)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.customModes))
            for elem60, elem59 in self.customModes.items():
                oprot.writeI32(elem60)
                oprot.writeString(elem59)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e2eeEnable is not None:
            oprot.writeFieldBegin('e2eeEnable', TType.BOOL, 61)
            oprot.writeBool(self.e2eeEnable)
            oprot.writeFieldEnd()
        if self.hitokotoBackupRequested is not None:
            oprot.writeFieldBegin('hitokotoBackupRequested', TType.BOOL, 62)
            oprot.writeBool(self.hitokotoBackupRequested)
            oprot.writeFieldEnd()
        if self.privacyProfileMusicPostToMyhome is not None:
            oprot.writeFieldBegin('privacyProfileMusicPostToMyhome', TType.BOOL, 63)
            oprot.writeBool(self.privacyProfileMusicPostToMyhome)
            oprot.writeFieldEnd()
        if self.privacyAllowNearby is not None:
            oprot.writeFieldBegin('privacyAllowNearby', TType.BOOL, 65)
            oprot.writeBool(self.privacyAllowNearby)
            oprot.writeFieldEnd()
        if self.agreementNearbyTime is not None:
            oprot.writeFieldBegin('agreementNearbyTime', TType.I64, 66)
            oprot.writeI64(self.agreementNearbyTime)
            oprot.writeFieldEnd()
        if self.agreementSquareTime is not None:
            oprot.writeFieldBegin('agreementSquareTime', TType.I64, 67)
            oprot.writeI64(self.agreementSquareTime)
            oprot.writeFieldEnd()
        if self.notificationMention is not None:
            oprot.writeFieldBegin('notificationMention', TType.BOOL, 68)
            oprot.writeBool(self.notificationMention)
            oprot.writeFieldEnd()
        if self.botUseAgreementAcceptedAt is not None:
            oprot.writeFieldBegin('botUseAgreementAcceptedAt', TType.I64, 69)
            oprot.writeI64(self.botUseAgreementAcceptedAt)
            oprot.writeFieldEnd()
        if self.agreementShakeFunction is not None:
            oprot.writeFieldBegin('agreementShakeFunction', TType.I64, 70)
            oprot.writeI64(self.agreementShakeFunction)
            oprot.writeFieldEnd()
        if self.agreementMobileContactName is not None:
            oprot.writeFieldBegin('agreementMobileContactName', TType.I64, 71)
            oprot.writeI64(self.agreementMobileContactName)
            oprot.writeFieldEnd()
        if self.notificationThumbnail is not None:
            oprot.writeFieldBegin('notificationThumbnail', TType.BOOL, 72)
            oprot.writeBool(self.notificationThumbnail)
            oprot.writeFieldEnd()
        if self.agreementSoundToText is not None:
            oprot.writeFieldBegin('agreementSoundToText', TType.I64, 73)
            oprot.writeI64(self.agreementSoundToText)
            oprot.writeFieldEnd()
        if self.privacyPolicyVersion is not None:
            oprot.writeFieldBegin('privacyPolicyVersion', TType.STRING, 74)
            oprot.writeString(self.privacyPolicyVersion)
            oprot.writeFieldEnd()
        if self.agreementAdByWebAccess is not None:
            oprot.writeFieldBegin('agreementAdByWebAccess', TType.I64, 75)
            oprot.writeI64(self.agreementAdByWebAccess)
            oprot.writeFieldEnd()
        if self.agreementPhoneNumberMatching is not None:
            oprot.writeFieldBegin('agreementPhoneNumberMatching', TType.I64, 76)
            oprot.writeI64(self.agreementPhoneNumberMatching)
            oprot.writeFieldEnd()
        if self.agreementCommunicationInfo is not None:
            oprot.writeFieldBegin('agreementCommunicationInfo', TType.I64, 77)
            oprot.writeI64(self.agreementCommunicationInfo)
            oprot.writeFieldEnd()
        if self.privacySharePersonalInfoToFriends is not None:
            oprot.writeFieldBegin('privacySharePersonalInfoToFriends', TType.I32, 78)
            oprot.writeI32(self.privacySharePersonalInfoToFriends)
            oprot.writeFieldEnd()
        if self.agreementThingsWirelessCommunication is not None:
            oprot.writeFieldBegin('agreementThingsWirelessCommunication', TType.I64, 79)
            oprot.writeI64(self.agreementThingsWirelessCommunication)
            oprot.writeFieldEnd()
        if self.agreementGdpr is not None:
            oprot.writeFieldBegin('agreementGdpr', TType.I64, 80)
            oprot.writeI64(self.agreementGdpr)
            oprot.writeFieldEnd()
        if self.privacyStatusMessageHistory is not None:
            oprot.writeFieldBegin('privacyStatusMessageHistory', TType.I32, 81)
            oprot.writeI32(self.privacyStatusMessageHistory)
            oprot.writeFieldEnd()
        if self.agreementProvideLocation is not None:
            oprot.writeFieldBegin('agreementProvideLocation', TType.I64, 82)
            oprot.writeI64(self.agreementProvideLocation)
            oprot.writeFieldEnd()
        if self.agreementBeacon is not None:
            oprot.writeFieldBegin('agreementBeacon', TType.I64, 83)
            oprot.writeI64(self.agreementBeacon)
            oprot.writeFieldEnd()
        if self.privacyAllowProfileHistory is not None:
            oprot.writeFieldBegin('privacyAllowProfileHistory', TType.I32, 85)
            oprot.writeI32(self.privacyAllowProfileHistory)
            oprot.writeFieldEnd()
        if self.agreementContentsSuggest is not None:
            oprot.writeFieldBegin('agreementContentsSuggest', TType.I64, 86)
            oprot.writeI64(self.agreementContentsSuggest)
            oprot.writeFieldEnd()
        if self.agreementContentsSuggestDataCollection is not None:
            oprot.writeFieldBegin('agreementContentsSuggestDataCollection', TType.I64, 87)
            oprot.writeI64(self.agreementContentsSuggestDataCollection)
            oprot.writeFieldEnd()
        if self.privacyAgeResult is not None:
            oprot.writeFieldBegin('privacyAgeResult', TType.I32, 88)
            oprot.writeI32(self.privacyAgeResult)
            oprot.writeFieldEnd()
        if self.privacyAgeResultReceived is not None:
            oprot.writeFieldBegin('privacyAgeResultReceived', TType.BOOL, 89)
            oprot.writeBool(self.privacyAgeResultReceived)
            oprot.writeFieldEnd()
        if self.agreementOcrImageCollection is not None:
            oprot.writeFieldBegin('agreementOcrImageCollection', TType.I64, 90)
            oprot.writeI64(self.agreementOcrImageCollection)
            oprot.writeFieldEnd()
        if self.privacyAllowFollow is not None:
            oprot.writeFieldBegin('privacyAllowFollow', TType.BOOL, 91)
            oprot.writeBool(self.privacyAllowFollow)
            oprot.writeFieldEnd()
        if self.privacyShowFollowList is not None:
            oprot.writeFieldBegin('privacyShowFollowList', TType.BOOL, 92)
            oprot.writeBool(self.privacyShowFollowList)
            oprot.writeFieldEnd()
        if self.notificationBadgeTalkOnly is not None:
            oprot.writeFieldBegin('notificationBadgeTalkOnly', TType.BOOL, 93)
            oprot.writeBool(self.notificationBadgeTalkOnly)
            oprot.writeFieldEnd()
        if self.agreementIcna is not None:
            oprot.writeFieldBegin('agreementIcna', TType.I64, 94)
            oprot.writeI64(self.agreementIcna)
            oprot.writeFieldEnd()
        if self.notificationReaction is not None:
            oprot.writeFieldBegin('notificationReaction', TType.BOOL, 95)
            oprot.writeBool(self.notificationReaction)
            oprot.writeFieldEnd()
        if self.agreementMid is not None:
            oprot.writeFieldBegin('agreementMid', TType.I64, 96)
            oprot.writeI64(self.agreementMid)
            oprot.writeFieldEnd()
        if self.homeNotificationNewFriend is not None:
            oprot.writeFieldBegin('homeNotificationNewFriend', TType.BOOL, 97)
            oprot.writeBool(self.homeNotificationNewFriend)
            oprot.writeFieldEnd()
        if self.homeNotificationFavoriteFriendUpdate is not None:
            oprot.writeFieldBegin('homeNotificationFavoriteFriendUpdate', TType.BOOL, 98)
            oprot.writeBool(self.homeNotificationFavoriteFriendUpdate)
            oprot.writeFieldEnd()
        if self.homeNotificationGroupMemberUpdate is not None:
            oprot.writeFieldBegin('homeNotificationGroupMemberUpdate', TType.BOOL, 99)
            oprot.writeBool(self.homeNotificationGroupMemberUpdate)
            oprot.writeFieldEnd()
        if self.homeNotificationBirthday is not None:
            oprot.writeFieldBegin('homeNotificationBirthday', TType.BOOL, 100)
            oprot.writeBool(self.homeNotificationBirthday)
            oprot.writeFieldEnd()
        if self.eapAllowedToConnect is not None:
            oprot.writeFieldBegin('eapAllowedToConnect', TType.MAP, 101)
            oprot.writeMapBegin(TType.I32, TType.BOOL, len(self.eapAllowedToConnect))
            for elem62, elem61 in self.eapAllowedToConnect.items():
                oprot.writeI32(elem62)
                oprot.writeBool(elem61)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.agreementLineOutUse is not None:
            oprot.writeFieldBegin('agreementLineOutUse', TType.I64, 102)
            oprot.writeI64(self.agreementLineOutUse)
            oprot.writeFieldEnd()
        if self.agreementLineOutProvideInfo is not None:
            oprot.writeFieldBegin('agreementLineOutProvideInfo', TType.I64, 103)
            oprot.writeI64(self.agreementLineOutProvideInfo)
            oprot.writeFieldEnd()
        if self.notificationShowProfileImage is not None:
            oprot.writeFieldBegin('notificationShowProfileImage', TType.BOOL, 104)
            oprot.writeBool(self.notificationShowProfileImage)
            oprot.writeFieldEnd()
        if self.agreementPdpa is not None:
            oprot.writeFieldBegin('agreementPdpa', TType.I64, 105)
            oprot.writeI64(self.agreementPdpa)
            oprot.writeFieldEnd()
        if self.agreementLocationVersion is not None:
            oprot.writeFieldBegin('agreementLocationVersion', TType.STRING, 106)
            oprot.writeString(self.agreementLocationVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.notificationEnable))
        value = (value * 31) ^ hash(make_hashable(self.notificationMuteExpiration))
        value = (value * 31) ^ hash(make_hashable(self.notificationNewMessage))
        value = (value * 31) ^ hash(make_hashable(self.notificationGroupInvitation))
        value = (value * 31) ^ hash(make_hashable(self.notificationShowMessage))
        value = (value * 31) ^ hash(make_hashable(self.notificationIncomingCall))
        value = (value * 31) ^ hash(make_hashable(self.notificationSoundMessage))
        value = (value * 31) ^ hash(make_hashable(self.notificationSoundGroup))
        value = (value * 31) ^ hash(make_hashable(self.notificationDisabledWithSub))
        value = (value * 31) ^ hash(make_hashable(self.notificationPayment))
        value = (value * 31) ^ hash(make_hashable(self.privacySyncContacts))
        value = (value * 31) ^ hash(make_hashable(self.privacySearchByPhoneNumber))
        value = (value * 31) ^ hash(make_hashable(self.privacySearchByUserid))
        value = (value * 31) ^ hash(make_hashable(self.privacySearchByEmail))
        value = (value * 31) ^ hash(make_hashable(self.privacyAllowSecondaryDeviceLogin))
        value = (value * 31) ^ hash(make_hashable(self.privacyProfileImagePostToMyhome))
        value = (value * 31) ^ hash(make_hashable(self.privacyReceiveMessagesFromNotFriend))
        value = (value * 31) ^ hash(make_hashable(self.privacyAgreeUseLineCoinToPaidCall))
        value = (value * 31) ^ hash(make_hashable(self.privacyAgreeUsePaidCall))
        value = (value * 31) ^ hash(make_hashable(self.privacyAllowFriendRequest))
        value = (value * 31) ^ hash(make_hashable(self.contactMyTicket))
        value = (value * 31) ^ hash(make_hashable(self.identityProvider))
        value = (value * 31) ^ hash(make_hashable(self.identityIdentifier))
        value = (value * 31) ^ hash(make_hashable(self.snsAccounts))
        value = (value * 31) ^ hash(make_hashable(self.phoneRegistration))
        value = (value * 31) ^ hash(make_hashable(self.emailConfirmationStatus))
        value = (value * 31) ^ hash(make_hashable(self.accountMigrationPincodeType))
        value = (value * 31) ^ hash(make_hashable(self.enforcedInputAccountMigrationPincode))
        value = (value * 31) ^ hash(make_hashable(self.securityCenterSettingsType))
        value = (value * 31) ^ hash(make_hashable(self.allowUnregistrationSecondaryDevice))
        value = (value * 31) ^ hash(make_hashable(self.pwlessPrimaryCredentialRegistration))
        value = (value * 31) ^ hash(make_hashable(self.preferenceLocale))
        value = (value * 31) ^ hash(make_hashable(self.customModes))
        value = (value * 31) ^ hash(make_hashable(self.e2eeEnable))
        value = (value * 31) ^ hash(make_hashable(self.hitokotoBackupRequested))
        value = (value * 31) ^ hash(make_hashable(self.privacyProfileMusicPostToMyhome))
        value = (value * 31) ^ hash(make_hashable(self.privacyAllowNearby))
        value = (value * 31) ^ hash(make_hashable(self.agreementNearbyTime))
        value = (value * 31) ^ hash(make_hashable(self.agreementSquareTime))
        value = (value * 31) ^ hash(make_hashable(self.notificationMention))
        value = (value * 31) ^ hash(make_hashable(self.botUseAgreementAcceptedAt))
        value = (value * 31) ^ hash(make_hashable(self.agreementShakeFunction))
        value = (value * 31) ^ hash(make_hashable(self.agreementMobileContactName))
        value = (value * 31) ^ hash(make_hashable(self.notificationThumbnail))
        value = (value * 31) ^ hash(make_hashable(self.agreementSoundToText))
        value = (value * 31) ^ hash(make_hashable(self.privacyPolicyVersion))
        value = (value * 31) ^ hash(make_hashable(self.agreementAdByWebAccess))
        value = (value * 31) ^ hash(make_hashable(self.agreementPhoneNumberMatching))
        value = (value * 31) ^ hash(make_hashable(self.agreementCommunicationInfo))
        value = (value * 31) ^ hash(make_hashable(self.privacySharePersonalInfoToFriends))
        value = (value * 31) ^ hash(make_hashable(self.agreementThingsWirelessCommunication))
        value = (value * 31) ^ hash(make_hashable(self.agreementGdpr))
        value = (value * 31) ^ hash(make_hashable(self.privacyStatusMessageHistory))
        value = (value * 31) ^ hash(make_hashable(self.agreementProvideLocation))
        value = (value * 31) ^ hash(make_hashable(self.agreementBeacon))
        value = (value * 31) ^ hash(make_hashable(self.privacyAllowProfileHistory))
        value = (value * 31) ^ hash(make_hashable(self.agreementContentsSuggest))
        value = (value * 31) ^ hash(make_hashable(self.agreementContentsSuggestDataCollection))
        value = (value * 31) ^ hash(make_hashable(self.privacyAgeResult))
        value = (value * 31) ^ hash(make_hashable(self.privacyAgeResultReceived))
        value = (value * 31) ^ hash(make_hashable(self.agreementOcrImageCollection))
        value = (value * 31) ^ hash(make_hashable(self.privacyAllowFollow))
        value = (value * 31) ^ hash(make_hashable(self.privacyShowFollowList))
        value = (value * 31) ^ hash(make_hashable(self.notificationBadgeTalkOnly))
        value = (value * 31) ^ hash(make_hashable(self.agreementIcna))
        value = (value * 31) ^ hash(make_hashable(self.notificationReaction))
        value = (value * 31) ^ hash(make_hashable(self.agreementMid))
        value = (value * 31) ^ hash(make_hashable(self.homeNotificationNewFriend))
        value = (value * 31) ^ hash(make_hashable(self.homeNotificationFavoriteFriendUpdate))
        value = (value * 31) ^ hash(make_hashable(self.homeNotificationGroupMemberUpdate))
        value = (value * 31) ^ hash(make_hashable(self.homeNotificationBirthday))
        value = (value * 31) ^ hash(make_hashable(self.eapAllowedToConnect))
        value = (value * 31) ^ hash(make_hashable(self.agreementLineOutUse))
        value = (value * 31) ^ hash(make_hashable(self.agreementLineOutProvideInfo))
        value = (value * 31) ^ hash(make_hashable(self.notificationShowProfileImage))
        value = (value * 31) ^ hash(make_hashable(self.agreementPdpa))
        value = (value * 31) ^ hash(make_hashable(self.agreementLocationVersion))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FollowMid(object):
    """
    Attributes:
     - mid
     - eMid
    """
    def __init__(self, mid=None, eMid=None):
        self.mid = mid
        self.eMid = eMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.eMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FollowMid')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.eMid is not None:
            oprot.writeFieldBegin('eMid', TType.STRING, 2)
            oprot.writeString(self.eMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.eMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RemoveFromFollowBlacklistRequest(object):
    """
    Attributes:
     - followMid
    """
    def __init__(self, followMid=None):
        self.followMid = followMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RemoveFromFollowBlacklistRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FollowBuddyDetail(object):
    """
    Attributes:
     - iconType
    """
    def __init__(self, iconType=None):
        self.iconType = iconType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.iconType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FollowBuddyDetail')
        if self.iconType is not None:
            oprot.writeFieldBegin('iconType', TType.I32, 1)
            oprot.writeI32(self.iconType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.iconType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FollowProfile(object):
    """
    Attributes:
     - followMid
     - displayName
     - picturePath
     - following
     - allowFollow
     - followBuddyDetail
    """
    def __init__(self, followMid=None, displayName=None, picturePath=None, following=None, allowFollow=None, followBuddyDetail=None):
        self.followMid = followMid
        self.displayName = displayName
        self.picturePath = picturePath
        self.following = following
        self.allowFollow = allowFollow
        self.followBuddyDetail = followBuddyDetail

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.following = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.allowFollow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.followBuddyDetail = FollowBuddyDetail()
                    self.followBuddyDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FollowProfile')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 3)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.following is not None:
            oprot.writeFieldBegin('following', TType.BOOL, 4)
            oprot.writeBool(self.following)
            oprot.writeFieldEnd()
        if self.allowFollow is not None:
            oprot.writeFieldBegin('allowFollow', TType.BOOL, 5)
            oprot.writeBool(self.allowFollow)
            oprot.writeFieldEnd()
        if self.followBuddyDetail is not None:
            oprot.writeFieldBegin('followBuddyDetail', TType.STRUCT, 6)
            self.followBuddyDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.following))
        value = (value * 31) ^ hash(make_hashable(self.allowFollow))
        value = (value * 31) ^ hash(make_hashable(self.followBuddyDetail))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetFollowingsRequest(object):
    """
    Attributes:
     - followMid
     - cursor
    """
    def __init__(self, followMid=None, cursor=None):
        self.followMid = followMid
        self.cursor = cursor

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetFollowingsRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        value = (value * 31) ^ hash(make_hashable(self.cursor))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetFollowingsResponse(object):
    """
    Attributes:
     - profiles
     - cursor
     - followingCount
     - followerCount
    """
    def __init__(self, profiles=None, cursor=None, followingCount=None, followerCount=None):
        self.profiles = profiles
        self.cursor = cursor
        self.followingCount = followingCount
        self.followerCount = followerCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.profiles = []
                    (_, elem63) = iprot.readListBegin()
                    for _ in range(elem63):
                        elem64 = FollowProfile()
                        elem64.read(iprot)
                        self.profiles.append(elem64)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.followingCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.followerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetFollowingsResponse')
        if self.profiles is not None:
            oprot.writeFieldBegin('profiles', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.profiles))
            for elem65 in self.profiles:
                elem65.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor)
            oprot.writeFieldEnd()
        if self.followingCount is not None:
            oprot.writeFieldBegin('followingCount', TType.I64, 3)
            oprot.writeI64(self.followingCount)
            oprot.writeFieldEnd()
        if self.followerCount is not None:
            oprot.writeFieldBegin('followerCount', TType.I64, 4)
            oprot.writeI64(self.followerCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.profiles))
        value = (value * 31) ^ hash(make_hashable(self.cursor))
        value = (value * 31) ^ hash(make_hashable(self.followingCount))
        value = (value * 31) ^ hash(make_hashable(self.followerCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetFollowersRequest(object):
    """
    Attributes:
     - followMid
     - cursor
    """
    def __init__(self, followMid=None, cursor=None):
        self.followMid = followMid
        self.cursor = cursor

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetFollowersRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        value = (value * 31) ^ hash(make_hashable(self.cursor))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetFollowersResponse(object):
    """
    Attributes:
     - profiles
     - cursor
     - followingCount
     - followerCount
    """
    def __init__(self, profiles=None, cursor=None, followingCount=None, followerCount=None):
        self.profiles = profiles
        self.cursor = cursor
        self.followingCount = followingCount
        self.followerCount = followerCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.profiles = []
                    (_, elem66) = iprot.readListBegin()
                    for _ in range(elem66):
                        elem67 = FollowProfile()
                        elem67.read(iprot)
                        self.profiles.append(elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.followingCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.followerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetFollowersResponse')
        if self.profiles is not None:
            oprot.writeFieldBegin('profiles', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.profiles))
            for elem68 in self.profiles:
                elem68.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor)
            oprot.writeFieldEnd()
        if self.followingCount is not None:
            oprot.writeFieldBegin('followingCount', TType.I64, 3)
            oprot.writeI64(self.followingCount)
            oprot.writeFieldEnd()
        if self.followerCount is not None:
            oprot.writeFieldBegin('followerCount', TType.I64, 4)
            oprot.writeI64(self.followerCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.profiles))
        value = (value * 31) ^ hash(make_hashable(self.cursor))
        value = (value * 31) ^ hash(make_hashable(self.followingCount))
        value = (value * 31) ^ hash(make_hashable(self.followerCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FollowRequest(object):
    """
    Attributes:
     - followMid
    """
    def __init__(self, followMid=None):
        self.followMid = followMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FollowRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AddToFollowBlacklistRequest(object):
    """
    Attributes:
     - followMid
    """
    def __init__(self, followMid=None):
        self.followMid = followMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AddToFollowBlacklistRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UnfollowRequest(object):
    """
    Attributes:
     - followMid
    """
    def __init__(self, followMid=None):
        self.followMid = followMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UnfollowRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RemoveFollowerRequest(object):
    """
    Attributes:
     - followMid
    """
    def __init__(self, followMid=None):
        self.followMid = followMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RemoveFollowerRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetChatsRequest(object):
    """
    Attributes:
     - chatMids
     - withMembers
     - withInvitees
    """
    def __init__(self, chatMids=None, withMembers=None, withInvitees=None):
        self.chatMids = chatMids
        self.withMembers = withMembers
        self.withInvitees = withInvitees

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.chatMids = []
                    (_, elem69) = iprot.readListBegin()
                    for _ in range(elem69):
                        elem70 = iprot.readString()
                        self.chatMids.append(elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.withMembers = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.withInvitees = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetChatsRequest')
        if self.chatMids is not None:
            oprot.writeFieldBegin('chatMids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.chatMids))
            for elem71 in self.chatMids:
                oprot.writeString(elem71)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.withMembers is not None:
            oprot.writeFieldBegin('withMembers', TType.BOOL, 2)
            oprot.writeBool(self.withMembers)
            oprot.writeFieldEnd()
        if self.withInvitees is not None:
            oprot.writeFieldBegin('withInvitees', TType.BOOL, 3)
            oprot.writeBool(self.withInvitees)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatMids))
        value = (value * 31) ^ hash(make_hashable(self.withMembers))
        value = (value * 31) ^ hash(make_hashable(self.withInvitees))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetChatsResponse(object):
    """
    Attributes:
     - chats
    """
    def __init__(self, chats=None):
        self.chats = chats

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.chats = []
                    (_, elem72) = iprot.readListBegin()
                    for _ in range(elem72):
                        elem73 = Chat()
                        elem73.read(iprot)
                        self.chats.append(elem73)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetChatsResponse')
        if self.chats is not None:
            oprot.writeFieldBegin('chats', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.chats))
            for elem74 in self.chats:
                elem74.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chats))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Room(object):
    """
    Attributes:
     - mid
     - createdTime
     - contacts
     - notificationDisabled
     - memberMids
    """
    def __init__(self, mid=None, createdTime=None, contacts=None, notificationDisabled=None, memberMids=None):
        self.mid = mid
        self.createdTime = createdTime
        self.contacts = contacts
        self.notificationDisabled = notificationDisabled
        self.memberMids = memberMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.contacts = []
                    (_, elem75) = iprot.readListBegin()
                    for _ in range(elem75):
                        elem76 = Contact()
                        elem76.read(iprot)
                        self.contacts.append(elem76)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.notificationDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.LIST:
                    self.memberMids = []
                    (_, elem77) = iprot.readListBegin()
                    for _ in range(elem77):
                        elem78 = iprot.readString()
                        self.memberMids.append(elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Room')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.contacts is not None:
            oprot.writeFieldBegin('contacts', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.contacts))
            for elem79 in self.contacts:
                elem79.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.notificationDisabled is not None:
            oprot.writeFieldBegin('notificationDisabled', TType.BOOL, 31)
            oprot.writeBool(self.notificationDisabled)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.LIST, 40)
            oprot.writeListBegin(TType.STRING, len(self.memberMids))
            for elem80 in self.memberMids:
                oprot.writeString(elem80)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.contacts))
        value = (value * 31) ^ hash(make_hashable(self.notificationDisabled))
        value = (value * 31) ^ hash(make_hashable(self.memberMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class E2EEGroupSharedKey(object):
    """
    Attributes:
     - keyVersion
     - groupKeyId
     - creator
     - creatorKeyId
     - receiver
     - receiverKeyId
     - encryptedSharedKey
     - allowedTypes
     - specVersion
    """
    def __init__(self, keyVersion=None, groupKeyId=None, creator=None, creatorKeyId=None, receiver=None, receiverKeyId=None, encryptedSharedKey=None, allowedTypes=None, specVersion=None):
        self.keyVersion = keyVersion
        self.groupKeyId = groupKeyId
        self.creator = creator
        self.creatorKeyId = creatorKeyId
        self.receiver = receiver
        self.receiverKeyId = receiverKeyId
        self.encryptedSharedKey = encryptedSharedKey
        self.allowedTypes = allowedTypes
        self.specVersion = specVersion

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.keyVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.groupKeyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.creator = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.creatorKeyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.receiver = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.receiverKeyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.encryptedSharedKey = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.SET:
                    self.allowedTypes = set()
                    (_, elem81) = iprot.readSetBegin()
                    for _ in range(elem81):
                        elem82 = ContentType(iprot.readI32())
                        self.allowedTypes.add(elem82)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.specVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('E2EEGroupSharedKey')
        if self.keyVersion is not None:
            oprot.writeFieldBegin('keyVersion', TType.I32, 1)
            oprot.writeI32(self.keyVersion)
            oprot.writeFieldEnd()
        if self.groupKeyId is not None:
            oprot.writeFieldBegin('groupKeyId', TType.I32, 2)
            oprot.writeI32(self.groupKeyId)
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRING, 3)
            oprot.writeString(self.creator)
            oprot.writeFieldEnd()
        if self.creatorKeyId is not None:
            oprot.writeFieldBegin('creatorKeyId', TType.I32, 4)
            oprot.writeI32(self.creatorKeyId)
            oprot.writeFieldEnd()
        if self.receiver is not None:
            oprot.writeFieldBegin('receiver', TType.STRING, 5)
            oprot.writeString(self.receiver)
            oprot.writeFieldEnd()
        if self.receiverKeyId is not None:
            oprot.writeFieldBegin('receiverKeyId', TType.I32, 6)
            oprot.writeI32(self.receiverKeyId)
            oprot.writeFieldEnd()
        if self.encryptedSharedKey is not None:
            oprot.writeFieldBegin('encryptedSharedKey', TType.STRING, 7)
            oprot.writeBinary(self.encryptedSharedKey)
            oprot.writeFieldEnd()
        if self.allowedTypes is not None:
            oprot.writeFieldBegin('allowedTypes', TType.SET, 8)
            oprot.writeSetBegin(TType.I32, len(self.allowedTypes))
            for elem83 in self.allowedTypes:
                oprot.writeI32(elem83)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.specVersion is not None:
            oprot.writeFieldBegin('specVersion', TType.I32, 9)
            oprot.writeI32(self.specVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.keyVersion))
        value = (value * 31) ^ hash(make_hashable(self.groupKeyId))
        value = (value * 31) ^ hash(make_hashable(self.creator))
        value = (value * 31) ^ hash(make_hashable(self.creatorKeyId))
        value = (value * 31) ^ hash(make_hashable(self.receiver))
        value = (value * 31) ^ hash(make_hashable(self.receiverKeyId))
        value = (value * 31) ^ hash(make_hashable(self.encryptedSharedKey))
        value = (value * 31) ^ hash(make_hashable(self.allowedTypes))
        value = (value * 31) ^ hash(make_hashable(self.specVersion))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSelfFromChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - lastSeenMessageDeliveredTime
     - lastSeenMessageId
     - lastMessageDeliveredTime
     - lastMessageId
    """
    def __init__(self, reqSeq=None, chatMid=None, lastSeenMessageDeliveredTime=None, lastSeenMessageId=None, lastMessageDeliveredTime=None, lastMessageId=None):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.lastSeenMessageDeliveredTime = lastSeenMessageDeliveredTime
        self.lastSeenMessageId = lastSeenMessageId
        self.lastMessageDeliveredTime = lastMessageDeliveredTime
        self.lastMessageId = lastMessageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastSeenMessageDeliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.lastSeenMessageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.lastMessageDeliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.lastMessageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSelfFromChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.lastSeenMessageDeliveredTime is not None:
            oprot.writeFieldBegin('lastSeenMessageDeliveredTime', TType.I64, 3)
            oprot.writeI64(self.lastSeenMessageDeliveredTime)
            oprot.writeFieldEnd()
        if self.lastSeenMessageId is not None:
            oprot.writeFieldBegin('lastSeenMessageId', TType.STRING, 4)
            oprot.writeString(self.lastSeenMessageId)
            oprot.writeFieldEnd()
        if self.lastMessageDeliveredTime is not None:
            oprot.writeFieldBegin('lastMessageDeliveredTime', TType.I64, 5)
            oprot.writeI64(self.lastMessageDeliveredTime)
            oprot.writeFieldEnd()
        if self.lastMessageId is not None:
            oprot.writeFieldBegin('lastMessageId', TType.STRING, 6)
            oprot.writeString(self.lastMessageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.lastSeenMessageDeliveredTime))
        value = (value * 31) ^ hash(make_hashable(self.lastSeenMessageId))
        value = (value * 31) ^ hash(make_hashable(self.lastMessageDeliveredTime))
        value = (value * 31) ^ hash(make_hashable(self.lastMessageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSelfFromChatResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSelfFromChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class E2EENegotiationResult(object):
    """
    Attributes:
     - allowedTypes
     - publicKey
     - specVersion
    """
    def __init__(self, allowedTypes=None, publicKey=None, specVersion=None):
        self.allowedTypes = allowedTypes
        self.publicKey = publicKey
        self.specVersion = specVersion

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.allowedTypes = set()
                    (_, elem84) = iprot.readSetBegin()
                    for _ in range(elem84):
                        elem85 = ContentType(iprot.readI32())
                        self.allowedTypes.add(elem85)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.publicKey = E2EEPublicKey()
                    self.publicKey.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.specVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('E2EENegotiationResult')
        if self.allowedTypes is not None:
            oprot.writeFieldBegin('allowedTypes', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.allowedTypes))
            for elem86 in self.allowedTypes:
                oprot.writeI32(elem86)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRUCT, 2)
            self.publicKey.write(oprot)
            oprot.writeFieldEnd()
        if self.specVersion is not None:
            oprot.writeFieldBegin('specVersion', TType.I32, 3)
            oprot.writeI32(self.specVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.allowedTypes))
        value = (value * 31) ^ hash(make_hashable(self.publicKey))
        value = (value * 31) ^ hash(make_hashable(self.specVersion))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Ticket(object):
    """
    Attributes:
     - id
     - expirationTime
     - maxUseCount
    """
    def __init__(self, id=None, expirationTime=None, maxUseCount=None):
        self.id = id
        self.expirationTime = expirationTime
        self.maxUseCount = maxUseCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.expirationTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.maxUseCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Ticket')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.expirationTime is not None:
            oprot.writeFieldBegin('expirationTime', TType.I64, 10)
            oprot.writeI64(self.expirationTime)
            oprot.writeFieldEnd()
        if self.maxUseCount is not None:
            oprot.writeFieldBegin('maxUseCount', TType.I32, 21)
            oprot.writeI32(self.maxUseCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.expirationTime))
        value = (value * 31) ^ hash(make_hashable(self.maxUseCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PhoneVerificationResult(object):
    """
    Attributes:
     - verificationResult
     - accountMigrationCheckType
     - recommendAddFriends
    """
    def __init__(self, verificationResult=None, accountMigrationCheckType=None, recommendAddFriends=None):
        self.verificationResult = verificationResult
        self.accountMigrationCheckType = accountMigrationCheckType
        self.recommendAddFriends = recommendAddFriends

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.verificationResult = VerificationPhoneResult(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.accountMigrationCheckType = AccountMigrationCheckType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recommendAddFriends = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PhoneVerificationResult')
        if self.verificationResult is not None:
            oprot.writeFieldBegin('verificationResult', TType.I32, 1)
            oprot.writeI32(self.verificationResult)
            oprot.writeFieldEnd()
        if self.accountMigrationCheckType is not None:
            oprot.writeFieldBegin('accountMigrationCheckType', TType.I32, 2)
            oprot.writeI32(self.accountMigrationCheckType)
            oprot.writeFieldEnd()
        if self.recommendAddFriends is not None:
            oprot.writeFieldBegin('recommendAddFriends', TType.BOOL, 3)
            oprot.writeBool(self.recommendAddFriends)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.verificationResult))
        value = (value * 31) ^ hash(make_hashable(self.accountMigrationCheckType))
        value = (value * 31) ^ hash(make_hashable(self.recommendAddFriends))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeviceInfo(object):
    """
    Attributes:
     - deviceName
     - systemName
     - systemVersion
     - model
     - webViewVersion
     - carrierCode
     - carrierName
     - applicationType
    """
    def __init__(self, deviceName=None, systemName=None, systemVersion=None, model=None, webViewVersion=None, carrierCode=None, carrierName=None, applicationType=None):
        self.deviceName = deviceName
        self.systemName = systemName
        self.systemVersion = systemVersion
        self.model = model
        self.webViewVersion = webViewVersion
        self.carrierCode = carrierCode
        self.carrierName = carrierName
        self.applicationType = applicationType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.systemVersion = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.model = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.webViewVersion = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.carrierCode = Carrier(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.carrierName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.applicationType = ApplicationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeviceInfo')
        if self.deviceName is not None:
            oprot.writeFieldBegin('deviceName', TType.STRING, 1)
            oprot.writeString(self.deviceName)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 2)
            oprot.writeString(self.systemName)
            oprot.writeFieldEnd()
        if self.systemVersion is not None:
            oprot.writeFieldBegin('systemVersion', TType.STRING, 3)
            oprot.writeString(self.systemVersion)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 4)
            oprot.writeString(self.model)
            oprot.writeFieldEnd()
        if self.webViewVersion is not None:
            oprot.writeFieldBegin('webViewVersion', TType.STRING, 5)
            oprot.writeString(self.webViewVersion)
            oprot.writeFieldEnd()
        if self.carrierCode is not None:
            oprot.writeFieldBegin('carrierCode', TType.I32, 10)
            oprot.writeI32(self.carrierCode)
            oprot.writeFieldEnd()
        if self.carrierName is not None:
            oprot.writeFieldBegin('carrierName', TType.STRING, 11)
            oprot.writeString(self.carrierName)
            oprot.writeFieldEnd()
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.I32, 20)
            oprot.writeI32(self.applicationType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.deviceName))
        value = (value * 31) ^ hash(make_hashable(self.systemName))
        value = (value * 31) ^ hash(make_hashable(self.systemVersion))
        value = (value * 31) ^ hash(make_hashable(self.model))
        value = (value * 31) ^ hash(make_hashable(self.webViewVersion))
        value = (value * 31) ^ hash(make_hashable(self.carrierCode))
        value = (value * 31) ^ hash(make_hashable(self.carrierName))
        value = (value * 31) ^ hash(make_hashable(self.applicationType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SIMInfo(object):
    """
    Attributes:
     - phoneNumber
     - countryCode
    """
    def __init__(self, phoneNumber=None, countryCode=None):
        self.phoneNumber = phoneNumber
        self.countryCode = countryCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phoneNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SIMInfo')
        if self.phoneNumber is not None:
            oprot.writeFieldBegin('phoneNumber', TType.STRING, 1)
            oprot.writeString(self.phoneNumber)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 2)
            oprot.writeString(self.countryCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.phoneNumber))
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FriendRequest(object):
    """
    Attributes:
     - eMid
     - mid
     - direction
     - method
     - param
     - timestamp
     - seqId
     - displayName
     - picturePath
     - pictureStatus
    """
    def __init__(self, eMid=None, mid=None, direction=None, method=None, param=None, timestamp=None, seqId=None, displayName=None, picturePath=None, pictureStatus=None):
        self.eMid = eMid
        self.mid = mid
        self.direction = direction
        self.method = method
        self.param = param
        self.timestamp = timestamp
        self.seqId = seqId
        self.displayName = displayName
        self.picturePath = picturePath
        self.pictureStatus = pictureStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.direction = FriendRequestDirection(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.method = FriendRequestMethod(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.param = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.seqId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FriendRequest')
        if self.eMid is not None:
            oprot.writeFieldBegin('eMid', TType.STRING, 1)
            oprot.writeString(self.eMid)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 3)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 4)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.param is not None:
            oprot.writeFieldBegin('param', TType.STRING, 5)
            oprot.writeString(self.param)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 6)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.seqId is not None:
            oprot.writeFieldBegin('seqId', TType.I64, 7)
            oprot.writeI64(self.seqId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 10)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 11)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 12)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.eMid))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.direction))
        value = (value * 31) ^ hash(make_hashable(self.method))
        value = (value * 31) ^ hash(make_hashable(self.param))
        value = (value * 31) ^ hash(make_hashable(self.timestamp))
        value = (value * 31) ^ hash(make_hashable(self.seqId))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Configurations(object):
    """
    Attributes:
     - revision
     - configMap
    """
    def __init__(self, revision=None, configMap=None):
        self.revision = revision
        self.configMap = configMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.configMap = {}
                    (_, _, elem87) = iprot.readMapBegin()
                    for _ in range(elem87):
                        elem89 = iprot.readString()
                        elem88 = iprot.readString()
                        self.configMap[elem89] = elem88
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Configurations')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.configMap is not None:
            oprot.writeFieldBegin('configMap', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.configMap))
            for elem91, elem90 in self.configMap.items():
                oprot.writeString(elem91)
                oprot.writeString(elem90)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.configMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PushRecvReport(object):
    """
    Attributes:
     - pushTrackingId
     - recvTimestamp
     - battery
     - batteryMode
     - clientNetworkType
     - carrierCode
     - displayTimestamp
    """
    def __init__(self, pushTrackingId=None, recvTimestamp=None, battery=None, batteryMode=None, clientNetworkType=None, carrierCode=None, displayTimestamp=None):
        self.pushTrackingId = pushTrackingId
        self.recvTimestamp = recvTimestamp
        self.battery = battery
        self.batteryMode = batteryMode
        self.clientNetworkType = clientNetworkType
        self.carrierCode = carrierCode
        self.displayTimestamp = displayTimestamp

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pushTrackingId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.recvTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.battery = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.batteryMode = BatteryMode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.clientNetworkType = ClientNetworkType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.carrierCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.displayTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PushRecvReport')
        if self.pushTrackingId is not None:
            oprot.writeFieldBegin('pushTrackingId', TType.STRING, 1)
            oprot.writeString(self.pushTrackingId)
            oprot.writeFieldEnd()
        if self.recvTimestamp is not None:
            oprot.writeFieldBegin('recvTimestamp', TType.I64, 2)
            oprot.writeI64(self.recvTimestamp)
            oprot.writeFieldEnd()
        if self.battery is not None:
            oprot.writeFieldBegin('battery', TType.I32, 3)
            oprot.writeI32(self.battery)
            oprot.writeFieldEnd()
        if self.batteryMode is not None:
            oprot.writeFieldBegin('batteryMode', TType.I32, 4)
            oprot.writeI32(self.batteryMode)
            oprot.writeFieldEnd()
        if self.clientNetworkType is not None:
            oprot.writeFieldBegin('clientNetworkType', TType.I32, 5)
            oprot.writeI32(self.clientNetworkType)
            oprot.writeFieldEnd()
        if self.carrierCode is not None:
            oprot.writeFieldBegin('carrierCode', TType.STRING, 6)
            oprot.writeString(self.carrierCode)
            oprot.writeFieldEnd()
        if self.displayTimestamp is not None:
            oprot.writeFieldBegin('displayTimestamp', TType.I64, 7)
            oprot.writeI64(self.displayTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.pushTrackingId))
        value = (value * 31) ^ hash(make_hashable(self.recvTimestamp))
        value = (value * 31) ^ hash(make_hashable(self.battery))
        value = (value * 31) ^ hash(make_hashable(self.batteryMode))
        value = (value * 31) ^ hash(make_hashable(self.clientNetworkType))
        value = (value * 31) ^ hash(make_hashable(self.carrierCode))
        value = (value * 31) ^ hash(make_hashable(self.displayTimestamp))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetEncryptedIdentityV3Response(object):
    """
    Attributes:
     - wrappedNonce
     - kdfParameter1
     - kdfParameter2
    """
    def __init__(self, wrappedNonce=None, kdfParameter1=None, kdfParameter2=None):
        self.wrappedNonce = wrappedNonce
        self.kdfParameter1 = kdfParameter1
        self.kdfParameter2 = kdfParameter2

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.wrappedNonce = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.kdfParameter1 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.kdfParameter2 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetEncryptedIdentityV3Response')
        if self.wrappedNonce is not None:
            oprot.writeFieldBegin('wrappedNonce', TType.STRING, 1)
            oprot.writeBinary(self.wrappedNonce)
            oprot.writeFieldEnd()
        if self.kdfParameter1 is not None:
            oprot.writeFieldBegin('kdfParameter1', TType.STRING, 2)
            oprot.writeBinary(self.kdfParameter1)
            oprot.writeFieldEnd()
        if self.kdfParameter2 is not None:
            oprot.writeFieldBegin('kdfParameter2', TType.STRING, 3)
            oprot.writeBinary(self.kdfParameter2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.wrappedNonce))
        value = (value * 31) ^ hash(make_hashable(self.kdfParameter1))
        value = (value * 31) ^ hash(make_hashable(self.kdfParameter2))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AnalyticsInfo(object):
    """
    Attributes:
     - gaSamplingRate
     - tmid
    """
    def __init__(self, gaSamplingRate=None, tmid=None):
        self.gaSamplingRate = gaSamplingRate
        self.tmid = tmid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.gaSamplingRate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tmid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AnalyticsInfo')
        if self.gaSamplingRate is not None:
            oprot.writeFieldBegin('gaSamplingRate', TType.DOUBLE, 1)
            oprot.writeDouble(self.gaSamplingRate)
            oprot.writeFieldEnd()
        if self.tmid is not None:
            oprot.writeFieldBegin('tmid', TType.STRING, 2)
            oprot.writeString(self.tmid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.gaSamplingRate))
        value = (value * 31) ^ hash(make_hashable(self.tmid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SendPostbackRequest(object):
    """
    Attributes:
     - messageId
     - url
     - chatMID
     - originMID
    """
    def __init__(self, messageId=None, url=None, chatMID=None, originMID=None):
        self.messageId = messageId
        self.url = url
        self.chatMID = chatMID
        self.originMID = originMID

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.chatMID = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.originMID = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SendPostbackRequest')
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 1)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        if self.chatMID is not None:
            oprot.writeFieldBegin('chatMID', TType.STRING, 3)
            oprot.writeString(self.chatMID)
            oprot.writeFieldEnd()
        if self.originMID is not None:
            oprot.writeFieldBegin('originMID', TType.STRING, 4)
            oprot.writeString(self.originMID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        value = (value * 31) ^ hash(make_hashable(self.url))
        value = (value * 31) ^ hash(make_hashable(self.chatMID))
        value = (value * 31) ^ hash(make_hashable(self.originMID))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FriendRequestsInfo(object):
    """
    Attributes:
     - FriendRequestsInfo
     - totalOutgoingCount
     - recentIncomings
     - recentOutgoings
     - totalIncomingLimit
     - totalOutgoingLimit
    """
    def __init__(self, FriendRequestsInfo=None, totalOutgoingCount=None, recentIncomings=None, recentOutgoings=None, totalIncomingLimit=None, totalOutgoingLimit=None):
        self.FriendRequestsInfo = FriendRequestsInfo
        self.totalOutgoingCount = totalOutgoingCount
        self.recentIncomings = recentIncomings
        self.recentOutgoings = recentOutgoings
        self.totalIncomingLimit = totalIncomingLimit
        self.totalOutgoingLimit = totalOutgoingLimit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.FriendRequestsInfo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.totalOutgoingCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.recentIncomings = []
                    (_, elem92) = iprot.readListBegin()
                    for _ in range(elem92):
                        elem93 = FriendRequest()
                        elem93.read(iprot)
                        self.recentIncomings.append(elem93)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.recentOutgoings = []
                    (_, elem94) = iprot.readListBegin()
                    for _ in range(elem94):
                        elem95 = FriendRequest()
                        elem95.read(iprot)
                        self.recentOutgoings.append(elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.totalIncomingLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.totalOutgoingLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FriendRequestsInfo')
        if self.FriendRequestsInfo is not None:
            oprot.writeFieldBegin('FriendRequestsInfo', TType.I32, 1)
            oprot.writeI32(self.FriendRequestsInfo)
            oprot.writeFieldEnd()
        if self.totalOutgoingCount is not None:
            oprot.writeFieldBegin('totalOutgoingCount', TType.I32, 2)
            oprot.writeI32(self.totalOutgoingCount)
            oprot.writeFieldEnd()
        if self.recentIncomings is not None:
            oprot.writeFieldBegin('recentIncomings', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.recentIncomings))
            for elem96 in self.recentIncomings:
                elem96.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recentOutgoings is not None:
            oprot.writeFieldBegin('recentOutgoings', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.recentOutgoings))
            for elem97 in self.recentOutgoings:
                elem97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalIncomingLimit is not None:
            oprot.writeFieldBegin('totalIncomingLimit', TType.I32, 5)
            oprot.writeI32(self.totalIncomingLimit)
            oprot.writeFieldEnd()
        if self.totalOutgoingLimit is not None:
            oprot.writeFieldBegin('totalOutgoingLimit', TType.I32, 6)
            oprot.writeI32(self.totalOutgoingLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.FriendRequestsInfo))
        value = (value * 31) ^ hash(make_hashable(self.totalOutgoingCount))
        value = (value * 31) ^ hash(make_hashable(self.recentIncomings))
        value = (value * 31) ^ hash(make_hashable(self.recentOutgoings))
        value = (value * 31) ^ hash(make_hashable(self.totalIncomingLimit))
        value = (value * 31) ^ hash(make_hashable(self.totalOutgoingLimit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ClientNetworkStatus(object):
    """
    Attributes:
     - networkType
     - wifiSignals
    """
    def __init__(self, networkType=None, wifiSignals=None):
        self.networkType = networkType
        self.wifiSignals = wifiSignals

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.networkType = ClientNetworkType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.wifiSignals = []
                    (_, elem98) = iprot.readListBegin()
                    for _ in range(elem98):
                        elem99 = WifiSignal()
                        elem99.read(iprot)
                        self.wifiSignals.append(elem99)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ClientNetworkStatus')
        if self.networkType is not None:
            oprot.writeFieldBegin('networkType', TType.I32, 1)
            oprot.writeI32(self.networkType)
            oprot.writeFieldEnd()
        if self.wifiSignals is not None:
            oprot.writeFieldBegin('wifiSignals', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.wifiSignals))
            for elem100 in self.wifiSignals:
                elem100.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.networkType))
        value = (value * 31) ^ hash(make_hashable(self.wifiSignals))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class WifiSignal(object):
    """
    Attributes:
     - ssid
     - bssid
     - wifiStandard
     - frequency
     - lastSeenTimestamp
     - rssi
    """
    def __init__(self, ssid=None, bssid=None, wifiStandard=None, frequency=None, lastSeenTimestamp=None, rssi=None):
        self.ssid = ssid
        self.bssid = bssid
        self.wifiStandard = wifiStandard
        self.frequency = frequency
        self.lastSeenTimestamp = lastSeenTimestamp
        self.rssi = rssi

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.bssid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.wifiStandard = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.frequency = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.lastSeenTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.rssi = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('WifiSignal')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 2)
            oprot.writeString(self.ssid)
            oprot.writeFieldEnd()
        if self.bssid is not None:
            oprot.writeFieldBegin('bssid', TType.STRING, 3)
            oprot.writeString(self.bssid)
            oprot.writeFieldEnd()
        if self.wifiStandard is not None:
            oprot.writeFieldBegin('wifiStandard', TType.STRING, 4)
            oprot.writeString(self.wifiStandard)
            oprot.writeFieldEnd()
        if self.frequency is not None:
            oprot.writeFieldBegin('frequency', TType.DOUBLE, 5)
            oprot.writeDouble(self.frequency)
            oprot.writeFieldEnd()
        if self.lastSeenTimestamp is not None:
            oprot.writeFieldBegin('lastSeenTimestamp', TType.I64, 10)
            oprot.writeI64(self.lastSeenTimestamp)
            oprot.writeFieldEnd()
        if self.rssi is not None:
            oprot.writeFieldBegin('rssi', TType.I32, 11)
            oprot.writeI32(self.rssi)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.ssid))
        value = (value * 31) ^ hash(make_hashable(self.bssid))
        value = (value * 31) ^ hash(make_hashable(self.wifiStandard))
        value = (value * 31) ^ hash(make_hashable(self.frequency))
        value = (value * 31) ^ hash(make_hashable(self.lastSeenTimestamp))
        value = (value * 31) ^ hash(make_hashable(self.rssi))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class NearbyEntry(object):
    """
    Attributes:
     - emid
     - distance
     - lastUpdatedInSec
     - property
     - profile
    """
    def __init__(self, emid=None, distance=None, lastUpdatedInSec=None, property=None, profile=None):
        self.emid = emid
        self.distance = distance
        self.lastUpdatedInSec = lastUpdatedInSec
        self.property = property
        self.profile = profile

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.emid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lastUpdatedInSec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.property = {}
                    (_, _, elem101) = iprot.readMapBegin()
                    for _ in range(elem101):
                        elem103 = iprot.readString()
                        elem102 = iprot.readString()
                        self.property[elem103] = elem102
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.profile = Profile()
                    self.profile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('NearbyEntry')
        if self.emid is not None:
            oprot.writeFieldBegin('emid', TType.STRING, 1)
            oprot.writeString(self.emid)
            oprot.writeFieldEnd()
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.DOUBLE, 2)
            oprot.writeDouble(self.distance)
            oprot.writeFieldEnd()
        if self.lastUpdatedInSec is not None:
            oprot.writeFieldBegin('lastUpdatedInSec', TType.I32, 3)
            oprot.writeI32(self.lastUpdatedInSec)
            oprot.writeFieldEnd()
        if self.property is not None:
            oprot.writeFieldBegin('property', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.property))
            for elem105, elem104 in self.property.items():
                oprot.writeString(elem105)
                oprot.writeString(elem104)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.profile is not None:
            oprot.writeFieldBegin('profile', TType.STRUCT, 5)
            self.profile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.emid))
        value = (value * 31) ^ hash(make_hashable(self.distance))
        value = (value * 31) ^ hash(make_hashable(self.lastUpdatedInSec))
        value = (value * 31) ^ hash(make_hashable(self.property))
        value = (value * 31) ^ hash(make_hashable(self.profile))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TMessageReadRange(object):
    """
    Attributes:
     - chatId
     - ranges
    """
    def __init__(self, chatId=None, ranges=None):
        self.chatId = chatId
        self.ranges = ranges

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.ranges = {}
                    (_, _, elem106) = iprot.readMapBegin()
                    for _ in range(elem106):
                        elem108 = iprot.readString()
                        elem107 = []
                        (_, elem109) = iprot.readListBegin()
                        for _ in range(elem109):
                            elem110 = TMessageReadRangeEntry()
                            elem110.read(iprot)
                            elem107.append(elem110)
                        iprot.readListEnd()
                        self.ranges[elem108] = elem107
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TMessageReadRange')
        if self.chatId is not None:
            oprot.writeFieldBegin('chatId', TType.STRING, 1)
            oprot.writeString(self.chatId)
            oprot.writeFieldEnd()
        if self.ranges is not None:
            oprot.writeFieldBegin('ranges', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.ranges))
            for elem112, elem111 in self.ranges.items():
                oprot.writeString(elem112)
                oprot.writeListBegin(TType.STRUCT, len(elem111))
                for elem113 in elem111:
                    elem113.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatId))
        value = (value * 31) ^ hash(make_hashable(self.ranges))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TMessageReadRangeEntry(object):
    """
    Attributes:
     - startMessageId
     - endMessageId
     - startTime
     - endTime
    """
    def __init__(self, startMessageId=None, endMessageId=None, startTime=None, endTime=None):
        self.startMessageId = startMessageId
        self.endMessageId = endMessageId
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.endMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TMessageReadRangeEntry')
        if self.startMessageId is not None:
            oprot.writeFieldBegin('startMessageId', TType.I64, 1)
            oprot.writeI64(self.startMessageId)
            oprot.writeFieldEnd()
        if self.endMessageId is not None:
            oprot.writeFieldBegin('endMessageId', TType.I64, 2)
            oprot.writeI64(self.endMessageId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 3)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 4)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.startMessageId))
        value = (value * 31) ^ hash(make_hashable(self.endMessageId))
        value = (value * 31) ^ hash(make_hashable(self.startTime))
        value = (value * 31) ^ hash(make_hashable(self.endTime))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ExtendedProfile(object):
    """
    Attributes:
     - birthday
    """
    def __init__(self, birthday=None):
        self.birthday = birthday

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.birthday = ExtendedProfileBirthday()
                    self.birthday.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ExtendedProfile')
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRUCT, 1)
            self.birthday.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.birthday))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ExtendedProfileBirthday(object):
    """
    Attributes:
     - year
     - yearPrivacyLevelType
     - yearEnabled
     - day
     - dayPrivacyLevelType
     - dayEnabled
    """
    def __init__(self, year=None, yearPrivacyLevelType=None, yearEnabled=None, day=None, dayPrivacyLevelType=None, dayEnabled=None):
        self.year = year
        self.yearPrivacyLevelType = yearPrivacyLevelType
        self.yearEnabled = yearEnabled
        self.day = day
        self.dayPrivacyLevelType = dayPrivacyLevelType
        self.dayEnabled = dayEnabled

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.year = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.yearPrivacyLevelType = PrivacyLevelType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.yearEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.day = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.dayPrivacyLevelType = PrivacyLevelType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.dayEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ExtendedProfileBirthday')
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.STRING, 1)
            oprot.writeString(self.year)
            oprot.writeFieldEnd()
        if self.yearPrivacyLevelType is not None:
            oprot.writeFieldBegin('yearPrivacyLevelType', TType.I32, 2)
            oprot.writeI32(self.yearPrivacyLevelType)
            oprot.writeFieldEnd()
        if self.yearEnabled is not None:
            oprot.writeFieldBegin('yearEnabled', TType.BOOL, 3)
            oprot.writeBool(self.yearEnabled)
            oprot.writeFieldEnd()
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.STRING, 5)
            oprot.writeString(self.day)
            oprot.writeFieldEnd()
        if self.dayPrivacyLevelType is not None:
            oprot.writeFieldBegin('dayPrivacyLevelType', TType.I32, 6)
            oprot.writeI32(self.dayPrivacyLevelType)
            oprot.writeFieldEnd()
        if self.dayEnabled is not None:
            oprot.writeFieldBegin('dayEnabled', TType.BOOL, 7)
            oprot.writeBool(self.dayEnabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.year))
        value = (value * 31) ^ hash(make_hashable(self.yearPrivacyLevelType))
        value = (value * 31) ^ hash(make_hashable(self.yearEnabled))
        value = (value * 31) ^ hash(make_hashable(self.day))
        value = (value * 31) ^ hash(make_hashable(self.dayPrivacyLevelType))
        value = (value * 31) ^ hash(make_hashable(self.dayEnabled))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateProfileAttributesRequest(object):
    """
    Attributes:
     - profileAttributes
    """
    def __init__(self, profileAttributes=None):
        self.profileAttributes = profileAttributes

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.profileAttributes = {}
                    (_, _, elem114) = iprot.readMapBegin()
                    for _ in range(elem114):
                        elem116 = ProfileAttributes(iprot.readI32())
                        elem115 = ProfileContent()
                        elem115.read(iprot)
                        self.profileAttributes[elem116] = elem115
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateProfileAttributesRequest')
        if self.profileAttributes is not None:
            oprot.writeFieldBegin('profileAttributes', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.profileAttributes))
            for elem118, elem117 in self.profileAttributes.items():
                oprot.writeI32(elem118)
                elem117.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.profileAttributes))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProfileContent(object):
    """
    Attributes:
     - value
     - meta
    """
    def __init__(self, value=None, meta=None):
        self.value = value
        self.meta = meta

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.meta = {}
                    (_, _, elem119) = iprot.readMapBegin()
                    for _ in range(elem119):
                        elem121 = iprot.readString()
                        elem120 = iprot.readString()
                        self.meta[elem121] = elem120
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProfileContent')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value)
            oprot.writeFieldEnd()
        if self.meta is not None:
            oprot.writeFieldBegin('meta', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.meta))
            for elem123, elem122 in self.meta.items():
                oprot.writeString(elem123)
                oprot.writeString(elem122)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.value))
        value = (value * 31) ^ hash(make_hashable(self.meta))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetAllChatMidsRequest(object):
    """
    Attributes:
     - withMemberChats
     - withInvitedChats
    """
    def __init__(self, withMemberChats=None, withInvitedChats=None):
        self.withMemberChats = withMemberChats
        self.withInvitedChats = withInvitedChats

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.withMemberChats = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.withInvitedChats = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetAllChatMidsRequest')
        if self.withMemberChats is not None:
            oprot.writeFieldBegin('withMemberChats', TType.BOOL, 1)
            oprot.writeBool(self.withMemberChats)
            oprot.writeFieldEnd()
        if self.withInvitedChats is not None:
            oprot.writeFieldBegin('withInvitedChats', TType.BOOL, 2)
            oprot.writeBool(self.withInvitedChats)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.withMemberChats))
        value = (value * 31) ^ hash(make_hashable(self.withInvitedChats))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetAllChatMidsResponse(object):
    """
    Attributes:
     - memberChatMids
     - invitedChatMids
    """
    def __init__(self, memberChatMids=None, invitedChatMids=None):
        self.memberChatMids = memberChatMids
        self.invitedChatMids = invitedChatMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.memberChatMids = set()
                    (_, elem124) = iprot.readSetBegin()
                    for _ in range(elem124):
                        elem125 = iprot.readString()
                        self.memberChatMids.add(elem125)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.invitedChatMids = set()
                    (_, elem126) = iprot.readSetBegin()
                    for _ in range(elem126):
                        elem127 = iprot.readString()
                        self.invitedChatMids.add(elem127)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetAllChatMidsResponse')
        if self.memberChatMids is not None:
            oprot.writeFieldBegin('memberChatMids', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.memberChatMids))
            for elem128 in self.memberChatMids:
                oprot.writeString(elem128)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.invitedChatMids is not None:
            oprot.writeFieldBegin('invitedChatMids', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.invitedChatMids))
            for elem129 in self.invitedChatMids:
                oprot.writeString(elem129)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.memberChatMids))
        value = (value * 31) ^ hash(make_hashable(self.invitedChatMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CancelChatInvitationRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - targetUserMids
    """
    def __init__(self, reqSeq=None, chatMid=None, targetUserMids=None):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.targetUserMids = targetUserMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_, elem130) = iprot.readSetBegin()
                    for _ in range(elem130):
                        elem131 = iprot.readString()
                        self.targetUserMids.add(elem131)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CancelChatInvitationRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for elem132 in self.targetUserMids:
                oprot.writeString(elem132)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.targetUserMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CancelChatInvitationResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CancelChatInvitationResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatRoomBGM(object):
    """
    Attributes:
     - creatorMid
     - createdTime
     - chatRoomBGMInfo
    """
    def __init__(self, creatorMid=None, createdTime=None, chatRoomBGMInfo=None):
        self.creatorMid = creatorMid
        self.createdTime = createdTime
        self.chatRoomBGMInfo = chatRoomBGMInfo

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.creatorMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.chatRoomBGMInfo = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatRoomBGM')
        if self.creatorMid is not None:
            oprot.writeFieldBegin('creatorMid', TType.STRING, 1)
            oprot.writeString(self.creatorMid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.chatRoomBGMInfo is not None:
            oprot.writeFieldBegin('chatRoomBGMInfo', TType.STRING, 3)
            oprot.writeString(self.chatRoomBGMInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.creatorMid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.chatRoomBGMInfo))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatRoomAnnouncementContents(object):
    """
    Attributes:
     - displayFields
     - text
     - link
     - thumbnail
     - contentMetadata
    """
    def __init__(self, displayFields=None, text=None, link=None, thumbnail=None, contentMetadata=None):
        self.displayFields = displayFields
        self.text = text
        self.link = link
        self.thumbnail = thumbnail
        self.contentMetadata = contentMetadata

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.displayFields = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.link = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.thumbnail = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.contentMetadata = ChatRoomAnnouncementContentMetadata()
                    self.contentMetadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatRoomAnnouncementContents')
        if self.displayFields is not None:
            oprot.writeFieldBegin('displayFields', TType.I32, 1)
            oprot.writeI32(self.displayFields)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 2)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.link is not None:
            oprot.writeFieldBegin('link', TType.STRING, 3)
            oprot.writeString(self.link)
            oprot.writeFieldEnd()
        if self.thumbnail is not None:
            oprot.writeFieldBegin('thumbnail', TType.STRING, 4)
            oprot.writeString(self.thumbnail)
            oprot.writeFieldEnd()
        if self.contentMetadata is not None:
            oprot.writeFieldBegin('contentMetadata', TType.STRUCT, 5)
            self.contentMetadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.displayFields))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.link))
        value = (value * 31) ^ hash(make_hashable(self.thumbnail))
        value = (value * 31) ^ hash(make_hashable(self.contentMetadata))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatRoomAnnouncementContentMetadata(object):
    """
    Attributes:
     - replace
     - sticonOwnership
     - postNotificationMetadata
    """
    def __init__(self, replace=None, sticonOwnership=None, postNotificationMetadata=None):
        self.replace = replace
        self.sticonOwnership = sticonOwnership
        self.postNotificationMetadata = postNotificationMetadata

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.replace = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sticonOwnership = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.postNotificationMetadata = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatRoomAnnouncementContentMetadata')
        if self.replace is not None:
            oprot.writeFieldBegin('replace', TType.STRING, 1)
            oprot.writeString(self.replace)
            oprot.writeFieldEnd()
        if self.sticonOwnership is not None:
            oprot.writeFieldBegin('sticonOwnership', TType.STRING, 2)
            oprot.writeString(self.sticonOwnership)
            oprot.writeFieldEnd()
        if self.postNotificationMetadata is not None:
            oprot.writeFieldBegin('postNotificationMetadata', TType.STRING, 3)
            oprot.writeString(self.postNotificationMetadata)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.replace))
        value = (value * 31) ^ hash(make_hashable(self.sticonOwnership))
        value = (value * 31) ^ hash(make_hashable(self.postNotificationMetadata))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatRoomAnnouncement(object):
    """
    Attributes:
     - announcementSeq
     - type
     - contents
     - creatorMid
     - createdTime
     - deletePermission
    """
    def __init__(self, announcementSeq=None, type=None, contents=None, creatorMid=None, createdTime=None, deletePermission=None):
        self.announcementSeq = announcementSeq
        self.type = type
        self.contents = contents
        self.creatorMid = creatorMid
        self.createdTime = createdTime
        self.deletePermission = deletePermission

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.announcementSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = AnnouncementType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.contents = ChatRoomAnnouncementContents()
                    self.contents.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.creatorMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.deletePermission = DeletePermission(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatRoomAnnouncement')
        if self.announcementSeq is not None:
            oprot.writeFieldBegin('announcementSeq', TType.I64, 1)
            oprot.writeI64(self.announcementSeq)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.contents is not None:
            oprot.writeFieldBegin('contents', TType.STRUCT, 3)
            self.contents.write(oprot)
            oprot.writeFieldEnd()
        if self.creatorMid is not None:
            oprot.writeFieldBegin('creatorMid', TType.STRING, 4)
            oprot.writeString(self.creatorMid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.deletePermission is not None:
            oprot.writeFieldBegin('deletePermission', TType.I32, 6)
            oprot.writeI32(self.deletePermission)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.announcementSeq))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.contents))
        value = (value * 31) ^ hash(make_hashable(self.creatorMid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.deletePermission))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetPreviousMessagesV2Request(object):
    """
    Attributes:
     - messageBoxId
     - endMessageId
     - messagesCount
     - withReadCount
     - receivedOnly
    """
    def __init__(self, messageBoxId=None, endMessageId=None, messagesCount=None, withReadCount=None, receivedOnly=None):
        self.messageBoxId = messageBoxId
        self.endMessageId = endMessageId
        self.messagesCount = messagesCount
        self.withReadCount = withReadCount
        self.receivedOnly = receivedOnly

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.messageBoxId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.endMessageId = MessageBoxV2MessageId()
                    self.endMessageId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.messagesCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.withReadCount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.receivedOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetPreviousMessagesV2Request')
        if self.messageBoxId is not None:
            oprot.writeFieldBegin('messageBoxId', TType.STRING, 1)
            oprot.writeString(self.messageBoxId)
            oprot.writeFieldEnd()
        if self.endMessageId is not None:
            oprot.writeFieldBegin('endMessageId', TType.STRUCT, 2)
            self.endMessageId.write(oprot)
            oprot.writeFieldEnd()
        if self.messagesCount is not None:
            oprot.writeFieldBegin('messagesCount', TType.I32, 3)
            oprot.writeI32(self.messagesCount)
            oprot.writeFieldEnd()
        if self.withReadCount is not None:
            oprot.writeFieldBegin('withReadCount', TType.BOOL, 4)
            oprot.writeBool(self.withReadCount)
            oprot.writeFieldEnd()
        if self.receivedOnly is not None:
            oprot.writeFieldBegin('receivedOnly', TType.BOOL, 5)
            oprot.writeBool(self.receivedOnly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.messageBoxId))
        value = (value * 31) ^ hash(make_hashable(self.endMessageId))
        value = (value * 31) ^ hash(make_hashable(self.messagesCount))
        value = (value * 31) ^ hash(make_hashable(self.withReadCount))
        value = (value * 31) ^ hash(make_hashable(self.receivedOnly))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageBoxV2MessageId(object):
    """
    Attributes:
     - deliveredTime
     - messageId
    """
    def __init__(self, deliveredTime=None, messageId=None):
        self.deliveredTime = deliveredTime
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.deliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.messageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageBoxV2MessageId')
        if self.deliveredTime is not None:
            oprot.writeFieldBegin('deliveredTime', TType.I64, 1)
            oprot.writeI64(self.deliveredTime)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I64, 2)
            oprot.writeI64(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.deliveredTime))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InviteIntoChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - targetUserMids
    """
    def __init__(self, reqSeq=None, chatMid=None, targetUserMids=None):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.targetUserMids = targetUserMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_, elem133) = iprot.readSetBegin()
                    for _ in range(elem133):
                        elem134 = iprot.readString()
                        self.targetUserMids.add(elem134)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InviteIntoChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for elem135 in self.targetUserMids:
                oprot.writeString(elem135)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.targetUserMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InviteIntoChatResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InviteIntoChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chat
     - updatedAttribute
    """
    def __init__(self, reqSeq=None, chat=None, updatedAttribute=None):
        self.reqSeq = reqSeq
        self.chat = chat
        self.updatedAttribute = updatedAttribute

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.chat = Chat()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.updatedAttribute = ChatAttribute(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 2)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        if self.updatedAttribute is not None:
            oprot.writeFieldBegin('updatedAttribute', TType.I32, 3)
            oprot.writeI32(self.updatedAttribute)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chat))
        value = (value * 31) ^ hash(make_hashable(self.updatedAttribute))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateChatResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateChatRequest(object):
    """
    Attributes:
     - reqSeq
     - type
     - name
     - targetUserMids
     - picturePath
    """
    def __init__(self, reqSeq=None, type=None, name=None, targetUserMids=None, picturePath=None):
        self.reqSeq = reqSeq
        self.type = type
        self.name = name
        self.targetUserMids = targetUserMids
        self.picturePath = picturePath

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = ChatType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_, elem136) = iprot.readSetBegin()
                    for _ in range(elem136):
                        elem137 = iprot.readString()
                        self.targetUserMids.add(elem137)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for elem138 in self.targetUserMids:
                oprot.writeString(elem138)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 5)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.targetUserMids))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateChatResponse(object):
    """
    Attributes:
     - chat
    """
    def __init__(self, chat=None):
        self.chat = chat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.chat = Chat()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateChatResponse')
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 1)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetFollowBlacklistRequest(object):
    """
    Attributes:
     - cursor
    """
    def __init__(self, cursor=None):
        self.cursor = cursor

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetFollowBlacklistRequest')
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 1)
            oprot.writeString(self.cursor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.cursor))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetFollowBlacklistResponse(object):
    """
    Attributes:
     - profiles
     - cursor
    """
    def __init__(self, profiles=None, cursor=None):
        self.profiles = profiles
        self.cursor = cursor

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.profiles = []
                    (_, elem139) = iprot.readListBegin()
                    for _ in range(elem139):
                        elem140 = FollowProfile()
                        elem140.read(iprot)
                        self.profiles.append(elem140)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetFollowBlacklistResponse')
        if self.profiles is not None:
            oprot.writeFieldBegin('profiles', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.profiles))
            for elem141 in self.profiles:
                elem141.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.profiles))
        value = (value * 31) ^ hash(make_hashable(self.cursor))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReactRequest(object):
    """
    Attributes:
     - reqSeq
     - messageId
     - reactionType
    """
    def __init__(self, reqSeq=None, messageId=None, reactionType=None):
        self.reqSeq = reqSeq
        self.messageId = messageId
        self.reactionType = reactionType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.messageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.reactionType = ReactionType()
                    self.reactionType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReactRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I64, 2)
            oprot.writeI64(self.messageId)
            oprot.writeFieldEnd()
        if self.reactionType is not None:
            oprot.writeFieldBegin('reactionType', TType.STRUCT, 3)
            self.reactionType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        value = (value * 31) ^ hash(make_hashable(self.reactionType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PendingAgreementsResponse(object):
    """
    Attributes:
     - pendingAgreements
    """
    def __init__(self, pendingAgreements=None):
        self.pendingAgreements = pendingAgreements

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.pendingAgreements = []
                    (_, elem142) = iprot.readListBegin()
                    for _ in range(elem142):
                        elem143 = SettingsAttributes(iprot.readI32())
                        self.pendingAgreements.append(elem143)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PendingAgreementsResponse')
        if self.pendingAgreements is not None:
            oprot.writeFieldBegin('pendingAgreements', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.pendingAgreements))
            for elem144 in self.pendingAgreements:
                oprot.writeI32(elem144)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.pendingAgreements))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetContactsV2Request(object):
    """
    Attributes:
     - targetUserMids
     - neededContactCalendarEvents
     - withUserStatus
    """
    def __init__(self, targetUserMids=None, neededContactCalendarEvents=None, withUserStatus=None):
        self.targetUserMids = targetUserMids
        self.neededContactCalendarEvents = neededContactCalendarEvents
        self.withUserStatus = withUserStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.targetUserMids = []
                    (_, elem145) = iprot.readListBegin()
                    for _ in range(elem145):
                        elem146 = iprot.readString()
                        self.targetUserMids.append(elem146)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.neededContactCalendarEvents = set()
                    (_, elem147) = iprot.readSetBegin()
                    for _ in range(elem147):
                        elem148 = ExtendedProfileAttribute(iprot.readI32())
                        self.neededContactCalendarEvents.add(elem148)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.withUserStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetContactsV2Request')
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.targetUserMids))
            for elem149 in self.targetUserMids:
                oprot.writeString(elem149)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neededContactCalendarEvents is not None:
            oprot.writeFieldBegin('neededContactCalendarEvents', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.neededContactCalendarEvents))
            for elem150 in self.neededContactCalendarEvents:
                oprot.writeI32(elem150)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.withUserStatus is not None:
            oprot.writeFieldBegin('withUserStatus', TType.BOOL, 3)
            oprot.writeBool(self.withUserStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.targetUserMids))
        value = (value * 31) ^ hash(make_hashable(self.neededContactCalendarEvents))
        value = (value * 31) ^ hash(make_hashable(self.withUserStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetContactsV2Response(object):
    """
    Attributes:
     - contacts
    """
    def __init__(self, contacts=None):
        self.contacts = contacts

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.contacts = {}
                    (_, _, elem151) = iprot.readMapBegin()
                    for _ in range(elem151):
                        elem153 = iprot.readString()
                        elem152 = ContactEntry()
                        elem152.read(iprot)
                        self.contacts[elem153] = elem152
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetContactsV2Response')
        if self.contacts is not None:
            oprot.writeFieldBegin('contacts', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.contacts))
            for elem155, elem154 in self.contacts.items():
                oprot.writeString(elem155)
                elem154.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.contacts))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactEntry(object):
    """
    Attributes:
     - userStatus
     - snapshotTimeMillis
     - contact
     - calendarEvents
    """
    def __init__(self, userStatus=None, snapshotTimeMillis=None, contact=None, calendarEvents=None):
        self.userStatus = userStatus
        self.snapshotTimeMillis = snapshotTimeMillis
        self.contact = contact
        self.calendarEvents = calendarEvents

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userStatus = UserStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.snapshotTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.contact = Contact()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.calendarEvents = ContactCalendarEvents()
                    self.calendarEvents.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactEntry')
        if self.userStatus is not None:
            oprot.writeFieldBegin('userStatus', TType.I32, 1)
            oprot.writeI32(self.userStatus)
            oprot.writeFieldEnd()
        if self.snapshotTimeMillis is not None:
            oprot.writeFieldBegin('snapshotTimeMillis', TType.I64, 2)
            oprot.writeI64(self.snapshotTimeMillis)
            oprot.writeFieldEnd()
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 3)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.calendarEvents is not None:
            oprot.writeFieldBegin('calendarEvents', TType.STRUCT, 4)
            self.calendarEvents.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.userStatus))
        value = (value * 31) ^ hash(make_hashable(self.snapshotTimeMillis))
        value = (value * 31) ^ hash(make_hashable(self.contact))
        value = (value * 31) ^ hash(make_hashable(self.calendarEvents))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactCalendarEvents(object):
    """
    Attributes:
     - events
    """
    def __init__(self, events=None):
        self.events = events

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.events = {}
                    (_, _, elem156) = iprot.readMapBegin()
                    for _ in range(elem156):
                        elem158 = ExtendedProfileAttribute(iprot.readI32())
                        elem157 = []
                        (_, elem159) = iprot.readListBegin()
                        for _ in range(elem159):
                            elem160 = ContactCalendarEvent()
                            elem160.read(iprot)
                            elem157.append(elem160)
                        iprot.readListEnd()
                        self.events[elem158] = elem157
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactCalendarEvents')
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.events))
            for elem162, elem161 in self.events.items():
                oprot.writeI32(elem162)
                oprot.writeListBegin(TType.STRUCT, len(elem161))
                for elem163 in elem161:
                    elem163.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.events))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactCalendarEvent(object):
    """
    Attributes:
     - id
     - state
     - year
     - month
     - day
    """
    def __init__(self, id=None, state=None, year=None, month=None, day=None):
        self.id = id
        self.state = state
        self.year = year
        self.month = month
        self.day = day

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = CalendarState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.year = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.month = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.day = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactCalendarEvent')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.I32, 3)
            oprot.writeI32(self.year)
            oprot.writeFieldEnd()
        if self.month is not None:
            oprot.writeFieldBegin('month', TType.I32, 4)
            oprot.writeI32(self.month)
            oprot.writeFieldEnd()
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.I32, 5)
            oprot.writeI32(self.day)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.state))
        value = (value * 31) ^ hash(make_hashable(self.year))
        value = (value * 31) ^ hash(make_hashable(self.month))
        value = (value * 31) ^ hash(make_hashable(self.day))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AcceptChatInvitationRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
    """
    def __init__(self, reqSeq=None, chatMid=None):
        self.reqSeq = reqSeq
        self.chatMid = chatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AcceptChatInvitationRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AcceptChatInvitationResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AcceptChatInvitationResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FindChatByTicketRequest(object):
    """
    Attributes:
     - ticketId
    """
    def __init__(self, ticketId=None):
        self.ticketId = ticketId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ticketId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FindChatByTicketRequest')
        if self.ticketId is not None:
            oprot.writeFieldBegin('ticketId', TType.STRING, 1)
            oprot.writeString(self.ticketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.ticketId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FindChatByTicketResponse(object):
    """
    Attributes:
     - chat
    """
    def __init__(self, chat=None):
        self.chat = chat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.chat = Chat()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FindChatByTicketResponse')
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 1)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatEffectMeta(object):
    """
    Attributes:
     - contentId
     - category
     - name
     - defaultContent
     - optionalContents
     - keywords
     - beginTimeMillis
     - endTimeMillis
     - createdTimeMillis
     - updatedTimeMillis
    """
    def __init__(self, contentId=None, category=None, name=None, defaultContent=None, optionalContents=None, keywords=None, beginTimeMillis=None, endTimeMillis=None, createdTimeMillis=None, updatedTimeMillis=None):
        self.contentId = contentId
        self.category = category
        self.name = name
        self.defaultContent = defaultContent
        self.optionalContents = optionalContents
        self.keywords = keywords
        self.beginTimeMillis = beginTimeMillis
        self.endTimeMillis = endTimeMillis
        self.createdTimeMillis = createdTimeMillis
        self.updatedTimeMillis = updatedTimeMillis

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.contentId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.category = ChatEffectCategories(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.defaultContent = ChatEffectMetaContent()
                    self.defaultContent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.optionalContents = {}
                    (_, _, elem164) = iprot.readMapBegin()
                    for _ in range(elem164):
                        elem166 = iprot.readI32()
                        elem165 = ChatEffectMetaContent()
                        elem165.read(iprot)
                        self.optionalContents[elem166] = elem165
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.keywords = set()
                    (_, elem167) = iprot.readSetBegin()
                    for _ in range(elem167):
                        elem168 = iprot.readString()
                        self.keywords.add(elem168)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.beginTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.endTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.createdTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.updatedTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatEffectMeta')
        if self.contentId is not None:
            oprot.writeFieldBegin('contentId', TType.I64, 1)
            oprot.writeI64(self.contentId)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.I32, 2)
            oprot.writeI32(self.category)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.defaultContent is not None:
            oprot.writeFieldBegin('defaultContent', TType.STRUCT, 4)
            self.defaultContent.write(oprot)
            oprot.writeFieldEnd()
        if self.optionalContents is not None:
            oprot.writeFieldBegin('optionalContents', TType.MAP, 5)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.optionalContents))
            for elem170, elem169 in self.optionalContents.items():
                oprot.writeI32(elem170)
                elem169.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.SET, 6)
            oprot.writeSetBegin(TType.STRING, len(self.keywords))
            for elem171 in self.keywords:
                oprot.writeString(elem171)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.beginTimeMillis is not None:
            oprot.writeFieldBegin('beginTimeMillis', TType.I64, 7)
            oprot.writeI64(self.beginTimeMillis)
            oprot.writeFieldEnd()
        if self.endTimeMillis is not None:
            oprot.writeFieldBegin('endTimeMillis', TType.I64, 8)
            oprot.writeI64(self.endTimeMillis)
            oprot.writeFieldEnd()
        if self.createdTimeMillis is not None:
            oprot.writeFieldBegin('createdTimeMillis', TType.I64, 9)
            oprot.writeI64(self.createdTimeMillis)
            oprot.writeFieldEnd()
        if self.updatedTimeMillis is not None:
            oprot.writeFieldBegin('updatedTimeMillis', TType.I64, 10)
            oprot.writeI64(self.updatedTimeMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.contentId))
        value = (value * 31) ^ hash(make_hashable(self.category))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.defaultContent))
        value = (value * 31) ^ hash(make_hashable(self.optionalContents))
        value = (value * 31) ^ hash(make_hashable(self.keywords))
        value = (value * 31) ^ hash(make_hashable(self.beginTimeMillis))
        value = (value * 31) ^ hash(make_hashable(self.endTimeMillis))
        value = (value * 31) ^ hash(make_hashable(self.createdTimeMillis))
        value = (value * 31) ^ hash(make_hashable(self.updatedTimeMillis))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatEffectMetaContent(object):
    """
    Attributes:
     - url
     - checksum
    """
    def __init__(self, url=None, checksum=None):
        self.url = url
        self.checksum = checksum

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatEffectMetaContent')
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 1)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 2)
            oprot.writeString(self.checksum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.url))
        value = (value * 31) ^ hash(make_hashable(self.checksum))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AcceptChatInvitationByTicketRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - ticketId
    """
    def __init__(self, reqSeq=None, chatMid=None, ticketId=None):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.ticketId = ticketId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ticketId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AcceptChatInvitationByTicketRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.ticketId is not None:
            oprot.writeFieldBegin('ticketId', TType.STRING, 3)
            oprot.writeString(self.ticketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.ticketId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AcceptChatInvitationByTicketResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AcceptChatInvitationByTicketResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RestoreE2EEKeyBackupRequest(object):
    """
    Attributes:
     - restoreClaim
    """
    def __init__(self, restoreClaim=None):
        self.restoreClaim = restoreClaim

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.restoreClaim = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RestoreE2EEKeyBackupRequest')
        if self.restoreClaim is not None:
            oprot.writeFieldBegin('restoreClaim', TType.STRING, 1)
            oprot.writeBinary(self.restoreClaim)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.restoreClaim))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RestoreE2EEKeyBackupResponse(object):
    """
    Attributes:
     - recoveryKey
     - blobPayload
    """
    def __init__(self, recoveryKey=None, blobPayload=None):
        self.recoveryKey = recoveryKey
        self.blobPayload = blobPayload

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.recoveryKey = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.blobPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RestoreE2EEKeyBackupResponse')
        if self.recoveryKey is not None:
            oprot.writeFieldBegin('recoveryKey', TType.STRING, 1)
            oprot.writeBinary(self.recoveryKey)
            oprot.writeFieldEnd()
        if self.blobPayload is not None:
            oprot.writeFieldBegin('blobPayload', TType.STRING, 2)
            oprot.writeBinary(self.blobPayload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.recoveryKey))
        value = (value * 31) ^ hash(make_hashable(self.blobPayload))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageBoxListRequest(object):
    """
    Attributes:
     - minChatId
     - maxChatId
     - activeOnly
     - messageBoxCountLimit
     - withUnreadCount
     - lastMessagesPerMessageBoxCount
     - unreadOnly
    """
    def __init__(self, minChatId=None, maxChatId=None, activeOnly=None, messageBoxCountLimit=None, withUnreadCount=None, lastMessagesPerMessageBoxCount=None, unreadOnly=None):
        self.minChatId = minChatId
        self.maxChatId = maxChatId
        self.activeOnly = activeOnly
        self.messageBoxCountLimit = messageBoxCountLimit
        self.withUnreadCount = withUnreadCount
        self.lastMessagesPerMessageBoxCount = lastMessagesPerMessageBoxCount
        self.unreadOnly = unreadOnly

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.minChatId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.maxChatId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.activeOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.messageBoxCountLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.withUnreadCount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.lastMessagesPerMessageBoxCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.unreadOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageBoxListRequest')
        if self.minChatId is not None:
            oprot.writeFieldBegin('minChatId', TType.STRING, 1)
            oprot.writeString(self.minChatId)
            oprot.writeFieldEnd()
        if self.maxChatId is not None:
            oprot.writeFieldBegin('maxChatId', TType.STRING, 2)
            oprot.writeString(self.maxChatId)
            oprot.writeFieldEnd()
        if self.activeOnly is not None:
            oprot.writeFieldBegin('activeOnly', TType.BOOL, 3)
            oprot.writeBool(self.activeOnly)
            oprot.writeFieldEnd()
        if self.messageBoxCountLimit is not None:
            oprot.writeFieldBegin('messageBoxCountLimit', TType.I32, 4)
            oprot.writeI32(self.messageBoxCountLimit)
            oprot.writeFieldEnd()
        if self.withUnreadCount is not None:
            oprot.writeFieldBegin('withUnreadCount', TType.BOOL, 5)
            oprot.writeBool(self.withUnreadCount)
            oprot.writeFieldEnd()
        if self.lastMessagesPerMessageBoxCount is not None:
            oprot.writeFieldBegin('lastMessagesPerMessageBoxCount', TType.I32, 6)
            oprot.writeI32(self.lastMessagesPerMessageBoxCount)
            oprot.writeFieldEnd()
        if self.unreadOnly is not None:
            oprot.writeFieldBegin('unreadOnly', TType.BOOL, 7)
            oprot.writeBool(self.unreadOnly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.minChatId))
        value = (value * 31) ^ hash(make_hashable(self.maxChatId))
        value = (value * 31) ^ hash(make_hashable(self.activeOnly))
        value = (value * 31) ^ hash(make_hashable(self.messageBoxCountLimit))
        value = (value * 31) ^ hash(make_hashable(self.withUnreadCount))
        value = (value * 31) ^ hash(make_hashable(self.lastMessagesPerMessageBoxCount))
        value = (value * 31) ^ hash(make_hashable(self.unreadOnly))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageBoxList(object):
    """
    Attributes:
     - messageBoxes
     - hasNext
    """
    def __init__(self, messageBoxes=None, hasNext=None):
        self.messageBoxes = messageBoxes
        self.hasNext = hasNext

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.messageBoxes = []
                    (_, elem172) = iprot.readListBegin()
                    for _ in range(elem172):
                        elem173 = ExtendedMessageBox()
                        elem173.read(iprot)
                        self.messageBoxes.append(elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageBoxList')
        if self.messageBoxes is not None:
            oprot.writeFieldBegin('messageBoxes', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.messageBoxes))
            for elem174 in self.messageBoxes:
                elem174.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 2)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.messageBoxes))
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ExtendedMessageBox(object):
    """
    Attributes:
     - id
     - midType
     - lastDeliveredMessageId
     - lastSeenMessageId
     - unreadCount
     - lastMessages
     - lastRemovedMessageId
     - lastRemovedTime
     - hiddenAtMessageId
    """
    def __init__(self, id=None, midType=None, lastDeliveredMessageId=None, lastSeenMessageId=None, unreadCount=None, lastMessages=None, lastRemovedMessageId=None, lastRemovedTime=None, hiddenAtMessageId=None):
        self.id = id
        self.midType = midType
        self.lastDeliveredMessageId = lastDeliveredMessageId
        self.lastSeenMessageId = lastSeenMessageId
        self.unreadCount = unreadCount
        self.lastMessages = lastMessages
        self.lastRemovedMessageId = lastRemovedMessageId
        self.lastRemovedTime = lastRemovedTime
        self.hiddenAtMessageId = hiddenAtMessageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.midType = MidType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.lastDeliveredMessageId = MessageBoxV2MessageId()
                    self.lastDeliveredMessageId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.lastSeenMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.unreadCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.lastMessages = []
                    (_, elem175) = iprot.readListBegin()
                    for _ in range(elem175):
                        elem176 = Message()
                        elem176.read(iprot)
                        self.lastMessages.append(elem176)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.lastRemovedMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.lastRemovedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.hiddenAtMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ExtendedMessageBox')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.midType is not None:
            oprot.writeFieldBegin('midType', TType.I32, 2)
            oprot.writeI32(self.midType)
            oprot.writeFieldEnd()
        if self.lastDeliveredMessageId is not None:
            oprot.writeFieldBegin('lastDeliveredMessageId', TType.STRUCT, 4)
            self.lastDeliveredMessageId.write(oprot)
            oprot.writeFieldEnd()
        if self.lastSeenMessageId is not None:
            oprot.writeFieldBegin('lastSeenMessageId', TType.I64, 5)
            oprot.writeI64(self.lastSeenMessageId)
            oprot.writeFieldEnd()
        if self.unreadCount is not None:
            oprot.writeFieldBegin('unreadCount', TType.I64, 6)
            oprot.writeI64(self.unreadCount)
            oprot.writeFieldEnd()
        if self.lastMessages is not None:
            oprot.writeFieldBegin('lastMessages', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.lastMessages))
            for elem177 in self.lastMessages:
                elem177.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lastRemovedMessageId is not None:
            oprot.writeFieldBegin('lastRemovedMessageId', TType.I64, 8)
            oprot.writeI64(self.lastRemovedMessageId)
            oprot.writeFieldEnd()
        if self.lastRemovedTime is not None:
            oprot.writeFieldBegin('lastRemovedTime', TType.I64, 9)
            oprot.writeI64(self.lastRemovedTime)
            oprot.writeFieldEnd()
        if self.hiddenAtMessageId is not None:
            oprot.writeFieldBegin('hiddenAtMessageId', TType.I64, 10)
            oprot.writeI64(self.hiddenAtMessageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.midType))
        value = (value * 31) ^ hash(make_hashable(self.lastDeliveredMessageId))
        value = (value * 31) ^ hash(make_hashable(self.lastSeenMessageId))
        value = (value * 31) ^ hash(make_hashable(self.unreadCount))
        value = (value * 31) ^ hash(make_hashable(self.lastMessages))
        value = (value * 31) ^ hash(make_hashable(self.lastRemovedMessageId))
        value = (value * 31) ^ hash(make_hashable(self.lastRemovedTime))
        value = (value * 31) ^ hash(make_hashable(self.hiddenAtMessageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetE2EEKeyBackupInfoRequest(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetE2EEKeyBackupInfoRequest')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetE2EEKeyBackupInfoResponse(object):
    """
    Attributes:
     - blobHeaderHash
     - blobPayloadHash
     - missingKeyIds
     - startTimeMillis
     - endTimeMillis
    """
    def __init__(self, blobHeaderHash=None, blobPayloadHash=None, missingKeyIds=None, startTimeMillis=None, endTimeMillis=None):
        self.blobHeaderHash = blobHeaderHash
        self.blobPayloadHash = blobPayloadHash
        self.missingKeyIds = missingKeyIds
        self.startTimeMillis = startTimeMillis
        self.endTimeMillis = endTimeMillis

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.blobHeaderHash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.blobPayloadHash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.missingKeyIds = set()
                    (_, elem178) = iprot.readSetBegin()
                    for _ in range(elem178):
                        elem179 = iprot.readI32()
                        self.missingKeyIds.add(elem179)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.endTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetE2EEKeyBackupInfoResponse')
        if self.blobHeaderHash is not None:
            oprot.writeFieldBegin('blobHeaderHash', TType.STRING, 1)
            oprot.writeBinary(self.blobHeaderHash)
            oprot.writeFieldEnd()
        if self.blobPayloadHash is not None:
            oprot.writeFieldBegin('blobPayloadHash', TType.STRING, 2)
            oprot.writeBinary(self.blobPayloadHash)
            oprot.writeFieldEnd()
        if self.missingKeyIds is not None:
            oprot.writeFieldBegin('missingKeyIds', TType.SET, 3)
            oprot.writeSetBegin(TType.I32, len(self.missingKeyIds))
            for elem180 in self.missingKeyIds:
                oprot.writeI32(elem180)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.startTimeMillis is not None:
            oprot.writeFieldBegin('startTimeMillis', TType.I64, 4)
            oprot.writeI64(self.startTimeMillis)
            oprot.writeFieldEnd()
        if self.endTimeMillis is not None:
            oprot.writeFieldBegin('endTimeMillis', TType.I64, 5)
            oprot.writeI64(self.endTimeMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.blobHeaderHash))
        value = (value * 31) ^ hash(make_hashable(self.blobPayloadHash))
        value = (value * 31) ^ hash(make_hashable(self.missingKeyIds))
        value = (value * 31) ^ hash(make_hashable(self.startTimeMillis))
        value = (value * 31) ^ hash(make_hashable(self.endTimeMillis))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class E2EEPublicKey(object):
    """
    Attributes:
     - version
     - keyId
     - keyData
     - createdTime
    """
    def __init__(self, version=None, keyId=None, keyData=None, createdTime=None):
        self.version = version
        self.keyId = keyId
        self.keyData = keyData
        self.createdTime = createdTime

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.keyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.keyData = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('E2EEPublicKey')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 1)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.keyId is not None:
            oprot.writeFieldBegin('keyId', TType.I32, 2)
            oprot.writeI32(self.keyId)
            oprot.writeFieldEnd()
        if self.keyData is not None:
            oprot.writeFieldBegin('keyData', TType.STRING, 4)
            oprot.writeBinary(self.keyData)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.version))
        value = (value * 31) ^ hash(make_hashable(self.keyId))
        value = (value * 31) ^ hash(make_hashable(self.keyData))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetE2EEKeyBackupCertificatesRequest(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetE2EEKeyBackupCertificatesRequest')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetE2EEKeyBackupCertificatesResponse(object):
    """
    Attributes:
     - urlHashList
    """
    def __init__(self, urlHashList=None):
        self.urlHashList = urlHashList

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.urlHashList = []
                    (_, elem181) = iprot.readListBegin()
                    for _ in range(elem181):
                        elem182 = iprot.readString()
                        self.urlHashList.append(elem182)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetE2EEKeyBackupCertificatesResponse')
        if self.urlHashList is not None:
            oprot.writeFieldBegin('urlHashList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.urlHashList))
            for elem183 in self.urlHashList:
                oprot.writeString(elem183)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.urlHashList))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteE2EEKeyBackupRequest(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteE2EEKeyBackupRequest')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteE2EEKeyBackupResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteE2EEKeyBackupResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateE2EEKeyBackupRequest(object):
    """
    Attributes:
     - blobHeader
     - blobPayload
     - reason
    """
    def __init__(self, blobHeader=None, blobPayload=None, reason=None):
        self.blobHeader = blobHeader
        self.blobPayload = blobPayload
        self.reason = reason

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.blobHeader = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.blobPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.reason = Reason(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateE2EEKeyBackupRequest')
        if self.blobHeader is not None:
            oprot.writeFieldBegin('blobHeader', TType.STRING, 1)
            oprot.writeBinary(self.blobHeader)
            oprot.writeFieldEnd()
        if self.blobPayload is not None:
            oprot.writeFieldBegin('blobPayload', TType.STRING, 2)
            oprot.writeBinary(self.blobPayload)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.I32, 3)
            oprot.writeI32(self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.blobHeader))
        value = (value * 31) ^ hash(make_hashable(self.blobPayload))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateE2EEKeyBackupResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateE2EEKeyBackupResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Operation(object):
    """
    Attributes:
     - revision
     - createdTime
     - type
     - reqSeq
     - checksum
     - status
     - param1
     - param2
     - param3
     - message
    """
    def __init__(self, revision=None, createdTime=None, type=None, reqSeq=None, checksum=None, status=None, param1=None, param2=None, param3=None, message=None):
        self.revision = revision
        self.createdTime = createdTime
        self.type = type
        self.reqSeq = reqSeq
        self.checksum = checksum
        self.status = status
        self.param1 = param1
        self.param2 = param2
        self.param3 = param3
        self.message = message

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = OpType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = OpStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.param1 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.param2 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.param3 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.message = Message()
                    self.message.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Operation')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 4)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 5)
            oprot.writeString(self.checksum)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.param1 is not None:
            oprot.writeFieldBegin('param1', TType.STRING, 10)
            oprot.writeString(self.param1)
            oprot.writeFieldEnd()
        if self.param2 is not None:
            oprot.writeFieldBegin('param2', TType.STRING, 11)
            oprot.writeString(self.param2)
            oprot.writeFieldEnd()
        if self.param3 is not None:
            oprot.writeFieldBegin('param3', TType.STRING, 12)
            oprot.writeString(self.param3)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRUCT, 20)
            self.message.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.checksum))
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.param1))
        value = (value * 31) ^ hash(make_hashable(self.param2))
        value = (value * 31) ^ hash(make_hashable(self.param3))
        value = (value * 31) ^ hash(make_hashable(self.message))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CancelReactionRequest(object):
    """
    Attributes:
     - reqSeq
     - messageId
    """
    def __init__(self, reqSeq=None, messageId=None):
        self.reqSeq = reqSeq
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.messageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CancelReactionRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I64, 2)
            oprot.writeI64(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DetermineMediaMessageFlowRequest(object):
    """
    Attributes:
     - chatMid
    """
    def __init__(self, chatMid=None):
        self.chatMid = chatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DetermineMediaMessageFlowRequest')
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 1)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DetermineMediaMessageFlowResponse(object):
    """
    Attributes:
     - flowMap
     - cacheTtlMillis
    """
    def __init__(self, flowMap=None, cacheTtlMillis=None):
        self.flowMap = flowMap
        self.cacheTtlMillis = cacheTtlMillis

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.flowMap = {}
                    (_, _, elem184) = iprot.readMapBegin()
                    for _ in range(elem184):
                        elem186 = ContentType(iprot.readI32())
                        elem185 = FlowType(iprot.readI32())
                        self.flowMap[elem186] = elem185
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.cacheTtlMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DetermineMediaMessageFlowResponse')
        if self.flowMap is not None:
            oprot.writeFieldBegin('flowMap', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.flowMap))
            for elem188, elem187 in self.flowMap.items():
                oprot.writeI32(elem188)
                oprot.writeI32(elem187)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cacheTtlMillis is not None:
            oprot.writeFieldBegin('cacheTtlMillis', TType.I64, 2)
            oprot.writeI64(self.cacheTtlMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.flowMap))
        value = (value * 31) ^ hash(make_hashable(self.cacheTtlMillis))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InstantNews(object):
    """
    Attributes:
     - newsId
     - newsService
     - ttlMillis
     - category
     - categoryBgColor
     - categoryColor
     - title
     - url
     - image
    """
    def __init__(self, newsId=None, newsService=None, ttlMillis=None, category=None, categoryBgColor=None, categoryColor=None, title=None, url=None, image=None):
        self.newsId = newsId
        self.newsService = newsService
        self.ttlMillis = ttlMillis
        self.category = category
        self.categoryBgColor = categoryBgColor
        self.categoryColor = categoryColor
        self.title = title
        self.url = url
        self.image = image

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.newsId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newsService = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.ttlMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.category = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.categoryBgColor = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.categoryColor = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.image = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InstantNews')
        if self.newsId is not None:
            oprot.writeFieldBegin('newsId', TType.I64, 1)
            oprot.writeI64(self.newsId)
            oprot.writeFieldEnd()
        if self.newsService is not None:
            oprot.writeFieldBegin('newsService', TType.STRING, 2)
            oprot.writeString(self.newsService)
            oprot.writeFieldEnd()
        if self.ttlMillis is not None:
            oprot.writeFieldBegin('ttlMillis', TType.I64, 3)
            oprot.writeI64(self.ttlMillis)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.STRING, 4)
            oprot.writeString(self.category)
            oprot.writeFieldEnd()
        if self.categoryBgColor is not None:
            oprot.writeFieldBegin('categoryBgColor', TType.STRING, 5)
            oprot.writeString(self.categoryBgColor)
            oprot.writeFieldEnd()
        if self.categoryColor is not None:
            oprot.writeFieldBegin('categoryColor', TType.STRING, 6)
            oprot.writeString(self.categoryColor)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 7)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 8)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 9)
            oprot.writeString(self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.newsId))
        value = (value * 31) ^ hash(make_hashable(self.newsService))
        value = (value * 31) ^ hash(make_hashable(self.ttlMillis))
        value = (value * 31) ^ hash(make_hashable(self.category))
        value = (value * 31) ^ hash(make_hashable(self.categoryBgColor))
        value = (value * 31) ^ hash(make_hashable(self.categoryColor))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.url))
        value = (value * 31) ^ hash(make_hashable(self.image))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BulkFollowRequest(object):
    """
    Attributes:
     - followTargetMids
     - unfollowTargetMids
     - hasNext
    """
    def __init__(self, followTargetMids=None, unfollowTargetMids=None, hasNext=None):
        self.followTargetMids = followTargetMids
        self.unfollowTargetMids = unfollowTargetMids
        self.hasNext = hasNext

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.followTargetMids = set()
                    (_, elem189) = iprot.readSetBegin()
                    for _ in range(elem189):
                        elem190 = iprot.readString()
                        self.followTargetMids.add(elem190)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.unfollowTargetMids = set()
                    (_, elem191) = iprot.readSetBegin()
                    for _ in range(elem191):
                        elem192 = iprot.readString()
                        self.unfollowTargetMids.add(elem192)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BulkFollowRequest')
        if self.followTargetMids is not None:
            oprot.writeFieldBegin('followTargetMids', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.followTargetMids))
            for elem193 in self.followTargetMids:
                oprot.writeString(elem193)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.unfollowTargetMids is not None:
            oprot.writeFieldBegin('unfollowTargetMids', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.unfollowTargetMids))
            for elem194 in self.unfollowTargetMids:
                oprot.writeString(elem194)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 3)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.followTargetMids))
        value = (value * 31) ^ hash(make_hashable(self.unfollowTargetMids))
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BulkFollowResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BulkFollowResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SyncRequest(object):
    """
    Attributes:
     - lastRevision
     - count
     - lastGlobalRevision
     - lastIndividualRevision
     - fullSyncRequestReason
     - lastPartialFullSyncs
    """
    def __init__(self, lastRevision=None, count=None, lastGlobalRevision=None, lastIndividualRevision=None, fullSyncRequestReason=None, lastPartialFullSyncs=None):
        self.lastRevision = lastRevision
        self.count = count
        self.lastGlobalRevision = lastGlobalRevision
        self.lastIndividualRevision = lastIndividualRevision
        self.fullSyncRequestReason = fullSyncRequestReason
        self.lastPartialFullSyncs = lastPartialFullSyncs

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lastRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastGlobalRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.lastIndividualRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fullSyncRequestReason = FullSyncRequestReason(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.lastPartialFullSyncs = {}
                    (_, _, elem195) = iprot.readMapBegin()
                    for _ in range(elem195):
                        elem197 = LastPartialFullSyncs(iprot.readI32())
                        elem196 = iprot.readI64()
                        self.lastPartialFullSyncs[elem197] = elem196
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SyncRequest')
        if self.lastRevision is not None:
            oprot.writeFieldBegin('lastRevision', TType.I64, 1)
            oprot.writeI64(self.lastRevision)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.lastGlobalRevision is not None:
            oprot.writeFieldBegin('lastGlobalRevision', TType.I64, 3)
            oprot.writeI64(self.lastGlobalRevision)
            oprot.writeFieldEnd()
        if self.lastIndividualRevision is not None:
            oprot.writeFieldBegin('lastIndividualRevision', TType.I64, 4)
            oprot.writeI64(self.lastIndividualRevision)
            oprot.writeFieldEnd()
        if self.fullSyncRequestReason is not None:
            oprot.writeFieldBegin('fullSyncRequestReason', TType.I32, 5)
            oprot.writeI32(self.fullSyncRequestReason)
            oprot.writeFieldEnd()
        if self.lastPartialFullSyncs is not None:
            oprot.writeFieldBegin('lastPartialFullSyncs', TType.MAP, 6)
            oprot.writeMapBegin(TType.I32, TType.I64, len(self.lastPartialFullSyncs))
            for elem199, elem198 in self.lastPartialFullSyncs.items():
                oprot.writeI32(elem199)
                oprot.writeI64(elem198)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.lastRevision))
        value = (value * 31) ^ hash(make_hashable(self.count))
        value = (value * 31) ^ hash(make_hashable(self.lastGlobalRevision))
        value = (value * 31) ^ hash(make_hashable(self.lastIndividualRevision))
        value = (value * 31) ^ hash(make_hashable(self.fullSyncRequestReason))
        value = (value * 31) ^ hash(make_hashable(self.lastPartialFullSyncs))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SyncResponse(object):
    """
    Attributes:
     - operationResponse
     - fullSyncResponse
     - partialFullSyncResponse
    """
    def __init__(self, operationResponse=None, fullSyncResponse=None, partialFullSyncResponse=None):
        self.operationResponse = operationResponse
        self.fullSyncResponse = fullSyncResponse
        self.partialFullSyncResponse = partialFullSyncResponse

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationResponse = OperationResponse()
                    self.operationResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.fullSyncResponse = FullSyncResponse()
                    self.fullSyncResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.partialFullSyncResponse = PartialFullSyncResponse()
                    self.partialFullSyncResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SyncResponse')
        if self.operationResponse is not None:
            oprot.writeFieldBegin('operationResponse', TType.STRUCT, 1)
            self.operationResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.fullSyncResponse is not None:
            oprot.writeFieldBegin('fullSyncResponse', TType.STRUCT, 2)
            self.fullSyncResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.partialFullSyncResponse is not None:
            oprot.writeFieldBegin('partialFullSyncResponse', TType.STRUCT, 3)
            self.partialFullSyncResponse.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.operationResponse))
        value = (value * 31) ^ hash(make_hashable(self.fullSyncResponse))
        value = (value * 31) ^ hash(make_hashable(self.partialFullSyncResponse))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PartialFullSyncResponse(object):
    """
    Attributes:
     - targetCategories
    """
    def __init__(self, targetCategories=None):
        self.targetCategories = targetCategories

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.targetCategories = {}
                    (_, _, elem200) = iprot.readMapBegin()
                    for _ in range(elem200):
                        elem202 = LastPartialFullSyncs(iprot.readI32())
                        elem201 = iprot.readI64()
                        self.targetCategories[elem202] = elem201
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PartialFullSyncResponse')
        if self.targetCategories is not None:
            oprot.writeFieldBegin('targetCategories', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.I64, len(self.targetCategories))
            for elem204, elem203 in self.targetCategories.items():
                oprot.writeI32(elem204)
                oprot.writeI64(elem203)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.targetCategories))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class OperationResponse(object):
    """
    Attributes:
     - operations
     - hasMoreOps
     - globalEvents
     - individualEvents
    """
    def __init__(self, operations=None, hasMoreOps=None, globalEvents=None, individualEvents=None):
        self.operations = operations
        self.hasMoreOps = hasMoreOps
        self.globalEvents = globalEvents
        self.individualEvents = individualEvents

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.operations = []
                    (_, elem205) = iprot.readListBegin()
                    for _ in range(elem205):
                        elem206 = Operation()
                        elem206.read(iprot)
                        self.operations.append(elem206)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasMoreOps = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.globalEvents = TGlobalEvents()
                    self.globalEvents.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.individualEvents = TIndividualEvents()
                    self.individualEvents.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('OperationResponse')
        if self.operations is not None:
            oprot.writeFieldBegin('operations', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.operations))
            for elem207 in self.operations:
                elem207.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hasMoreOps is not None:
            oprot.writeFieldBegin('hasMoreOps', TType.BOOL, 2)
            oprot.writeBool(self.hasMoreOps)
            oprot.writeFieldEnd()
        if self.globalEvents is not None:
            oprot.writeFieldBegin('globalEvents', TType.STRUCT, 3)
            self.globalEvents.write(oprot)
            oprot.writeFieldEnd()
        if self.individualEvents is not None:
            oprot.writeFieldBegin('individualEvents', TType.STRUCT, 4)
            self.individualEvents.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.operations))
        value = (value * 31) ^ hash(make_hashable(self.hasMoreOps))
        value = (value * 31) ^ hash(make_hashable(self.globalEvents))
        value = (value * 31) ^ hash(make_hashable(self.individualEvents))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FullSyncResponse(object):
    """
    Attributes:
     - reasons
     - nextRevision
    """
    def __init__(self, reasons=None, nextRevision=None):
        self.reasons = reasons
        self.nextRevision = nextRevision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.reasons = set()
                    (_, elem208) = iprot.readSetBegin()
                    for _ in range(elem208):
                        elem209 = FullSyncReason(iprot.readI32())
                        self.reasons.add(elem209)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.nextRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FullSyncResponse')
        if self.reasons is not None:
            oprot.writeFieldBegin('reasons', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.reasons))
            for elem210 in self.reasons:
                oprot.writeI32(elem210)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.nextRevision is not None:
            oprot.writeFieldBegin('nextRevision', TType.I64, 2)
            oprot.writeI64(self.nextRevision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reasons))
        value = (value * 31) ^ hash(make_hashable(self.nextRevision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TGlobalEvents(object):
    """
    Attributes:
     - events
     - lastRevision
    """
    def __init__(self, events=None, lastRevision=None):
        self.events = events
        self.lastRevision = lastRevision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.events = {}
                    (_, _, elem211) = iprot.readMapBegin()
                    for _ in range(elem211):
                        elem213 = GlobalEventType(iprot.readI32())
                        elem212 = GlobalEvent()
                        elem212.read(iprot)
                        self.events[elem213] = elem212
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TGlobalEvents')
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.events))
            for elem215, elem214 in self.events.items():
                oprot.writeI32(elem215)
                elem214.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.lastRevision is not None:
            oprot.writeFieldBegin('lastRevision', TType.I64, 2)
            oprot.writeI64(self.lastRevision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.events))
        value = (value * 31) ^ hash(make_hashable(self.lastRevision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TIndividualEvents(object):
    """
    Attributes:
     - events
     - lastRevision
    """
    def __init__(self, events=None, lastRevision=None):
        self.events = events
        self.lastRevision = lastRevision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.events = set()
                    (_, elem216) = iprot.readSetBegin()
                    for _ in range(elem216):
                        elem217 = IndividualEventType(iprot.readI32())
                        self.events.add(elem217)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TIndividualEvents')
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.events))
            for elem218 in self.events:
                oprot.writeI32(elem218)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.lastRevision is not None:
            oprot.writeFieldBegin('lastRevision', TType.I64, 2)
            oprot.writeI64(self.lastRevision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.events))
        value = (value * 31) ^ hash(make_hashable(self.lastRevision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GlobalEvent(object):
    """
    Attributes:
     - type
     - minDelayInMinutes
     - maxDelayInMinutes
     - createTimeMillis
     - maxDelayHardLimit
    """
    def __init__(self, type=None, minDelayInMinutes=None, maxDelayInMinutes=None, createTimeMillis=None, maxDelayHardLimit=None):
        self.type = type
        self.minDelayInMinutes = minDelayInMinutes
        self.maxDelayInMinutes = maxDelayInMinutes
        self.createTimeMillis = createTimeMillis
        self.maxDelayHardLimit = maxDelayHardLimit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = GlobalEventType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.minDelayInMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.maxDelayInMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.createTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.maxDelayHardLimit = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GlobalEvent')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.minDelayInMinutes is not None:
            oprot.writeFieldBegin('minDelayInMinutes', TType.I32, 2)
            oprot.writeI32(self.minDelayInMinutes)
            oprot.writeFieldEnd()
        if self.maxDelayInMinutes is not None:
            oprot.writeFieldBegin('maxDelayInMinutes', TType.I32, 3)
            oprot.writeI32(self.maxDelayInMinutes)
            oprot.writeFieldEnd()
        if self.createTimeMillis is not None:
            oprot.writeFieldBegin('createTimeMillis', TType.I64, 4)
            oprot.writeI64(self.createTimeMillis)
            oprot.writeFieldEnd()
        if self.maxDelayHardLimit is not None:
            oprot.writeFieldBegin('maxDelayHardLimit', TType.BOOL, 5)
            oprot.writeBool(self.maxDelayHardLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.minDelayInMinutes))
        value = (value * 31) ^ hash(make_hashable(self.maxDelayInMinutes))
        value = (value * 31) ^ hash(make_hashable(self.createTimeMillis))
        value = (value * 31) ^ hash(make_hashable(self.maxDelayHardLimit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RejectChatInvitationRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
    """
    def __init__(self, reqSeq=None, chatMid=None):
        self.reqSeq = reqSeq
        self.chatMid = chatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RejectChatInvitationRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RejectChatInvitationResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RejectChatInvitationResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteOtherFromChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - targetUserMids
    """
    def __init__(self, reqSeq=None, chatMid=None, targetUserMids=None):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.targetUserMids = targetUserMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_, elem219) = iprot.readSetBegin()
                    for _ in range(elem219):
                        elem220 = iprot.readString()
                        self.targetUserMids.add(elem220)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteOtherFromChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for elem221 in self.targetUserMids:
                oprot.writeString(elem221)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.targetUserMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteOtherFromChatResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteOtherFromChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReissueChatTicketRequest(object):
    """
    Attributes:
     - ReissueChatTicketRequest
     - groupMid
    """
    def __init__(self, ReissueChatTicketRequest=None, groupMid=None):
        self.ReissueChatTicketRequest = ReissueChatTicketRequest
        self.groupMid = groupMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ReissueChatTicketRequest = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.groupMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReissueChatTicketRequest')
        if self.ReissueChatTicketRequest is not None:
            oprot.writeFieldBegin('ReissueChatTicketRequest', TType.I32, 1)
            oprot.writeI32(self.ReissueChatTicketRequest)
            oprot.writeFieldEnd()
        if self.groupMid is not None:
            oprot.writeFieldBegin('groupMid', TType.STRING, 2)
            oprot.writeString(self.groupMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.ReissueChatTicketRequest))
        value = (value * 31) ^ hash(make_hashable(self.groupMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReissueChatTicketResponse(object):
    """
    Attributes:
     - ticketId
    """
    def __init__(self, ticketId=None):
        self.ticketId = ticketId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ticketId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReissueChatTicketResponse')
        if self.ticketId is not None:
            oprot.writeFieldBegin('ticketId', TType.STRING, 1)
            oprot.writeString(self.ticketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.ticketId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerificationSessionData(object):
    """
    Attributes:
     - sessionId
     - method
     - callback
     - normalizedPhone
     - countryCode
     - nationalSignificantNumber
     - availableVerificationMethods
     - callerIdMask
    """
    def __init__(self, sessionId=None, method=None, callback=None, normalizedPhone=None, countryCode=None, nationalSignificantNumber=None, availableVerificationMethods=None, callerIdMask=None):
        self.sessionId = sessionId
        self.method = method
        self.callback = callback
        self.normalizedPhone = normalizedPhone
        self.countryCode = countryCode
        self.nationalSignificantNumber = nationalSignificantNumber
        self.availableVerificationMethods = availableVerificationMethods
        self.callerIdMask = callerIdMask

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.method = VerificationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.callback = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.normalizedPhone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.nationalSignificantNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.availableVerificationMethods = []
                    (_, elem222) = iprot.readListBegin()
                    for _ in range(elem222):
                        elem223 = VerificationType(iprot.readI32())
                        self.availableVerificationMethods.append(elem223)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.callerIdMask = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerificationSessionData')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 1)
            oprot.writeString(self.sessionId)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 2)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.callback is not None:
            oprot.writeFieldBegin('callback', TType.STRING, 3)
            oprot.writeString(self.callback)
            oprot.writeFieldEnd()
        if self.normalizedPhone is not None:
            oprot.writeFieldBegin('normalizedPhone', TType.STRING, 4)
            oprot.writeString(self.normalizedPhone)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 5)
            oprot.writeString(self.countryCode)
            oprot.writeFieldEnd()
        if self.nationalSignificantNumber is not None:
            oprot.writeFieldBegin('nationalSignificantNumber', TType.STRING, 6)
            oprot.writeString(self.nationalSignificantNumber)
            oprot.writeFieldEnd()
        if self.availableVerificationMethods is not None:
            oprot.writeFieldBegin('availableVerificationMethods', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.availableVerificationMethods))
            for elem224 in self.availableVerificationMethods:
                oprot.writeI32(elem224)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.callerIdMask is not None:
            oprot.writeFieldBegin('callerIdMask', TType.STRING, 8)
            oprot.writeString(self.callerIdMask)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.sessionId))
        value = (value * 31) ^ hash(make_hashable(self.method))
        value = (value * 31) ^ hash(make_hashable(self.callback))
        value = (value * 31) ^ hash(make_hashable(self.normalizedPhone))
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        value = (value * 31) ^ hash(make_hashable(self.nationalSignificantNumber))
        value = (value * 31) ^ hash(make_hashable(self.availableVerificationMethods))
        value = (value * 31) ^ hash(make_hashable(self.callerIdMask))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TokenV3IssueResult(object):
    """
    Attributes:
     - accessToken
     - refreshToken
     - durationUntilRefreshInSec
     - refreshApiRetryPolicy
     - loginSessionId
     - tokenIssueTimeEpochSec
    """
    def __init__(self, accessToken=None, refreshToken=None, durationUntilRefreshInSec=None, refreshApiRetryPolicy=None, loginSessionId=None, tokenIssueTimeEpochSec=None):
        self.accessToken = accessToken
        self.refreshToken = refreshToken
        self.durationUntilRefreshInSec = durationUntilRefreshInSec
        self.refreshApiRetryPolicy = refreshApiRetryPolicy
        self.loginSessionId = loginSessionId
        self.tokenIssueTimeEpochSec = tokenIssueTimeEpochSec

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.refreshToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.durationUntilRefreshInSec = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.refreshApiRetryPolicy = RefreshApiRetryPolicy()
                    self.refreshApiRetryPolicy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.loginSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.tokenIssueTimeEpochSec = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TokenV3IssueResult')
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 1)
            oprot.writeString(self.accessToken)
            oprot.writeFieldEnd()
        if self.refreshToken is not None:
            oprot.writeFieldBegin('refreshToken', TType.STRING, 2)
            oprot.writeString(self.refreshToken)
            oprot.writeFieldEnd()
        if self.durationUntilRefreshInSec is not None:
            oprot.writeFieldBegin('durationUntilRefreshInSec', TType.I64, 3)
            oprot.writeI64(self.durationUntilRefreshInSec)
            oprot.writeFieldEnd()
        if self.refreshApiRetryPolicy is not None:
            oprot.writeFieldBegin('refreshApiRetryPolicy', TType.STRUCT, 4)
            self.refreshApiRetryPolicy.write(oprot)
            oprot.writeFieldEnd()
        if self.loginSessionId is not None:
            oprot.writeFieldBegin('loginSessionId', TType.STRING, 5)
            oprot.writeString(self.loginSessionId)
            oprot.writeFieldEnd()
        if self.tokenIssueTimeEpochSec is not None:
            oprot.writeFieldBegin('tokenIssueTimeEpochSec', TType.I64, 6)
            oprot.writeI64(self.tokenIssueTimeEpochSec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.accessToken))
        value = (value * 31) ^ hash(make_hashable(self.refreshToken))
        value = (value * 31) ^ hash(make_hashable(self.durationUntilRefreshInSec))
        value = (value * 31) ^ hash(make_hashable(self.refreshApiRetryPolicy))
        value = (value * 31) ^ hash(make_hashable(self.loginSessionId))
        value = (value * 31) ^ hash(make_hashable(self.tokenIssueTimeEpochSec))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LoginRequest(object):
    """
    Attributes:
     - type
     - identityProvider
     - identifier
     - password
     - keepLoggedIn
     - accessLocation
     - systemName
     - certificate
     - verifier
     - secret
     - e2eeVersion
     - modelName
    """
    def __init__(self, type=None, identityProvider=None, identifier=None, password=None, keepLoggedIn=None, accessLocation=None, systemName=None, certificate=None, verifier=None, secret=None, e2eeVersion=None, modelName=None):
        self.type = type
        self.identityProvider = identityProvider
        self.identifier = identifier
        self.password = password
        self.keepLoggedIn = keepLoggedIn
        self.accessLocation = accessLocation
        self.systemName = systemName
        self.certificate = certificate
        self.verifier = verifier
        self.secret = secret
        self.e2eeVersion = e2eeVersion
        self.modelName = modelName

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = LoginType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.identityProvider = IdentityProvider(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.identifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.keepLoggedIn = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.accessLocation = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.secret = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.e2eeVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.modelName = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LoginRequest')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 2)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.identifier is not None:
            oprot.writeFieldBegin('identifier', TType.STRING, 3)
            oprot.writeString(self.identifier)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password)
            oprot.writeFieldEnd()
        if self.keepLoggedIn is not None:
            oprot.writeFieldBegin('keepLoggedIn', TType.BOOL, 5)
            oprot.writeBool(self.keepLoggedIn)
            oprot.writeFieldEnd()
        if self.accessLocation is not None:
            oprot.writeFieldBegin('accessLocation', TType.STRING, 6)
            oprot.writeString(self.accessLocation)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 7)
            oprot.writeString(self.systemName)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 8)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 9)
            oprot.writeString(self.verifier)
            oprot.writeFieldEnd()
        if self.secret is not None:
            oprot.writeFieldBegin('secret', TType.STRING, 10)
            oprot.writeBinary(self.secret)
            oprot.writeFieldEnd()
        if self.e2eeVersion is not None:
            oprot.writeFieldBegin('e2eeVersion', TType.I32, 11)
            oprot.writeI32(self.e2eeVersion)
            oprot.writeFieldEnd()
        if self.modelName is not None:
            oprot.writeFieldBegin('modelName', TType.STRING, 12)
            oprot.writeString(self.modelName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.identityProvider))
        value = (value * 31) ^ hash(make_hashable(self.identifier))
        value = (value * 31) ^ hash(make_hashable(self.password))
        value = (value * 31) ^ hash(make_hashable(self.keepLoggedIn))
        value = (value * 31) ^ hash(make_hashable(self.accessLocation))
        value = (value * 31) ^ hash(make_hashable(self.systemName))
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        value = (value * 31) ^ hash(make_hashable(self.verifier))
        value = (value * 31) ^ hash(make_hashable(self.secret))
        value = (value * 31) ^ hash(make_hashable(self.e2eeVersion))
        value = (value * 31) ^ hash(make_hashable(self.modelName))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LoginResult(object):
    """
    Attributes:
     - authToken
     - certificate
     - verifier
     - pinCode
     - type
     - lastPrimaryBindTime
     - displayMessage
     - sessionForSMSConfirm
     - tokenV3IssueResult
     - mid
    """
    def __init__(self, authToken=None, certificate=None, verifier=None, pinCode=None, type=None, lastPrimaryBindTime=None, displayMessage=None, sessionForSMSConfirm=None, tokenV3IssueResult=None, mid=None):
        self.authToken = authToken
        self.certificate = certificate
        self.verifier = verifier
        self.pinCode = pinCode
        self.type = type
        self.lastPrimaryBindTime = lastPrimaryBindTime
        self.displayMessage = displayMessage
        self.sessionForSMSConfirm = sessionForSMSConfirm
        self.tokenV3IssueResult = tokenV3IssueResult
        self.mid = mid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.pinCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = LoginResultType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.lastPrimaryBindTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.displayMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.sessionForSMSConfirm = VerificationSessionData()
                    self.sessionForSMSConfirm.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.tokenV3IssueResult = TokenV3IssueResult()
                    self.tokenV3IssueResult.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LoginResult')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 2)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 3)
            oprot.writeString(self.verifier)
            oprot.writeFieldEnd()
        if self.pinCode is not None:
            oprot.writeFieldBegin('pinCode', TType.STRING, 4)
            oprot.writeString(self.pinCode)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.lastPrimaryBindTime is not None:
            oprot.writeFieldBegin('lastPrimaryBindTime', TType.I64, 6)
            oprot.writeI64(self.lastPrimaryBindTime)
            oprot.writeFieldEnd()
        if self.displayMessage is not None:
            oprot.writeFieldBegin('displayMessage', TType.STRING, 7)
            oprot.writeString(self.displayMessage)
            oprot.writeFieldEnd()
        if self.sessionForSMSConfirm is not None:
            oprot.writeFieldBegin('sessionForSMSConfirm', TType.STRUCT, 8)
            self.sessionForSMSConfirm.write(oprot)
            oprot.writeFieldEnd()
        if self.tokenV3IssueResult is not None:
            oprot.writeFieldBegin('tokenV3IssueResult', TType.STRUCT, 9)
            self.tokenV3IssueResult.write(oprot)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 10)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authToken))
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        value = (value * 31) ^ hash(make_hashable(self.verifier))
        value = (value * 31) ^ hash(make_hashable(self.pinCode))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.lastPrimaryBindTime))
        value = (value * 31) ^ hash(make_hashable(self.displayMessage))
        value = (value * 31) ^ hash(make_hashable(self.sessionForSMSConfirm))
        value = (value * 31) ^ hash(make_hashable(self.tokenV3IssueResult))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RSAKey(object):
    """
    Attributes:
     - keynm
     - nvalue
     - evalue
     - sessionKey
    """
    def __init__(self, keynm=None, nvalue=None, evalue=None, sessionKey=None):
        self.keynm = keynm
        self.nvalue = nvalue
        self.evalue = evalue
        self.sessionKey = sessionKey

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keynm = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nvalue = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.evalue = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sessionKey = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RSAKey')
        if self.keynm is not None:
            oprot.writeFieldBegin('keynm', TType.STRING, 1)
            oprot.writeString(self.keynm)
            oprot.writeFieldEnd()
        if self.nvalue is not None:
            oprot.writeFieldBegin('nvalue', TType.STRING, 2)
            oprot.writeString(self.nvalue)
            oprot.writeFieldEnd()
        if self.evalue is not None:
            oprot.writeFieldBegin('evalue', TType.STRING, 3)
            oprot.writeString(self.evalue)
            oprot.writeFieldEnd()
        if self.sessionKey is not None:
            oprot.writeFieldBegin('sessionKey', TType.STRING, 4)
            oprot.writeString(self.sessionKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.keynm))
        value = (value * 31) ^ hash(make_hashable(self.nvalue))
        value = (value * 31) ^ hash(make_hashable(self.evalue))
        value = (value * 31) ^ hash(make_hashable(self.sessionKey))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AuthSessionRequest(object):
    """
    Attributes:
     - metaData
    """
    def __init__(self, metaData=None):
        self.metaData = metaData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem225) = iprot.readMapBegin()
                    for _ in range(elem225):
                        elem227 = iprot.readString()
                        elem226 = iprot.readString()
                        self.metaData[elem227] = elem226
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AuthSessionRequest')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem229, elem228 in self.metaData.items():
                oprot.writeString(elem229)
                oprot.writeString(elem228)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class IdentifierConfirmationRequest(object):
    """
    Attributes:
     - metaData
     - forceRegistration
     - verificationCode
    """
    def __init__(self, metaData=None, forceRegistration=None, verificationCode=None):
        self.metaData = metaData
        self.forceRegistration = forceRegistration
        self.verificationCode = verificationCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem230) = iprot.readMapBegin()
                    for _ in range(elem230):
                        elem232 = iprot.readString()
                        elem231 = iprot.readString()
                        self.metaData[elem232] = elem231
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.forceRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.verificationCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('IdentifierConfirmationRequest')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem234, elem233 in self.metaData.items():
                oprot.writeString(elem234)
                oprot.writeString(elem233)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.forceRegistration is not None:
            oprot.writeFieldBegin('forceRegistration', TType.BOOL, 2)
            oprot.writeBool(self.forceRegistration)
            oprot.writeFieldEnd()
        if self.verificationCode is not None:
            oprot.writeFieldBegin('verificationCode', TType.STRING, 3)
            oprot.writeString(self.verificationCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        value = (value * 31) ^ hash(make_hashable(self.forceRegistration))
        value = (value * 31) ^ hash(make_hashable(self.verificationCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class IdentityCredentialRequest(object):
    """
    Attributes:
     - metaData
     - identityProvider
     - cipherKeyId
     - cipherText
     - confirmationRequest
    """
    def __init__(self, metaData=None, identityProvider=None, cipherKeyId=None, cipherText=None, confirmationRequest=None):
        self.metaData = metaData
        self.identityProvider = identityProvider
        self.cipherKeyId = cipherKeyId
        self.cipherText = cipherText
        self.confirmationRequest = confirmationRequest

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem235) = iprot.readMapBegin()
                    for _ in range(elem235):
                        elem237 = iprot.readString()
                        elem236 = iprot.readString()
                        self.metaData[elem237] = elem236
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.identityProvider = IdentityProvider(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cipherKeyId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cipherText = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.confirmationRequest = IdentifierConfirmationRequest()
                    self.confirmationRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('IdentityCredentialRequest')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem239, elem238 in self.metaData.items():
                oprot.writeString(elem239)
                oprot.writeString(elem238)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 2)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.cipherKeyId is not None:
            oprot.writeFieldBegin('cipherKeyId', TType.STRING, 3)
            oprot.writeString(self.cipherKeyId)
            oprot.writeFieldEnd()
        if self.cipherText is not None:
            oprot.writeFieldBegin('cipherText', TType.STRING, 4)
            oprot.writeString(self.cipherText)
            oprot.writeFieldEnd()
        if self.confirmationRequest is not None:
            oprot.writeFieldBegin('confirmationRequest', TType.STRUCT, 5)
            self.confirmationRequest.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        value = (value * 31) ^ hash(make_hashable(self.identityProvider))
        value = (value * 31) ^ hash(make_hashable(self.cipherKeyId))
        value = (value * 31) ^ hash(make_hashable(self.cipherText))
        value = (value * 31) ^ hash(make_hashable(self.confirmationRequest))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class IdentityCredentialResponse(object):
    """
    Attributes:
     - metaData
     - responseType
     - confirmationVerifier
     - timeoutInSeconds
    """
    def __init__(self, metaData=None, responseType=None, confirmationVerifier=None, timeoutInSeconds=None):
        self.metaData = metaData
        self.responseType = responseType
        self.confirmationVerifier = confirmationVerifier
        self.timeoutInSeconds = timeoutInSeconds

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem240) = iprot.readMapBegin()
                    for _ in range(elem240):
                        elem242 = iprot.readString()
                        elem241 = iprot.readString()
                        self.metaData[elem242] = elem241
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.responseType = IdentityCredentialResponseType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.confirmationVerifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timeoutInSeconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('IdentityCredentialResponse')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem244, elem243 in self.metaData.items():
                oprot.writeString(elem244)
                oprot.writeString(elem243)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.I32, 2)
            oprot.writeI32(self.responseType)
            oprot.writeFieldEnd()
        if self.confirmationVerifier is not None:
            oprot.writeFieldBegin('confirmationVerifier', TType.STRING, 3)
            oprot.writeString(self.confirmationVerifier)
            oprot.writeFieldEnd()
        if self.timeoutInSeconds is not None:
            oprot.writeFieldBegin('timeoutInSeconds', TType.I64, 4)
            oprot.writeI64(self.timeoutInSeconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        value = (value * 31) ^ hash(make_hashable(self.responseType))
        value = (value * 31) ^ hash(make_hashable(self.confirmationVerifier))
        value = (value * 31) ^ hash(make_hashable(self.timeoutInSeconds))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AuthKeyExchangeRequest(object):
    """
    Attributes:
     - authKeyVersion
     - publicKey
     - nonce
    """
    def __init__(self, authKeyVersion=None, publicKey=None, nonce=None):
        self.authKeyVersion = authKeyVersion
        self.publicKey = publicKey
        self.nonce = nonce

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.authKeyVersion = AuthKeyVersion(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nonce = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AuthKeyExchangeRequest')
        if self.authKeyVersion is not None:
            oprot.writeFieldBegin('authKeyVersion', TType.I32, 1)
            oprot.writeI32(self.authKeyVersion)
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 2)
            oprot.writeString(self.publicKey)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.STRING, 3)
            oprot.writeString(self.nonce)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authKeyVersion))
        value = (value * 31) ^ hash(make_hashable(self.publicKey))
        value = (value * 31) ^ hash(make_hashable(self.nonce))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AuthKeyExchangeResponse(object):
    """
    Attributes:
     - publicKey
     - nonce
    """
    def __init__(self, publicKey=None, nonce=None):
        self.publicKey = publicKey
        self.nonce = nonce

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nonce = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AuthKeyExchangeResponse')
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 1)
            oprot.writeString(self.publicKey)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.STRING, 2)
            oprot.writeString(self.nonce)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.publicKey))
        value = (value * 31) ^ hash(make_hashable(self.nonce))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SecurityCenterResult(object):
    """
    Attributes:
     - uri
     - token
     - cookiePath
     - skip
    """
    def __init__(self, uri=None, token=None, cookiePath=None, skip=None):
        self.uri = uri
        self.token = token
        self.cookiePath = cookiePath
        self.skip = skip

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uri = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cookiePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.skip = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SecurityCenterResult')
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 1)
            oprot.writeString(self.uri)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.cookiePath is not None:
            oprot.writeFieldBegin('cookiePath', TType.STRING, 3)
            oprot.writeString(self.cookiePath)
            oprot.writeFieldEnd()
        if self.skip is not None:
            oprot.writeFieldBegin('skip', TType.BOOL, 4)
            oprot.writeBool(self.skip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.uri))
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.cookiePath))
        value = (value * 31) ^ hash(make_hashable(self.skip))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AuthLoginRequest(object):
    """
    Attributes:
     - authLoginVersion
     - metaData
     - cipherText
    """
    def __init__(self, authLoginVersion=None, metaData=None, cipherText=None):
        self.authLoginVersion = authLoginVersion
        self.metaData = metaData
        self.cipherText = cipherText

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.authLoginVersion = AuthLoginVersion(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem245) = iprot.readMapBegin()
                    for _ in range(elem245):
                        elem247 = iprot.readString()
                        elem246 = iprot.readString()
                        self.metaData[elem247] = elem246
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cipherText = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AuthLoginRequest')
        if self.authLoginVersion is not None:
            oprot.writeFieldBegin('authLoginVersion', TType.I32, 1)
            oprot.writeI32(self.authLoginVersion)
            oprot.writeFieldEnd()
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem249, elem248 in self.metaData.items():
                oprot.writeString(elem249)
                oprot.writeString(elem248)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cipherText is not None:
            oprot.writeFieldBegin('cipherText', TType.STRING, 3)
            oprot.writeString(self.cipherText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authLoginVersion))
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        value = (value * 31) ^ hash(make_hashable(self.cipherText))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AuthLoginResponse(object):
    """
    Attributes:
     - metaData
     - cipherText
    """
    def __init__(self, metaData=None, cipherText=None):
        self.metaData = metaData
        self.cipherText = cipherText

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem250) = iprot.readMapBegin()
                    for _ in range(elem250):
                        elem252 = iprot.readString()
                        elem251 = iprot.readString()
                        self.metaData[elem252] = elem251
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cipherText = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AuthLoginResponse')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem254, elem253 in self.metaData.items():
                oprot.writeString(elem254)
                oprot.writeString(elem253)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cipherText is not None:
            oprot.writeFieldBegin('cipherText', TType.STRING, 2)
            oprot.writeString(self.cipherText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        value = (value * 31) ^ hash(make_hashable(self.cipherText))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class IssueV3TokenForPrimaryRequest(object):
    """
    Attributes:
     - udid
     - systemDisplayName
     - modelName
    """
    def __init__(self, udid=None, systemDisplayName=None, modelName=None):
        self.udid = udid
        self.systemDisplayName = systemDisplayName
        self.modelName = modelName

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.udid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemDisplayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.modelName = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('IssueV3TokenForPrimaryRequest')
        if self.udid is not None:
            oprot.writeFieldBegin('udid', TType.STRING, 1)
            oprot.writeString(self.udid)
            oprot.writeFieldEnd()
        if self.systemDisplayName is not None:
            oprot.writeFieldBegin('systemDisplayName', TType.STRING, 2)
            oprot.writeString(self.systemDisplayName)
            oprot.writeFieldEnd()
        if self.modelName is not None:
            oprot.writeFieldBegin('modelName', TType.STRING, 3)
            oprot.writeString(self.modelName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.udid))
        value = (value * 31) ^ hash(make_hashable(self.systemDisplayName))
        value = (value * 31) ^ hash(make_hashable(self.modelName))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class IssueV3TokenForPrimaryResponse(object):
    """
    Attributes:
     - accessToken
     - refreshToken
     - durationUntilRefreshInSec
     - refreshApiRetryPolicy
     - loginSessionId
     - tokenIssueTimeEpochSec
     - mid
    """
    def __init__(self, accessToken=None, refreshToken=None, durationUntilRefreshInSec=None, refreshApiRetryPolicy=None, loginSessionId=None, tokenIssueTimeEpochSec=None, mid=None):
        self.accessToken = accessToken
        self.refreshToken = refreshToken
        self.durationUntilRefreshInSec = durationUntilRefreshInSec
        self.refreshApiRetryPolicy = refreshApiRetryPolicy
        self.loginSessionId = loginSessionId
        self.tokenIssueTimeEpochSec = tokenIssueTimeEpochSec
        self.mid = mid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.refreshToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.durationUntilRefreshInSec = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.refreshApiRetryPolicy = RefreshApiRetryPolicy()
                    self.refreshApiRetryPolicy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.loginSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.tokenIssueTimeEpochSec = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('IssueV3TokenForPrimaryResponse')
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 1)
            oprot.writeString(self.accessToken)
            oprot.writeFieldEnd()
        if self.refreshToken is not None:
            oprot.writeFieldBegin('refreshToken', TType.STRING, 2)
            oprot.writeString(self.refreshToken)
            oprot.writeFieldEnd()
        if self.durationUntilRefreshInSec is not None:
            oprot.writeFieldBegin('durationUntilRefreshInSec', TType.I64, 3)
            oprot.writeI64(self.durationUntilRefreshInSec)
            oprot.writeFieldEnd()
        if self.refreshApiRetryPolicy is not None:
            oprot.writeFieldBegin('refreshApiRetryPolicy', TType.STRUCT, 4)
            self.refreshApiRetryPolicy.write(oprot)
            oprot.writeFieldEnd()
        if self.loginSessionId is not None:
            oprot.writeFieldBegin('loginSessionId', TType.STRING, 5)
            oprot.writeString(self.loginSessionId)
            oprot.writeFieldEnd()
        if self.tokenIssueTimeEpochSec is not None:
            oprot.writeFieldBegin('tokenIssueTimeEpochSec', TType.I64, 6)
            oprot.writeI64(self.tokenIssueTimeEpochSec)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 7)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.accessToken))
        value = (value * 31) ^ hash(make_hashable(self.refreshToken))
        value = (value * 31) ^ hash(make_hashable(self.durationUntilRefreshInSec))
        value = (value * 31) ^ hash(make_hashable(self.refreshApiRetryPolicy))
        value = (value * 31) ^ hash(make_hashable(self.loginSessionId))
        value = (value * 31) ^ hash(make_hashable(self.tokenIssueTimeEpochSec))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AgeCheckRequestResult(object):
    """
    Attributes:
     - authUrl
     - sessionId
    """
    def __init__(self, authUrl=None, sessionId=None):
        self.authUrl = authUrl
        self.sessionId = sessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AgeCheckRequestResult')
        if self.authUrl is not None:
            oprot.writeFieldBegin('authUrl', TType.STRING, 1)
            oprot.writeString(self.authUrl)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 2)
            oprot.writeString(self.sessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authUrl))
        value = (value * 31) ^ hash(make_hashable(self.sessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RetrieveRequestTokenWithDocomoV2Request(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RetrieveRequestTokenWithDocomoV2Request')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RetrieveRequestTokenWithDocomoV2Response(object):
    """
    Attributes:
     - loginRedirectUrl
    """
    def __init__(self, loginRedirectUrl=None):
        self.loginRedirectUrl = loginRedirectUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.loginRedirectUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RetrieveRequestTokenWithDocomoV2Response')
        if self.loginRedirectUrl is not None:
            oprot.writeFieldBegin('loginRedirectUrl', TType.STRING, 1)
            oprot.writeString(self.loginRedirectUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.loginRedirectUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckUserAgeAfterApprovalWithDocomoV2Request(object):
    """
    Attributes:
     - accessToken
     - agprm
    """
    def __init__(self, accessToken=None, agprm=None):
        self.accessToken = accessToken
        self.agprm = agprm

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.agprm = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckUserAgeAfterApprovalWithDocomoV2Request')
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 1)
            oprot.writeString(self.accessToken)
            oprot.writeFieldEnd()
        if self.agprm is not None:
            oprot.writeFieldBegin('agprm', TType.STRING, 2)
            oprot.writeString(self.agprm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.accessToken))
        value = (value * 31) ^ hash(make_hashable(self.agprm))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckUserAgeAfterApprovalWithDocomoV2Response(object):
    """
    Attributes:
     - userAgeType
    """
    def __init__(self, userAgeType=None):
        self.userAgeType = userAgeType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userAgeType = UserAge(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckUserAgeAfterApprovalWithDocomoV2Response')
        if self.userAgeType is not None:
            oprot.writeFieldBegin('userAgeType', TType.I32, 1)
            oprot.writeI32(self.userAgeType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.userAgeType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckUserAgeWithDocomoV2Request(object):
    """
    Attributes:
     - authCode
    """
    def __init__(self, authCode=None):
        self.authCode = authCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckUserAgeWithDocomoV2Request')
        if self.authCode is not None:
            oprot.writeFieldBegin('authCode', TType.STRING, 1)
            oprot.writeString(self.authCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckUserAgeWithDocomoV2Response(object):
    """
    Attributes:
     - responseType
     - userAgeType
     - approvalRedirectUrl
     - accessToken
    """
    def __init__(self, responseType=None, userAgeType=None, approvalRedirectUrl=None, accessToken=None):
        self.responseType = responseType
        self.userAgeType = userAgeType
        self.approvalRedirectUrl = approvalRedirectUrl
        self.accessToken = accessToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.responseType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userAgeType = UserAge(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.approvalRedirectUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckUserAgeWithDocomoV2Response')
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.I32, 1)
            oprot.writeI32(self.responseType)
            oprot.writeFieldEnd()
        if self.userAgeType is not None:
            oprot.writeFieldBegin('userAgeType', TType.I32, 2)
            oprot.writeI32(self.userAgeType)
            oprot.writeFieldEnd()
        if self.approvalRedirectUrl is not None:
            oprot.writeFieldBegin('approvalRedirectUrl', TType.STRING, 3)
            oprot.writeString(self.approvalRedirectUrl)
            oprot.writeFieldEnd()
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 4)
            oprot.writeString(self.accessToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.responseType))
        value = (value * 31) ^ hash(make_hashable(self.userAgeType))
        value = (value * 31) ^ hash(make_hashable(self.approvalRedirectUrl))
        value = (value * 31) ^ hash(make_hashable(self.accessToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddySearchResult(object):
    """
    Attributes:
     - mid
     - displayName
     - pictureStatus
     - picturePath
     - statusMessage
     - businessAccount
     - iconType
     - botType
    """
    def __init__(self, mid=None, displayName=None, pictureStatus=None, picturePath=None, statusMessage=None, businessAccount=None, iconType=None, botType=None):
        self.mid = mid
        self.displayName = displayName
        self.pictureStatus = pictureStatus
        self.picturePath = picturePath
        self.statusMessage = statusMessage
        self.businessAccount = businessAccount
        self.iconType = iconType
        self.botType = botType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.businessAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.iconType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.botType = BotType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddySearchResult')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 3)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 4)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 5)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.businessAccount is not None:
            oprot.writeFieldBegin('businessAccount', TType.BOOL, 6)
            oprot.writeBool(self.businessAccount)
            oprot.writeFieldEnd()
        if self.iconType is not None:
            oprot.writeFieldBegin('iconType', TType.I32, 7)
            oprot.writeI32(self.iconType)
            oprot.writeFieldEnd()
        if self.botType is not None:
            oprot.writeFieldBegin('botType', TType.I32, 8)
            oprot.writeI32(self.botType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.businessAccount))
        value = (value * 31) ^ hash(make_hashable(self.iconType))
        value = (value * 31) ^ hash(make_hashable(self.botType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetBuddyChatBarRequest(object):
    """
    Attributes:
     - buddyMid
     - chatBarRevision
     - richMenuId
    """
    def __init__(self, buddyMid=None, chatBarRevision=None, richMenuId=None):
        self.buddyMid = buddyMid
        self.chatBarRevision = chatBarRevision
        self.richMenuId = richMenuId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.chatBarRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.richMenuId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetBuddyChatBarRequest')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 1)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        if self.chatBarRevision is not None:
            oprot.writeFieldBegin('chatBarRevision', TType.I64, 2)
            oprot.writeI64(self.chatBarRevision)
            oprot.writeFieldEnd()
        if self.richMenuId is not None:
            oprot.writeFieldBegin('richMenuId', TType.STRING, 3)
            oprot.writeString(self.richMenuId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        value = (value * 31) ^ hash(make_hashable(self.chatBarRevision))
        value = (value * 31) ^ hash(make_hashable(self.richMenuId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyChatBar(object):
    """
    Attributes:
     - barItems
    """
    def __init__(self, barItems=None):
        self.barItems = barItems

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.barItems = []
                    (_, elem255) = iprot.readListBegin()
                    for _ in range(elem255):
                        elem256 = BuddyChatBarItem()
                        elem256.read(iprot)
                        self.barItems.append(elem256)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyChatBar')
        if self.barItems is not None:
            oprot.writeFieldBegin('barItems', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.barItems))
            for elem257 in self.barItems:
                elem257.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.barItems))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyChatBarItem(object):
    """
    Attributes:
     - rich
     - widgetList
     - web
    """
    def __init__(self, rich=None, widgetList=None, web=None):
        self.rich = rich
        self.widgetList = widgetList
        self.web = web

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.rich = BuddyRichMenuChatBarItem()
                    self.rich.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.widgetList = BuddyWidgetListCharBarItem()
                    self.widgetList.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.web = BuddyWebChatBarItem()
                    self.web.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyChatBarItem')
        if self.rich is not None:
            oprot.writeFieldBegin('rich', TType.STRUCT, 1)
            self.rich.write(oprot)
            oprot.writeFieldEnd()
        if self.widgetList is not None:
            oprot.writeFieldBegin('widgetList', TType.STRUCT, 2)
            self.widgetList.write(oprot)
            oprot.writeFieldEnd()
        if self.web is not None:
            oprot.writeFieldBegin('web', TType.STRUCT, 3)
            self.web.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.rich))
        value = (value * 31) ^ hash(make_hashable(self.widgetList))
        value = (value * 31) ^ hash(make_hashable(self.web))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyRichMenuChatBarItem(object):
    """
    Attributes:
     - label
     - body
     - selected
    """
    def __init__(self, label=None, body=None, selected=None):
        self.label = label
        self.body = body
        self.selected = selected

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.label = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.body = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.selected = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyRichMenuChatBarItem')
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 1)
            oprot.writeString(self.label)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 2)
            oprot.writeString(self.body)
            oprot.writeFieldEnd()
        if self.selected is not None:
            oprot.writeFieldBegin('selected', TType.BOOL, 3)
            oprot.writeBool(self.selected)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.label))
        value = (value * 31) ^ hash(make_hashable(self.body))
        value = (value * 31) ^ hash(make_hashable(self.selected))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyWidgetListCharBarItem(object):
    """
    Attributes:
     - label
     - widgets
     - selected
    """
    def __init__(self, label=None, widgets=None, selected=None):
        self.label = label
        self.widgets = widgets
        self.selected = selected

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.label = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.widgets = []
                    (_, elem258) = iprot.readListBegin()
                    for _ in range(elem258):
                        elem259 = BuddyWidget()
                        elem259.read(iprot)
                        self.widgets.append(elem259)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.selected = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyWidgetListCharBarItem')
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 1)
            oprot.writeString(self.label)
            oprot.writeFieldEnd()
        if self.widgets is not None:
            oprot.writeFieldBegin('widgets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.widgets))
            for elem260 in self.widgets:
                elem260.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.selected is not None:
            oprot.writeFieldBegin('selected', TType.BOOL, 3)
            oprot.writeBool(self.selected)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.label))
        value = (value * 31) ^ hash(make_hashable(self.widgets))
        value = (value * 31) ^ hash(make_hashable(self.selected))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyWebChatBarItem(object):
    """
    Attributes:
     - label
     - url
    """
    def __init__(self, label=None, url=None):
        self.label = label
        self.url = url

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.label = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyWebChatBarItem')
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 1)
            oprot.writeString(self.label)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.label))
        value = (value * 31) ^ hash(make_hashable(self.url))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyWidget(object):
    """
    Attributes:
     - icon
     - label
     - url
    """
    def __init__(self, icon=None, label=None, url=None):
        self.icon = icon
        self.label = label
        self.url = url

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.icon = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.label = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyWidget')
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 1)
            oprot.writeString(self.icon)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 2)
            oprot.writeString(self.label)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.icon))
        value = (value * 31) ^ hash(make_hashable(self.label))
        value = (value * 31) ^ hash(make_hashable(self.url))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetBuddyStatusBarV2Request(object):
    """
    Attributes:
     - botMid
     - revision
    """
    def __init__(self, botMid=None, revision=None):
        self.botMid = botMid
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.botMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetBuddyStatusBarV2Request')
        if self.botMid is not None:
            oprot.writeFieldBegin('botMid', TType.STRING, 1)
            oprot.writeString(self.botMid)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.botMid))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyStatusBar(object):
    """
    Attributes:
     - label
     - displayType
     - title
     - iconUrl
     - linkUrl
    """
    def __init__(self, label=None, displayType=None, title=None, iconUrl=None, linkUrl=None):
        self.label = label
        self.displayType = displayType
        self.title = title
        self.iconUrl = iconUrl
        self.linkUrl = linkUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.label = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.displayType = BuddyDisplayType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.iconUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.linkUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyStatusBar')
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 1)
            oprot.writeString(self.label)
            oprot.writeFieldEnd()
        if self.displayType is not None:
            oprot.writeFieldBegin('displayType', TType.I32, 2)
            oprot.writeI32(self.displayType)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.iconUrl is not None:
            oprot.writeFieldBegin('iconUrl', TType.STRING, 4)
            oprot.writeString(self.iconUrl)
            oprot.writeFieldEnd()
        if self.linkUrl is not None:
            oprot.writeFieldBegin('linkUrl', TType.STRING, 5)
            oprot.writeString(self.linkUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.label))
        value = (value * 31) ^ hash(make_hashable(self.displayType))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.iconUrl))
        value = (value * 31) ^ hash(make_hashable(self.linkUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyDetail(object):
    """
    Attributes:
     - mid
     - memberCount
     - onAir
     - businessAccount
     - addable
     - acceptableContentTypes
     - capableMyhome
     - freePhoneCallable
     - phoneNumberToDial
     - needPermissionApproval
     - channelId
     - channelProviderName
     - iconType
     - botType
     - showRichMenu
     - richMenuRevision
     - onAirLabel
     - useTheme
     - themeId
     - useBar
     - barRevision
     - useBackground
     - backgroundId
     - statusBarEnabled
     - statusBarRevision
     - searchId
     - onAirVersion
     - blockable
     - botActiveStatus
     - membershipEnabled
     - legalCountryCode
    """
    def __init__(self, mid=None, memberCount=None, onAir=None, businessAccount=None, addable=None, acceptableContentTypes=None, capableMyhome=None, freePhoneCallable=None, phoneNumberToDial=None, needPermissionApproval=None, channelId=None, channelProviderName=None, iconType=None, botType=None, showRichMenu=None, richMenuRevision=None, onAirLabel=None, useTheme=None, themeId=None, useBar=None, barRevision=None, useBackground=None, backgroundId=None, statusBarEnabled=None, statusBarRevision=None, searchId=None, onAirVersion=None, blockable=None, botActiveStatus=None, membershipEnabled=None, legalCountryCode=None):
        self.mid = mid
        self.memberCount = memberCount
        self.onAir = onAir
        self.businessAccount = businessAccount
        self.addable = addable
        self.acceptableContentTypes = acceptableContentTypes
        self.capableMyhome = capableMyhome
        self.freePhoneCallable = freePhoneCallable
        self.phoneNumberToDial = phoneNumberToDial
        self.needPermissionApproval = needPermissionApproval
        self.channelId = channelId
        self.channelProviderName = channelProviderName
        self.iconType = iconType
        self.botType = botType
        self.showRichMenu = showRichMenu
        self.richMenuRevision = richMenuRevision
        self.onAirLabel = onAirLabel
        self.useTheme = useTheme
        self.themeId = themeId
        self.useBar = useBar
        self.barRevision = barRevision
        self.useBackground = useBackground
        self.backgroundId = backgroundId
        self.statusBarEnabled = statusBarEnabled
        self.statusBarRevision = statusBarRevision
        self.searchId = searchId
        self.onAirVersion = onAirVersion
        self.blockable = blockable
        self.botActiveStatus = botActiveStatus
        self.membershipEnabled = membershipEnabled
        self.legalCountryCode = legalCountryCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.memberCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.onAir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.businessAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.addable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.acceptableContentTypes = set()
                    (_, elem261) = iprot.readSetBegin()
                    for _ in range(elem261):
                        elem262 = ContentType(iprot.readI32())
                        self.acceptableContentTypes.add(elem262)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.capableMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.freePhoneCallable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.phoneNumberToDial = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.needPermissionApproval = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.channelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.channelProviderName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.iconType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.botType = BotType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.showRichMenu = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.richMenuRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.onAirLabel = OnAirLabel(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.useTheme = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.themeId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.useBar = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.barRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.useBackground = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.backgroundId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.statusBarEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I64:
                    self.statusBarRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.onAirVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.blockable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.botActiveStatus = BotActiveStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.membershipEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.legalCountryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyDetail')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.memberCount is not None:
            oprot.writeFieldBegin('memberCount', TType.I64, 2)
            oprot.writeI64(self.memberCount)
            oprot.writeFieldEnd()
        if self.onAir is not None:
            oprot.writeFieldBegin('onAir', TType.BOOL, 3)
            oprot.writeBool(self.onAir)
            oprot.writeFieldEnd()
        if self.businessAccount is not None:
            oprot.writeFieldBegin('businessAccount', TType.BOOL, 4)
            oprot.writeBool(self.businessAccount)
            oprot.writeFieldEnd()
        if self.addable is not None:
            oprot.writeFieldBegin('addable', TType.BOOL, 5)
            oprot.writeBool(self.addable)
            oprot.writeFieldEnd()
        if self.acceptableContentTypes is not None:
            oprot.writeFieldBegin('acceptableContentTypes', TType.SET, 6)
            oprot.writeSetBegin(TType.I32, len(self.acceptableContentTypes))
            for elem263 in self.acceptableContentTypes:
                oprot.writeI32(elem263)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.capableMyhome is not None:
            oprot.writeFieldBegin('capableMyhome', TType.BOOL, 7)
            oprot.writeBool(self.capableMyhome)
            oprot.writeFieldEnd()
        if self.freePhoneCallable is not None:
            oprot.writeFieldBegin('freePhoneCallable', TType.BOOL, 8)
            oprot.writeBool(self.freePhoneCallable)
            oprot.writeFieldEnd()
        if self.phoneNumberToDial is not None:
            oprot.writeFieldBegin('phoneNumberToDial', TType.STRING, 9)
            oprot.writeString(self.phoneNumberToDial)
            oprot.writeFieldEnd()
        if self.needPermissionApproval is not None:
            oprot.writeFieldBegin('needPermissionApproval', TType.BOOL, 10)
            oprot.writeBool(self.needPermissionApproval)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.I32, 11)
            oprot.writeI32(self.channelId)
            oprot.writeFieldEnd()
        if self.channelProviderName is not None:
            oprot.writeFieldBegin('channelProviderName', TType.STRING, 12)
            oprot.writeString(self.channelProviderName)
            oprot.writeFieldEnd()
        if self.iconType is not None:
            oprot.writeFieldBegin('iconType', TType.I32, 13)
            oprot.writeI32(self.iconType)
            oprot.writeFieldEnd()
        if self.botType is not None:
            oprot.writeFieldBegin('botType', TType.I32, 14)
            oprot.writeI32(self.botType)
            oprot.writeFieldEnd()
        if self.showRichMenu is not None:
            oprot.writeFieldBegin('showRichMenu', TType.BOOL, 15)
            oprot.writeBool(self.showRichMenu)
            oprot.writeFieldEnd()
        if self.richMenuRevision is not None:
            oprot.writeFieldBegin('richMenuRevision', TType.I64, 16)
            oprot.writeI64(self.richMenuRevision)
            oprot.writeFieldEnd()
        if self.onAirLabel is not None:
            oprot.writeFieldBegin('onAirLabel', TType.I32, 17)
            oprot.writeI32(self.onAirLabel)
            oprot.writeFieldEnd()
        if self.useTheme is not None:
            oprot.writeFieldBegin('useTheme', TType.BOOL, 18)
            oprot.writeBool(self.useTheme)
            oprot.writeFieldEnd()
        if self.themeId is not None:
            oprot.writeFieldBegin('themeId', TType.STRING, 19)
            oprot.writeString(self.themeId)
            oprot.writeFieldEnd()
        if self.useBar is not None:
            oprot.writeFieldBegin('useBar', TType.BOOL, 20)
            oprot.writeBool(self.useBar)
            oprot.writeFieldEnd()
        if self.barRevision is not None:
            oprot.writeFieldBegin('barRevision', TType.I64, 21)
            oprot.writeI64(self.barRevision)
            oprot.writeFieldEnd()
        if self.useBackground is not None:
            oprot.writeFieldBegin('useBackground', TType.BOOL, 22)
            oprot.writeBool(self.useBackground)
            oprot.writeFieldEnd()
        if self.backgroundId is not None:
            oprot.writeFieldBegin('backgroundId', TType.STRING, 23)
            oprot.writeString(self.backgroundId)
            oprot.writeFieldEnd()
        if self.statusBarEnabled is not None:
            oprot.writeFieldBegin('statusBarEnabled', TType.BOOL, 24)
            oprot.writeBool(self.statusBarEnabled)
            oprot.writeFieldEnd()
        if self.statusBarRevision is not None:
            oprot.writeFieldBegin('statusBarRevision', TType.I64, 25)
            oprot.writeI64(self.statusBarRevision)
            oprot.writeFieldEnd()
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 26)
            oprot.writeString(self.searchId)
            oprot.writeFieldEnd()
        if self.onAirVersion is not None:
            oprot.writeFieldBegin('onAirVersion', TType.I32, 27)
            oprot.writeI32(self.onAirVersion)
            oprot.writeFieldEnd()
        if self.blockable is not None:
            oprot.writeFieldBegin('blockable', TType.BOOL, 28)
            oprot.writeBool(self.blockable)
            oprot.writeFieldEnd()
        if self.botActiveStatus is not None:
            oprot.writeFieldBegin('botActiveStatus', TType.I32, 29)
            oprot.writeI32(self.botActiveStatus)
            oprot.writeFieldEnd()
        if self.membershipEnabled is not None:
            oprot.writeFieldBegin('membershipEnabled', TType.BOOL, 30)
            oprot.writeBool(self.membershipEnabled)
            oprot.writeFieldEnd()
        if self.legalCountryCode is not None:
            oprot.writeFieldBegin('legalCountryCode', TType.STRING, 31)
            oprot.writeString(self.legalCountryCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.memberCount))
        value = (value * 31) ^ hash(make_hashable(self.onAir))
        value = (value * 31) ^ hash(make_hashable(self.businessAccount))
        value = (value * 31) ^ hash(make_hashable(self.addable))
        value = (value * 31) ^ hash(make_hashable(self.acceptableContentTypes))
        value = (value * 31) ^ hash(make_hashable(self.capableMyhome))
        value = (value * 31) ^ hash(make_hashable(self.freePhoneCallable))
        value = (value * 31) ^ hash(make_hashable(self.phoneNumberToDial))
        value = (value * 31) ^ hash(make_hashable(self.needPermissionApproval))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.channelProviderName))
        value = (value * 31) ^ hash(make_hashable(self.iconType))
        value = (value * 31) ^ hash(make_hashable(self.botType))
        value = (value * 31) ^ hash(make_hashable(self.showRichMenu))
        value = (value * 31) ^ hash(make_hashable(self.richMenuRevision))
        value = (value * 31) ^ hash(make_hashable(self.onAirLabel))
        value = (value * 31) ^ hash(make_hashable(self.useTheme))
        value = (value * 31) ^ hash(make_hashable(self.themeId))
        value = (value * 31) ^ hash(make_hashable(self.useBar))
        value = (value * 31) ^ hash(make_hashable(self.barRevision))
        value = (value * 31) ^ hash(make_hashable(self.useBackground))
        value = (value * 31) ^ hash(make_hashable(self.backgroundId))
        value = (value * 31) ^ hash(make_hashable(self.statusBarEnabled))
        value = (value * 31) ^ hash(make_hashable(self.statusBarRevision))
        value = (value * 31) ^ hash(make_hashable(self.searchId))
        value = (value * 31) ^ hash(make_hashable(self.onAirVersion))
        value = (value * 31) ^ hash(make_hashable(self.blockable))
        value = (value * 31) ^ hash(make_hashable(self.botActiveStatus))
        value = (value * 31) ^ hash(make_hashable(self.membershipEnabled))
        value = (value * 31) ^ hash(make_hashable(self.legalCountryCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyPersonalDetail(object):
    """
    Attributes:
     - richMenuId
     - statusBarRevision
    """
    def __init__(self, richMenuId=None, statusBarRevision=None):
        self.richMenuId = richMenuId
        self.statusBarRevision = statusBarRevision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.richMenuId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.statusBarRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyPersonalDetail')
        if self.richMenuId is not None:
            oprot.writeFieldBegin('richMenuId', TType.STRING, 1)
            oprot.writeString(self.richMenuId)
            oprot.writeFieldEnd()
        if self.statusBarRevision is not None:
            oprot.writeFieldBegin('statusBarRevision', TType.I64, 2)
            oprot.writeI64(self.statusBarRevision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.richMenuId))
        value = (value * 31) ^ hash(make_hashable(self.statusBarRevision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyDetailWithPersonal(object):
    """
    Attributes:
     - buddyDetail
     - personalDetail
    """
    def __init__(self, buddyDetail=None, personalDetail=None):
        self.buddyDetail = buddyDetail
        self.personalDetail = personalDetail

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.buddyDetail = BuddyDetail()
                    self.buddyDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.personalDetail = BuddyPersonalDetail()
                    self.personalDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyDetailWithPersonal')
        if self.buddyDetail is not None:
            oprot.writeFieldBegin('buddyDetail', TType.STRUCT, 1)
            self.buddyDetail.write(oprot)
            oprot.writeFieldEnd()
        if self.personalDetail is not None:
            oprot.writeFieldBegin('personalDetail', TType.STRUCT, 2)
            self.personalDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyDetail))
        value = (value * 31) ^ hash(make_hashable(self.personalDetail))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyOnAirUrls(object):
    """
    Attributes:
     - hls
     - smoothStreaming
    """
    def __init__(self, hls=None, smoothStreaming=None):
        self.hls = hls
        self.smoothStreaming = smoothStreaming

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.hls = {}
                    (_, _, elem264) = iprot.readMapBegin()
                    for _ in range(elem264):
                        elem266 = iprot.readString()
                        elem265 = iprot.readString()
                        self.hls[elem266] = elem265
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.smoothStreaming = {}
                    (_, _, elem267) = iprot.readMapBegin()
                    for _ in range(elem267):
                        elem269 = iprot.readString()
                        elem268 = iprot.readString()
                        self.smoothStreaming[elem269] = elem268
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyOnAirUrls')
        if self.hls is not None:
            oprot.writeFieldBegin('hls', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.hls))
            for elem271, elem270 in self.hls.items():
                oprot.writeString(elem271)
                oprot.writeString(elem270)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.smoothStreaming is not None:
            oprot.writeFieldBegin('smoothStreaming', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.smoothStreaming))
            for elem273, elem272 in self.smoothStreaming.items():
                oprot.writeString(elem273)
                oprot.writeString(elem272)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.hls))
        value = (value * 31) ^ hash(make_hashable(self.smoothStreaming))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyOnAir(object):
    """
    Attributes:
     - mid
     - freshnessLifetime
     - onAirId
     - onAir
     - text
     - viewerCount
     - targetCount
     - livePlayTime
     - screenAspectRate
     - onAirType
     - onAirUrls
     - aspectRatioOfSource
     - useFadingOut
     - fadingOutIn
     - urlAfterFadingOut
     - labelAfterFadingOut
     - useLowerBanner
     - lowerBannerUrl
     - lowerBannerLabel
    """
    def __init__(self, mid=None, freshnessLifetime=None, onAirId=None, onAir=None, text=None, viewerCount=None, targetCount=None, livePlayTime=None, screenAspectRate=None, onAirType=None, onAirUrls=None, aspectRatioOfSource=None, useFadingOut=None, fadingOutIn=None, urlAfterFadingOut=None, labelAfterFadingOut=None, useLowerBanner=None, lowerBannerUrl=None, lowerBannerLabel=None):
        self.mid = mid
        self.freshnessLifetime = freshnessLifetime
        self.onAirId = onAirId
        self.onAir = onAir
        self.text = text
        self.viewerCount = viewerCount
        self.targetCount = targetCount
        self.livePlayTime = livePlayTime
        self.screenAspectRate = screenAspectRate
        self.onAirType = onAirType
        self.onAirUrls = onAirUrls
        self.aspectRatioOfSource = aspectRatioOfSource
        self.useFadingOut = useFadingOut
        self.fadingOutIn = fadingOutIn
        self.urlAfterFadingOut = urlAfterFadingOut
        self.labelAfterFadingOut = labelAfterFadingOut
        self.useLowerBanner = useLowerBanner
        self.lowerBannerUrl = lowerBannerUrl
        self.lowerBannerLabel = lowerBannerLabel

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.freshnessLifetime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.onAirId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.onAir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.viewerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.targetCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.livePlayTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.screenAspectRate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.onAirType = OnAirType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRUCT:
                    self.onAirUrls = BuddyOnAirUrls()
                    self.onAirUrls.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.aspectRatioOfSource = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.BOOL:
                    self.useFadingOut = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I64:
                    self.fadingOutIn = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRING:
                    self.urlAfterFadingOut = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.STRING:
                    self.labelAfterFadingOut = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.BOOL:
                    self.useLowerBanner = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.STRING:
                    self.lowerBannerUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRING:
                    self.lowerBannerLabel = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyOnAir')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.freshnessLifetime is not None:
            oprot.writeFieldBegin('freshnessLifetime', TType.I64, 3)
            oprot.writeI64(self.freshnessLifetime)
            oprot.writeFieldEnd()
        if self.onAirId is not None:
            oprot.writeFieldBegin('onAirId', TType.STRING, 4)
            oprot.writeString(self.onAirId)
            oprot.writeFieldEnd()
        if self.onAir is not None:
            oprot.writeFieldBegin('onAir', TType.BOOL, 5)
            oprot.writeBool(self.onAir)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 11)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.viewerCount is not None:
            oprot.writeFieldBegin('viewerCount', TType.I64, 12)
            oprot.writeI64(self.viewerCount)
            oprot.writeFieldEnd()
        if self.targetCount is not None:
            oprot.writeFieldBegin('targetCount', TType.I64, 13)
            oprot.writeI64(self.targetCount)
            oprot.writeFieldEnd()
        if self.livePlayTime is not None:
            oprot.writeFieldBegin('livePlayTime', TType.I64, 14)
            oprot.writeI64(self.livePlayTime)
            oprot.writeFieldEnd()
        if self.screenAspectRate is not None:
            oprot.writeFieldBegin('screenAspectRate', TType.STRING, 15)
            oprot.writeString(self.screenAspectRate)
            oprot.writeFieldEnd()
        if self.onAirType is not None:
            oprot.writeFieldBegin('onAirType', TType.I32, 31)
            oprot.writeI32(self.onAirType)
            oprot.writeFieldEnd()
        if self.onAirUrls is not None:
            oprot.writeFieldBegin('onAirUrls', TType.STRUCT, 32)
            self.onAirUrls.write(oprot)
            oprot.writeFieldEnd()
        if self.aspectRatioOfSource is not None:
            oprot.writeFieldBegin('aspectRatioOfSource', TType.STRING, 33)
            oprot.writeString(self.aspectRatioOfSource)
            oprot.writeFieldEnd()
        if self.useFadingOut is not None:
            oprot.writeFieldBegin('useFadingOut', TType.BOOL, 41)
            oprot.writeBool(self.useFadingOut)
            oprot.writeFieldEnd()
        if self.fadingOutIn is not None:
            oprot.writeFieldBegin('fadingOutIn', TType.I64, 42)
            oprot.writeI64(self.fadingOutIn)
            oprot.writeFieldEnd()
        if self.urlAfterFadingOut is not None:
            oprot.writeFieldBegin('urlAfterFadingOut', TType.STRING, 43)
            oprot.writeString(self.urlAfterFadingOut)
            oprot.writeFieldEnd()
        if self.labelAfterFadingOut is not None:
            oprot.writeFieldBegin('labelAfterFadingOut', TType.STRING, 44)
            oprot.writeString(self.labelAfterFadingOut)
            oprot.writeFieldEnd()
        if self.useLowerBanner is not None:
            oprot.writeFieldBegin('useLowerBanner', TType.BOOL, 51)
            oprot.writeBool(self.useLowerBanner)
            oprot.writeFieldEnd()
        if self.lowerBannerUrl is not None:
            oprot.writeFieldBegin('lowerBannerUrl', TType.STRING, 52)
            oprot.writeString(self.lowerBannerUrl)
            oprot.writeFieldEnd()
        if self.lowerBannerLabel is not None:
            oprot.writeFieldBegin('lowerBannerLabel', TType.STRING, 53)
            oprot.writeString(self.lowerBannerLabel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.freshnessLifetime))
        value = (value * 31) ^ hash(make_hashable(self.onAirId))
        value = (value * 31) ^ hash(make_hashable(self.onAir))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.viewerCount))
        value = (value * 31) ^ hash(make_hashable(self.targetCount))
        value = (value * 31) ^ hash(make_hashable(self.livePlayTime))
        value = (value * 31) ^ hash(make_hashable(self.screenAspectRate))
        value = (value * 31) ^ hash(make_hashable(self.onAirType))
        value = (value * 31) ^ hash(make_hashable(self.onAirUrls))
        value = (value * 31) ^ hash(make_hashable(self.aspectRatioOfSource))
        value = (value * 31) ^ hash(make_hashable(self.useFadingOut))
        value = (value * 31) ^ hash(make_hashable(self.fadingOutIn))
        value = (value * 31) ^ hash(make_hashable(self.urlAfterFadingOut))
        value = (value * 31) ^ hash(make_hashable(self.labelAfterFadingOut))
        value = (value * 31) ^ hash(make_hashable(self.useLowerBanner))
        value = (value * 31) ^ hash(make_hashable(self.lowerBannerUrl))
        value = (value * 31) ^ hash(make_hashable(self.lowerBannerLabel))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CallRoute(object):
    """
    Attributes:
     - token
     - callFlowType
     - voipAddress
     - voipUdpPort
     - voipTcpPort
     - fromZone
     - toZone
     - fakeCall
     - ringbackTone
     - toMid
     - tunneling
     - commParam
     - stid
     - encFromMid
     - encToMid
     - switchableToVideo
     - voipAddress6
     - w2pGw
    """
    def __init__(self, token=None, callFlowType=None, voipAddress=None, voipUdpPort=None, voipTcpPort=None, fromZone=None, toZone=None, fakeCall=None, ringbackTone=None, toMid=None, tunneling=None, commParam=None, stid=None, encFromMid=None, encToMid=None, switchableToVideo=None, voipAddress6=None, w2pGw=None):
        self.token = token
        self.callFlowType = callFlowType
        self.voipAddress = voipAddress
        self.voipUdpPort = voipUdpPort
        self.voipTcpPort = voipTcpPort
        self.fromZone = fromZone
        self.toZone = toZone
        self.fakeCall = fakeCall
        self.ringbackTone = ringbackTone
        self.toMid = toMid
        self.tunneling = tunneling
        self.commParam = commParam
        self.stid = stid
        self.encFromMid = encFromMid
        self.encToMid = encToMid
        self.switchableToVideo = switchableToVideo
        self.voipAddress6 = voipAddress6
        self.w2pGw = w2pGw

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.callFlowType = CallFlowType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.voipAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.voipUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.voipTcpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.fromZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.toZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.fakeCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ringbackTone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.toMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.tunneling = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.commParam = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.stid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.encFromMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.encToMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.switchableToVideo = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.voipAddress6 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.w2pGw = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CallRoute')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.callFlowType is not None:
            oprot.writeFieldBegin('callFlowType', TType.I32, 2)
            oprot.writeI32(self.callFlowType)
            oprot.writeFieldEnd()
        if self.voipAddress is not None:
            oprot.writeFieldBegin('voipAddress', TType.STRING, 3)
            oprot.writeString(self.voipAddress)
            oprot.writeFieldEnd()
        if self.voipUdpPort is not None:
            oprot.writeFieldBegin('voipUdpPort', TType.I32, 4)
            oprot.writeI32(self.voipUdpPort)
            oprot.writeFieldEnd()
        if self.voipTcpPort is not None:
            oprot.writeFieldBegin('voipTcpPort', TType.I32, 5)
            oprot.writeI32(self.voipTcpPort)
            oprot.writeFieldEnd()
        if self.fromZone is not None:
            oprot.writeFieldBegin('fromZone', TType.STRING, 6)
            oprot.writeString(self.fromZone)
            oprot.writeFieldEnd()
        if self.toZone is not None:
            oprot.writeFieldBegin('toZone', TType.STRING, 7)
            oprot.writeString(self.toZone)
            oprot.writeFieldEnd()
        if self.fakeCall is not None:
            oprot.writeFieldBegin('fakeCall', TType.BOOL, 8)
            oprot.writeBool(self.fakeCall)
            oprot.writeFieldEnd()
        if self.ringbackTone is not None:
            oprot.writeFieldBegin('ringbackTone', TType.STRING, 9)
            oprot.writeString(self.ringbackTone)
            oprot.writeFieldEnd()
        if self.toMid is not None:
            oprot.writeFieldBegin('toMid', TType.STRING, 10)
            oprot.writeString(self.toMid)
            oprot.writeFieldEnd()
        if self.tunneling is not None:
            oprot.writeFieldBegin('tunneling', TType.STRING, 11)
            oprot.writeString(self.tunneling)
            oprot.writeFieldEnd()
        if self.commParam is not None:
            oprot.writeFieldBegin('commParam', TType.STRING, 12)
            oprot.writeString(self.commParam)
            oprot.writeFieldEnd()
        if self.stid is not None:
            oprot.writeFieldBegin('stid', TType.STRING, 13)
            oprot.writeString(self.stid)
            oprot.writeFieldEnd()
        if self.encFromMid is not None:
            oprot.writeFieldBegin('encFromMid', TType.STRING, 14)
            oprot.writeString(self.encFromMid)
            oprot.writeFieldEnd()
        if self.encToMid is not None:
            oprot.writeFieldBegin('encToMid', TType.STRING, 15)
            oprot.writeString(self.encToMid)
            oprot.writeFieldEnd()
        if self.switchableToVideo is not None:
            oprot.writeFieldBegin('switchableToVideo', TType.BOOL, 16)
            oprot.writeBool(self.switchableToVideo)
            oprot.writeFieldEnd()
        if self.voipAddress6 is not None:
            oprot.writeFieldBegin('voipAddress6', TType.STRING, 17)
            oprot.writeString(self.voipAddress6)
            oprot.writeFieldEnd()
        if self.w2pGw is not None:
            oprot.writeFieldBegin('w2pGw', TType.STRING, 18)
            oprot.writeString(self.w2pGw)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.callFlowType))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress))
        value = (value * 31) ^ hash(make_hashable(self.voipUdpPort))
        value = (value * 31) ^ hash(make_hashable(self.voipTcpPort))
        value = (value * 31) ^ hash(make_hashable(self.fromZone))
        value = (value * 31) ^ hash(make_hashable(self.toZone))
        value = (value * 31) ^ hash(make_hashable(self.fakeCall))
        value = (value * 31) ^ hash(make_hashable(self.ringbackTone))
        value = (value * 31) ^ hash(make_hashable(self.toMid))
        value = (value * 31) ^ hash(make_hashable(self.tunneling))
        value = (value * 31) ^ hash(make_hashable(self.commParam))
        value = (value * 31) ^ hash(make_hashable(self.stid))
        value = (value * 31) ^ hash(make_hashable(self.encFromMid))
        value = (value * 31) ^ hash(make_hashable(self.encToMid))
        value = (value * 31) ^ hash(make_hashable(self.switchableToVideo))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress6))
        value = (value * 31) ^ hash(make_hashable(self.w2pGw))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CallHost(object):
    """
    Attributes:
     - host
     - port
     - zone
    """
    def __init__(self, host=None, port=None, zone=None):
        self.host = host
        self.port = port
        self.zone = zone

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.zone = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CallHost')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.zone is not None:
            oprot.writeFieldBegin('zone', TType.STRING, 3)
            oprot.writeString(self.zone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.host))
        value = (value * 31) ^ hash(make_hashable(self.port))
        value = (value * 31) ^ hash(make_hashable(self.zone))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupCallRoute(object):
    """
    Attributes:
     - token
     - cscf
     - mix
     - hostMid
     - capabilities
     - proto
     - voipAddress
     - voipUdpPort
     - voipTcpPort
     - fromZone
     - commParam
     - polarisAddress
     - polarisUdpPort
     - polarisZone
     - orionAddress
     - voipAddress6
    """
    def __init__(self, token=None, cscf=None, mix=None, hostMid=None, capabilities=None, proto=None, voipAddress=None, voipUdpPort=None, voipTcpPort=None, fromZone=None, commParam=None, polarisAddress=None, polarisUdpPort=None, polarisZone=None, orionAddress=None, voipAddress6=None):
        self.token = token
        self.cscf = cscf
        self.mix = mix
        self.hostMid = hostMid
        self.capabilities = capabilities
        self.proto = proto
        self.voipAddress = voipAddress
        self.voipUdpPort = voipUdpPort
        self.voipTcpPort = voipTcpPort
        self.fromZone = fromZone
        self.commParam = commParam
        self.polarisAddress = polarisAddress
        self.polarisUdpPort = polarisUdpPort
        self.polarisZone = polarisZone
        self.orionAddress = orionAddress
        self.voipAddress6 = voipAddress6

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cscf = CallHost()
                    self.cscf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mix = CallHost()
                    self.mix.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.hostMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.capabilities = []
                    (_, elem274) = iprot.readListBegin()
                    for _ in range(elem274):
                        elem275 = iprot.readString()
                        self.capabilities.append(elem275)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.proto = CallProto(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.voipAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.voipUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.voipTcpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.fromZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.commParam = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.polarisAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.polarisUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.polarisZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.orionAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.voipAddress6 = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupCallRoute')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.cscf is not None:
            oprot.writeFieldBegin('cscf', TType.STRUCT, 2)
            self.cscf.write(oprot)
            oprot.writeFieldEnd()
        if self.mix is not None:
            oprot.writeFieldBegin('mix', TType.STRUCT, 3)
            self.mix.write(oprot)
            oprot.writeFieldEnd()
        if self.hostMid is not None:
            oprot.writeFieldBegin('hostMid', TType.STRING, 4)
            oprot.writeString(self.hostMid)
            oprot.writeFieldEnd()
        if self.capabilities is not None:
            oprot.writeFieldBegin('capabilities', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.capabilities))
            for elem276 in self.capabilities:
                oprot.writeString(elem276)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proto is not None:
            oprot.writeFieldBegin('proto', TType.I32, 6)
            oprot.writeI32(self.proto)
            oprot.writeFieldEnd()
        if self.voipAddress is not None:
            oprot.writeFieldBegin('voipAddress', TType.STRING, 7)
            oprot.writeString(self.voipAddress)
            oprot.writeFieldEnd()
        if self.voipUdpPort is not None:
            oprot.writeFieldBegin('voipUdpPort', TType.I32, 8)
            oprot.writeI32(self.voipUdpPort)
            oprot.writeFieldEnd()
        if self.voipTcpPort is not None:
            oprot.writeFieldBegin('voipTcpPort', TType.I32, 9)
            oprot.writeI32(self.voipTcpPort)
            oprot.writeFieldEnd()
        if self.fromZone is not None:
            oprot.writeFieldBegin('fromZone', TType.STRING, 10)
            oprot.writeString(self.fromZone)
            oprot.writeFieldEnd()
        if self.commParam is not None:
            oprot.writeFieldBegin('commParam', TType.STRING, 11)
            oprot.writeString(self.commParam)
            oprot.writeFieldEnd()
        if self.polarisAddress is not None:
            oprot.writeFieldBegin('polarisAddress', TType.STRING, 12)
            oprot.writeString(self.polarisAddress)
            oprot.writeFieldEnd()
        if self.polarisUdpPort is not None:
            oprot.writeFieldBegin('polarisUdpPort', TType.I32, 13)
            oprot.writeI32(self.polarisUdpPort)
            oprot.writeFieldEnd()
        if self.polarisZone is not None:
            oprot.writeFieldBegin('polarisZone', TType.STRING, 14)
            oprot.writeString(self.polarisZone)
            oprot.writeFieldEnd()
        if self.orionAddress is not None:
            oprot.writeFieldBegin('orionAddress', TType.STRING, 15)
            oprot.writeString(self.orionAddress)
            oprot.writeFieldEnd()
        if self.voipAddress6 is not None:
            oprot.writeFieldBegin('voipAddress6', TType.STRING, 16)
            oprot.writeString(self.voipAddress6)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.cscf))
        value = (value * 31) ^ hash(make_hashable(self.mix))
        value = (value * 31) ^ hash(make_hashable(self.hostMid))
        value = (value * 31) ^ hash(make_hashable(self.capabilities))
        value = (value * 31) ^ hash(make_hashable(self.proto))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress))
        value = (value * 31) ^ hash(make_hashable(self.voipUdpPort))
        value = (value * 31) ^ hash(make_hashable(self.voipTcpPort))
        value = (value * 31) ^ hash(make_hashable(self.fromZone))
        value = (value * 31) ^ hash(make_hashable(self.commParam))
        value = (value * 31) ^ hash(make_hashable(self.polarisAddress))
        value = (value * 31) ^ hash(make_hashable(self.polarisUdpPort))
        value = (value * 31) ^ hash(make_hashable(self.polarisZone))
        value = (value * 31) ^ hash(make_hashable(self.orionAddress))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress6))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TestCallRoute(object):
    """
    Attributes:
     - token
     - voipServer
    """
    def __init__(self, token=None, voipServer=None):
        self.token = token
        self.voipServer = voipServer

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.voipServer = CallHost()
                    self.voipServer.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TestCallRoute')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.voipServer is not None:
            oprot.writeFieldBegin('voipServer', TType.STRUCT, 2)
            self.voipServer.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.voipServer))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SpotItem(object):
    """
    Attributes:
     - name
     - phone
     - category
     - mid
     - countryAreaCode
     - freePhoneCallable
    """
    def __init__(self, name=None, phone=None, category=None, mid=None, countryAreaCode=None, freePhoneCallable=None):
        self.name = name
        self.phone = phone
        self.category = category
        self.mid = mid
        self.countryAreaCode = countryAreaCode
        self.freePhoneCallable = freePhoneCallable

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.phone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.category = SpotCategory(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.countryAreaCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.freePhoneCallable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SpotItem')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 3)
            oprot.writeString(self.phone)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.I32, 4)
            oprot.writeI32(self.category)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 5)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.countryAreaCode is not None:
            oprot.writeFieldBegin('countryAreaCode', TType.STRING, 6)
            oprot.writeString(self.countryAreaCode)
            oprot.writeFieldEnd()
        if self.freePhoneCallable is not None:
            oprot.writeFieldBegin('freePhoneCallable', TType.BOOL, 10)
            oprot.writeBool(self.freePhoneCallable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.phone))
        value = (value * 31) ^ hash(make_hashable(self.category))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.countryAreaCode))
        value = (value * 31) ^ hash(make_hashable(self.freePhoneCallable))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallDialing(object):
    """
    Attributes:
     - type
     - dialedNumber
     - serviceDomain
     - productType
     - productName
     - multipleProduct
     - callerIdStatus
     - balance
     - unit
     - rate
     - displayCode
     - calledNumber
     - calleeNationalNumber
     - calleeCallingCode
     - rateDivision
     - adMaxMin
     - adRemains
     - adSessionId
    """
    def __init__(self, type=None, dialedNumber=None, serviceDomain=None, productType=None, productName=None, multipleProduct=None, callerIdStatus=None, balance=None, unit=None, rate=None, displayCode=None, calledNumber=None, calleeNationalNumber=None, calleeCallingCode=None, rateDivision=None, adMaxMin=None, adRemains=None, adSessionId=None):
        self.type = type
        self.dialedNumber = dialedNumber
        self.serviceDomain = serviceDomain
        self.productType = productType
        self.productName = productName
        self.multipleProduct = multipleProduct
        self.callerIdStatus = callerIdStatus
        self.balance = balance
        self.unit = unit
        self.rate = rate
        self.displayCode = displayCode
        self.calledNumber = calledNumber
        self.calleeNationalNumber = calleeNationalNumber
        self.calleeCallingCode = calleeCallingCode
        self.rateDivision = rateDivision
        self.adMaxMin = adMaxMin
        self.adRemains = adRemains
        self.adSessionId = adSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = PaidCallType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dialedNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.serviceDomain = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.productType = PaidCallProductType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.productName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.multipleProduct = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.callerIdStatus = PaidCallerIdStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.balance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.unit = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.rate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.displayCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.calledNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.calleeNationalNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.calleeCallingCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.rateDivision = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.adMaxMin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.adRemains = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.adSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallDialing')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.dialedNumber is not None:
            oprot.writeFieldBegin('dialedNumber', TType.STRING, 2)
            oprot.writeString(self.dialedNumber)
            oprot.writeFieldEnd()
        if self.serviceDomain is not None:
            oprot.writeFieldBegin('serviceDomain', TType.STRING, 3)
            oprot.writeString(self.serviceDomain)
            oprot.writeFieldEnd()
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 4)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.productName is not None:
            oprot.writeFieldBegin('productName', TType.STRING, 5)
            oprot.writeString(self.productName)
            oprot.writeFieldEnd()
        if self.multipleProduct is not None:
            oprot.writeFieldBegin('multipleProduct', TType.BOOL, 6)
            oprot.writeBool(self.multipleProduct)
            oprot.writeFieldEnd()
        if self.callerIdStatus is not None:
            oprot.writeFieldBegin('callerIdStatus', TType.I32, 7)
            oprot.writeI32(self.callerIdStatus)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.I32, 10)
            oprot.writeI32(self.balance)
            oprot.writeFieldEnd()
        if self.unit is not None:
            oprot.writeFieldBegin('unit', TType.STRING, 11)
            oprot.writeString(self.unit)
            oprot.writeFieldEnd()
        if self.rate is not None:
            oprot.writeFieldBegin('rate', TType.I32, 12)
            oprot.writeI32(self.rate)
            oprot.writeFieldEnd()
        if self.displayCode is not None:
            oprot.writeFieldBegin('displayCode', TType.STRING, 13)
            oprot.writeString(self.displayCode)
            oprot.writeFieldEnd()
        if self.calledNumber is not None:
            oprot.writeFieldBegin('calledNumber', TType.STRING, 14)
            oprot.writeString(self.calledNumber)
            oprot.writeFieldEnd()
        if self.calleeNationalNumber is not None:
            oprot.writeFieldBegin('calleeNationalNumber', TType.STRING, 15)
            oprot.writeString(self.calleeNationalNumber)
            oprot.writeFieldEnd()
        if self.calleeCallingCode is not None:
            oprot.writeFieldBegin('calleeCallingCode', TType.STRING, 16)
            oprot.writeString(self.calleeCallingCode)
            oprot.writeFieldEnd()
        if self.rateDivision is not None:
            oprot.writeFieldBegin('rateDivision', TType.STRING, 17)
            oprot.writeString(self.rateDivision)
            oprot.writeFieldEnd()
        if self.adMaxMin is not None:
            oprot.writeFieldBegin('adMaxMin', TType.I32, 20)
            oprot.writeI32(self.adMaxMin)
            oprot.writeFieldEnd()
        if self.adRemains is not None:
            oprot.writeFieldBegin('adRemains', TType.I32, 21)
            oprot.writeI32(self.adRemains)
            oprot.writeFieldEnd()
        if self.adSessionId is not None:
            oprot.writeFieldBegin('adSessionId', TType.STRING, 22)
            oprot.writeString(self.adSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.dialedNumber))
        value = (value * 31) ^ hash(make_hashable(self.serviceDomain))
        value = (value * 31) ^ hash(make_hashable(self.productType))
        value = (value * 31) ^ hash(make_hashable(self.productName))
        value = (value * 31) ^ hash(make_hashable(self.multipleProduct))
        value = (value * 31) ^ hash(make_hashable(self.callerIdStatus))
        value = (value * 31) ^ hash(make_hashable(self.balance))
        value = (value * 31) ^ hash(make_hashable(self.unit))
        value = (value * 31) ^ hash(make_hashable(self.rate))
        value = (value * 31) ^ hash(make_hashable(self.displayCode))
        value = (value * 31) ^ hash(make_hashable(self.calledNumber))
        value = (value * 31) ^ hash(make_hashable(self.calleeNationalNumber))
        value = (value * 31) ^ hash(make_hashable(self.calleeCallingCode))
        value = (value * 31) ^ hash(make_hashable(self.rateDivision))
        value = (value * 31) ^ hash(make_hashable(self.adMaxMin))
        value = (value * 31) ^ hash(make_hashable(self.adRemains))
        value = (value * 31) ^ hash(make_hashable(self.adSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallResponse(object):
    """
    Attributes:
     - host
     - dialing
     - token
     - spotItems
    """
    def __init__(self, host=None, dialing=None, token=None, spotItems=None):
        self.host = host
        self.dialing = dialing
        self.token = token
        self.spotItems = spotItems

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.host = CallHost()
                    self.host.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dialing = PaidCallDialing()
                    self.dialing.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.spotItems = []
                    (_, elem277) = iprot.readListBegin()
                    for _ in range(elem277):
                        elem278 = SpotItem()
                        elem278.read(iprot)
                        self.spotItems.append(elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallResponse')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRUCT, 1)
            self.host.write(oprot)
            oprot.writeFieldEnd()
        if self.dialing is not None:
            oprot.writeFieldBegin('dialing', TType.STRUCT, 2)
            self.dialing.write(oprot)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 3)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.spotItems is not None:
            oprot.writeFieldBegin('spotItems', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.spotItems))
            for elem279 in self.spotItems:
                elem279.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.host))
        value = (value * 31) ^ hash(make_hashable(self.dialing))
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.spotItems))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class OACallRoute(object):
    """
    Attributes:
     - callRoute
     - paidCallResponse
    """
    def __init__(self, callRoute=None, paidCallResponse=None):
        self.callRoute = callRoute
        self.paidCallResponse = paidCallResponse

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.callRoute = CallRoute()
                    self.callRoute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.paidCallResponse = PaidCallResponse()
                    self.paidCallResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('OACallRoute')
        if self.callRoute is not None:
            oprot.writeFieldBegin('callRoute', TType.STRUCT, 1)
            self.callRoute.write(oprot)
            oprot.writeFieldEnd()
        if self.paidCallResponse is not None:
            oprot.writeFieldBegin('paidCallResponse', TType.STRUCT, 2)
            self.paidCallResponse.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.callRoute))
        value = (value * 31) ^ hash(make_hashable(self.paidCallResponse))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AcquireOACallRouteRequest(object):
    """
    Attributes:
     - searchId
     - fromEnvInfo
     - otp
    """
    def __init__(self, searchId=None, fromEnvInfo=None, otp=None):
        self.searchId = searchId
        self.fromEnvInfo = fromEnvInfo
        self.otp = otp

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.fromEnvInfo = {}
                    (_, _, elem280) = iprot.readMapBegin()
                    for _ in range(elem280):
                        elem282 = iprot.readString()
                        elem281 = iprot.readString()
                        self.fromEnvInfo[elem282] = elem281
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.otp = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AcquireOACallRouteRequest')
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 1)
            oprot.writeString(self.searchId)
            oprot.writeFieldEnd()
        if self.fromEnvInfo is not None:
            oprot.writeFieldBegin('fromEnvInfo', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.fromEnvInfo))
            for elem284, elem283 in self.fromEnvInfo.items():
                oprot.writeString(elem284)
                oprot.writeString(elem283)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.otp is not None:
            oprot.writeFieldBegin('otp', TType.STRING, 3)
            oprot.writeString(self.otp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.searchId))
        value = (value * 31) ^ hash(make_hashable(self.fromEnvInfo))
        value = (value * 31) ^ hash(make_hashable(self.otp))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AcquireOACallRouteResponse(object):
    """
    Attributes:
     - oaCallRoute
    """
    def __init__(self, oaCallRoute=None):
        self.oaCallRoute = oaCallRoute

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.oaCallRoute = OACallRoute()
                    self.oaCallRoute.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AcquireOACallRouteResponse')
        if self.oaCallRoute is not None:
            oprot.writeFieldBegin('oaCallRoute', TType.STRUCT, 1)
            self.oaCallRoute.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.oaCallRoute))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupCall(object):
    """
    Attributes:
     - online
     - chatMid
     - hostMid
     - memberMids
     - started
     - mediaType
     - protocol
    """
    def __init__(self, online=None, chatMid=None, hostMid=None, memberMids=None, started=None, mediaType=None, protocol=None):
        self.online = online
        self.chatMid = chatMid
        self.hostMid = hostMid
        self.memberMids = memberMids
        self.started = started
        self.mediaType = mediaType
        self.protocol = protocol

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hostMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.memberMids = []
                    (_, elem285) = iprot.readListBegin()
                    for _ in range(elem285):
                        elem286 = iprot.readString()
                        self.memberMids.append(elem286)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.started = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.mediaType = MediaType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.protocol = CallProto(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupCall')
        if self.online is not None:
            oprot.writeFieldBegin('online', TType.BOOL, 1)
            oprot.writeBool(self.online)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.hostMid is not None:
            oprot.writeFieldBegin('hostMid', TType.STRING, 3)
            oprot.writeString(self.hostMid)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.memberMids))
            for elem287 in self.memberMids:
                oprot.writeString(elem287)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.started is not None:
            oprot.writeFieldBegin('started', TType.I64, 5)
            oprot.writeI64(self.started)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.I32, 6)
            oprot.writeI32(self.mediaType)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.I32, 7)
            oprot.writeI32(self.protocol)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.online))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.hostMid))
        value = (value * 31) ^ hash(make_hashable(self.memberMids))
        value = (value * 31) ^ hash(make_hashable(self.started))
        value = (value * 31) ^ hash(make_hashable(self.mediaType))
        value = (value * 31) ^ hash(make_hashable(self.protocol))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallBalance(object):
    """
    Attributes:
     - productType
     - productName
     - unit
     - limitedPaidBalance
     - limitedFreeBalance
     - unlimitedPaidBalance
     - unlimitedFreeBalance
     - startTime
     - endTime
     - autopayEnabled
    """
    def __init__(self, productType=None, productName=None, unit=None, limitedPaidBalance=None, limitedFreeBalance=None, unlimitedPaidBalance=None, unlimitedFreeBalance=None, startTime=None, endTime=None, autopayEnabled=None):
        self.productType = productType
        self.productName = productName
        self.unit = unit
        self.limitedPaidBalance = limitedPaidBalance
        self.limitedFreeBalance = limitedFreeBalance
        self.unlimitedPaidBalance = unlimitedPaidBalance
        self.unlimitedFreeBalance = unlimitedFreeBalance
        self.startTime = startTime
        self.endTime = endTime
        self.autopayEnabled = autopayEnabled

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.productType = PaidCallProductType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.productName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.unit = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limitedPaidBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.limitedFreeBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.unlimitedPaidBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.unlimitedFreeBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.autopayEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallBalance')
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 1)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.productName is not None:
            oprot.writeFieldBegin('productName', TType.STRING, 2)
            oprot.writeString(self.productName)
            oprot.writeFieldEnd()
        if self.unit is not None:
            oprot.writeFieldBegin('unit', TType.STRING, 3)
            oprot.writeString(self.unit)
            oprot.writeFieldEnd()
        if self.limitedPaidBalance is not None:
            oprot.writeFieldBegin('limitedPaidBalance', TType.I32, 4)
            oprot.writeI32(self.limitedPaidBalance)
            oprot.writeFieldEnd()
        if self.limitedFreeBalance is not None:
            oprot.writeFieldBegin('limitedFreeBalance', TType.I32, 5)
            oprot.writeI32(self.limitedFreeBalance)
            oprot.writeFieldEnd()
        if self.unlimitedPaidBalance is not None:
            oprot.writeFieldBegin('unlimitedPaidBalance', TType.I32, 6)
            oprot.writeI32(self.unlimitedPaidBalance)
            oprot.writeFieldEnd()
        if self.unlimitedFreeBalance is not None:
            oprot.writeFieldBegin('unlimitedFreeBalance', TType.I32, 7)
            oprot.writeI32(self.unlimitedFreeBalance)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 8)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 9)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.autopayEnabled is not None:
            oprot.writeFieldBegin('autopayEnabled', TType.BOOL, 10)
            oprot.writeBool(self.autopayEnabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.productType))
        value = (value * 31) ^ hash(make_hashable(self.productName))
        value = (value * 31) ^ hash(make_hashable(self.unit))
        value = (value * 31) ^ hash(make_hashable(self.limitedPaidBalance))
        value = (value * 31) ^ hash(make_hashable(self.limitedFreeBalance))
        value = (value * 31) ^ hash(make_hashable(self.unlimitedPaidBalance))
        value = (value * 31) ^ hash(make_hashable(self.unlimitedFreeBalance))
        value = (value * 31) ^ hash(make_hashable(self.startTime))
        value = (value * 31) ^ hash(make_hashable(self.endTime))
        value = (value * 31) ^ hash(make_hashable(self.autopayEnabled))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateGroupCallUrlAttribute(object):
    """
    Attributes:
     - title
    """
    def __init__(self, title=None):
        self.title = title

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateGroupCallUrlAttribute')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.title))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateGroupCallUrlRequest(object):
    """
    Attributes:
     - urlId
     - targetAttribute
    """
    def __init__(self, urlId=None, targetAttribute=None):
        self.urlId = urlId
        self.targetAttribute = targetAttribute

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urlId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.targetAttribute = UpdateGroupCallUrlAttribute()
                    self.targetAttribute.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateGroupCallUrlRequest')
        if self.urlId is not None:
            oprot.writeFieldBegin('urlId', TType.STRING, 1)
            oprot.writeString(self.urlId)
            oprot.writeFieldEnd()
        if self.targetAttribute is not None:
            oprot.writeFieldBegin('targetAttribute', TType.STRUCT, 2)
            self.targetAttribute.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.urlId))
        value = (value * 31) ^ hash(make_hashable(self.targetAttribute))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateGroupCallUrlResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateGroupCallUrlResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetGroupCallUrlsRequest(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetGroupCallUrlsRequest')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetGroupCallUrlsResponse(object):
    """
    Attributes:
     - urls
    """
    def __init__(self, urls=None):
        self.urls = urls

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.urls = []
                    (_, elem288) = iprot.readListBegin()
                    for _ in range(elem288):
                        elem289 = GroupCallUrl()
                        elem289.read(iprot)
                        self.urls.append(elem289)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetGroupCallUrlsResponse')
        if self.urls is not None:
            oprot.writeFieldBegin('urls', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.urls))
            for elem290 in self.urls:
                elem290.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.urls))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupCallUrl(object):
    """
    Attributes:
     - urlId
     - title
     - createdTimeMillis
    """
    def __init__(self, urlId=None, title=None, createdTimeMillis=None):
        self.urlId = urlId
        self.title = title
        self.createdTimeMillis = createdTimeMillis

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urlId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.createdTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupCallUrl')
        if self.urlId is not None:
            oprot.writeFieldBegin('urlId', TType.STRING, 1)
            oprot.writeString(self.urlId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.createdTimeMillis is not None:
            oprot.writeFieldBegin('createdTimeMillis', TType.I64, 3)
            oprot.writeI64(self.createdTimeMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.urlId))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.createdTimeMillis))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallUserRate(object):
    """
    Attributes:
     - countryCode
     - rate
     - rateDivision
     - rateName
    """
    def __init__(self, countryCode=None, rate=None, rateDivision=None, rateName=None):
        self.countryCode = countryCode
        self.rate = rate
        self.rateDivision = rateDivision
        self.rateName = rateName

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.rateDivision = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rateName = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallUserRate')
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 1)
            oprot.writeString(self.countryCode)
            oprot.writeFieldEnd()
        if self.rate is not None:
            oprot.writeFieldBegin('rate', TType.I32, 2)
            oprot.writeI32(self.rate)
            oprot.writeFieldEnd()
        if self.rateDivision is not None:
            oprot.writeFieldBegin('rateDivision', TType.STRING, 3)
            oprot.writeString(self.rateDivision)
            oprot.writeFieldEnd()
        if self.rateName is not None:
            oprot.writeFieldBegin('rateName', TType.STRING, 4)
            oprot.writeString(self.rateName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        value = (value * 31) ^ hash(make_hashable(self.rate))
        value = (value * 31) ^ hash(make_hashable(self.rateDivision))
        value = (value * 31) ^ hash(make_hashable(self.rateName))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetGroupCallUrlInfoRequest(object):
    """
    Attributes:
     - urlId
    """
    def __init__(self, urlId=None):
        self.urlId = urlId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urlId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetGroupCallUrlInfoRequest')
        if self.urlId is not None:
            oprot.writeFieldBegin('urlId', TType.STRING, 1)
            oprot.writeString(self.urlId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.urlId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetGroupCallUrlInfoResponse(object):
    """
    Attributes:
     - title
     - createdTimeMillis
    """
    def __init__(self, title=None, createdTimeMillis=None):
        self.title = title
        self.createdTimeMillis = createdTimeMillis

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetGroupCallUrlInfoResponse')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.createdTimeMillis is not None:
            oprot.writeFieldBegin('createdTimeMillis', TType.I64, 2)
            oprot.writeI64(self.createdTimeMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.createdTimeMillis))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteGroupCallUrlRequest(object):
    """
    Attributes:
     - urlId
    """
    def __init__(self, urlId=None):
        self.urlId = urlId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urlId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteGroupCallUrlRequest')
        if self.urlId is not None:
            oprot.writeFieldBegin('urlId', TType.STRING, 1)
            oprot.writeString(self.urlId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.urlId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteGroupCallUrlResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteGroupCallUrlResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class KickoutFromGroupCallRequest(object):
    """
    Attributes:
     - chatMid
     - targetMids
    """
    def __init__(self, chatMid=None, targetMids=None):
        self.chatMid = chatMid
        self.targetMids = targetMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.targetMids = []
                    (_, elem291) = iprot.readListBegin()
                    for _ in range(elem291):
                        elem292 = iprot.readString()
                        self.targetMids.append(elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('KickoutFromGroupCallRequest')
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 1)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.targetMids is not None:
            oprot.writeFieldBegin('targetMids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.targetMids))
            for elem293 in self.targetMids:
                oprot.writeString(elem293)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.targetMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class KickoutFromGroupCallResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('KickoutFromGroupCallResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateGroupCallUrlRequest(object):
    """
    Attributes:
     - title
    """
    def __init__(self, title=None):
        self.title = title

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateGroupCallUrlRequest')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.title))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateGroupCallUrlResponse(object):
    """
    Attributes:
     - url
    """
    def __init__(self, url=None):
        self.url = url

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.url = GroupCallUrl()
                    self.url.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateGroupCallUrlResponse')
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRUCT, 1)
            self.url.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.url))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class JoinChatByCallUrlRequest(object):
    """
    Attributes:
     - urlId
     - reqSeq
    """
    def __init__(self, urlId=None, reqSeq=None):
        self.urlId = urlId
        self.reqSeq = reqSeq

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.urlId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('JoinChatByCallUrlRequest')
        if self.urlId is not None:
            oprot.writeFieldBegin('urlId', TType.STRING, 1)
            oprot.writeString(self.urlId)
            oprot.writeFieldEnd()
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 2)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.urlId))
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class JoinChatByCallUrlResponse(object):
    """
    Attributes:
     - chat
    """
    def __init__(self, chat=None):
        self.chat = chat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.chat = Chat()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('JoinChatByCallUrlResponse')
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 1)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelToken(object):
    """
    Attributes:
     - token
     - obsToken
     - expiration
     - refreshToken
     - channelAccessToken
    """
    def __init__(self, token=None, obsToken=None, expiration=None, refreshToken=None, channelAccessToken=None):
        self.token = token
        self.obsToken = obsToken
        self.expiration = expiration
        self.refreshToken = refreshToken
        self.channelAccessToken = channelAccessToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.obsToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.expiration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.refreshToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.channelAccessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelToken')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.obsToken is not None:
            oprot.writeFieldBegin('obsToken', TType.STRING, 2)
            oprot.writeString(self.obsToken)
            oprot.writeFieldEnd()
        if self.expiration is not None:
            oprot.writeFieldBegin('expiration', TType.I64, 3)
            oprot.writeI64(self.expiration)
            oprot.writeFieldEnd()
        if self.refreshToken is not None:
            oprot.writeFieldBegin('refreshToken', TType.STRING, 4)
            oprot.writeString(self.refreshToken)
            oprot.writeFieldEnd()
        if self.channelAccessToken is not None:
            oprot.writeFieldBegin('channelAccessToken', TType.STRING, 5)
            oprot.writeString(self.channelAccessToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.obsToken))
        value = (value * 31) ^ hash(make_hashable(self.expiration))
        value = (value * 31) ^ hash(make_hashable(self.refreshToken))
        value = (value * 31) ^ hash(make_hashable(self.channelAccessToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelInfo(object):
    """
    Attributes:
     - channelId
     - name
     - entryPageUrl
     - descriptionText
     - provider
     - publicType
     - iconImage
     - permissions
     - iconThumbnailImage
     - channelConfigurations
     - lcsAllApiUsable
     - allowedPermissions
     - channelDomains
     - updatedTimestamp
     - featureLicenses
    """
    def __init__(self, channelId=None, name=None, entryPageUrl=None, descriptionText=None, provider=None, publicType=None, iconImage=None, permissions=None, iconThumbnailImage=None, channelConfigurations=None, lcsAllApiUsable=None, allowedPermissions=None, channelDomains=None, updatedTimestamp=None, featureLicenses=None):
        self.channelId = channelId
        self.name = name
        self.entryPageUrl = entryPageUrl
        self.descriptionText = descriptionText
        self.provider = provider
        self.publicType = publicType
        self.iconImage = iconImage
        self.permissions = permissions
        self.iconThumbnailImage = iconThumbnailImage
        self.channelConfigurations = channelConfigurations
        self.lcsAllApiUsable = lcsAllApiUsable
        self.allowedPermissions = allowedPermissions
        self.channelDomains = channelDomains
        self.updatedTimestamp = updatedTimestamp
        self.featureLicenses = featureLicenses

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.entryPageUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.descriptionText = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.provider = ChannelProvider()
                    self.provider.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.publicType = ChannelPublicType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.iconImage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.permissions = []
                    (_, elem294) = iprot.readListBegin()
                    for _ in range(elem294):
                        elem295 = iprot.readString()
                        self.permissions.append(elem295)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.iconThumbnailImage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.channelConfigurations = []
                    (_, elem296) = iprot.readListBegin()
                    for _ in range(elem296):
                        elem297 = ChannelConfigurations(iprot.readI32())
                        self.channelConfigurations.append(elem297)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.lcsAllApiUsable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.SET:
                    self.allowedPermissions = set()
                    (_, elem298) = iprot.readSetBegin()
                    for _ in range(elem298):
                        elem299 = ChannelAllowedPermissions(iprot.readI32())
                        self.allowedPermissions.add(elem299)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.channelDomains = []
                    (_, elem300) = iprot.readListBegin()
                    for _ in range(elem300):
                        elem301 = ChannelDomain()
                        elem301.read(iprot)
                        self.channelDomains.append(elem301)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.updatedTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.SET:
                    self.featureLicenses = set()
                    (_, elem302) = iprot.readSetBegin()
                    for _ in range(elem302):
                        elem303 = ChannelFeatureLicenses(iprot.readI32())
                        self.featureLicenses.add(elem303)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelInfo')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.entryPageUrl is not None:
            oprot.writeFieldBegin('entryPageUrl', TType.STRING, 4)
            oprot.writeString(self.entryPageUrl)
            oprot.writeFieldEnd()
        if self.descriptionText is not None:
            oprot.writeFieldBegin('descriptionText', TType.STRING, 5)
            oprot.writeString(self.descriptionText)
            oprot.writeFieldEnd()
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.STRUCT, 6)
            self.provider.write(oprot)
            oprot.writeFieldEnd()
        if self.publicType is not None:
            oprot.writeFieldBegin('publicType', TType.I32, 7)
            oprot.writeI32(self.publicType)
            oprot.writeFieldEnd()
        if self.iconImage is not None:
            oprot.writeFieldBegin('iconImage', TType.STRING, 8)
            oprot.writeString(self.iconImage)
            oprot.writeFieldEnd()
        if self.permissions is not None:
            oprot.writeFieldBegin('permissions', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.permissions))
            for elem304 in self.permissions:
                oprot.writeString(elem304)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.iconThumbnailImage is not None:
            oprot.writeFieldBegin('iconThumbnailImage', TType.STRING, 11)
            oprot.writeString(self.iconThumbnailImage)
            oprot.writeFieldEnd()
        if self.channelConfigurations is not None:
            oprot.writeFieldBegin('channelConfigurations', TType.LIST, 12)
            oprot.writeListBegin(TType.I32, len(self.channelConfigurations))
            for elem305 in self.channelConfigurations:
                oprot.writeI32(elem305)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lcsAllApiUsable is not None:
            oprot.writeFieldBegin('lcsAllApiUsable', TType.BOOL, 13)
            oprot.writeBool(self.lcsAllApiUsable)
            oprot.writeFieldEnd()
        if self.allowedPermissions is not None:
            oprot.writeFieldBegin('allowedPermissions', TType.SET, 14)
            oprot.writeSetBegin(TType.I32, len(self.allowedPermissions))
            for elem306 in self.allowedPermissions:
                oprot.writeI32(elem306)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.channelDomains is not None:
            oprot.writeFieldBegin('channelDomains', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.channelDomains))
            for elem307 in self.channelDomains:
                elem307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.updatedTimestamp is not None:
            oprot.writeFieldBegin('updatedTimestamp', TType.I64, 16)
            oprot.writeI64(self.updatedTimestamp)
            oprot.writeFieldEnd()
        if self.featureLicenses is not None:
            oprot.writeFieldBegin('featureLicenses', TType.SET, 17)
            oprot.writeSetBegin(TType.I32, len(self.featureLicenses))
            for elem308 in self.featureLicenses:
                oprot.writeI32(elem308)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.entryPageUrl))
        value = (value * 31) ^ hash(make_hashable(self.descriptionText))
        value = (value * 31) ^ hash(make_hashable(self.provider))
        value = (value * 31) ^ hash(make_hashable(self.publicType))
        value = (value * 31) ^ hash(make_hashable(self.iconImage))
        value = (value * 31) ^ hash(make_hashable(self.permissions))
        value = (value * 31) ^ hash(make_hashable(self.iconThumbnailImage))
        value = (value * 31) ^ hash(make_hashable(self.channelConfigurations))
        value = (value * 31) ^ hash(make_hashable(self.lcsAllApiUsable))
        value = (value * 31) ^ hash(make_hashable(self.allowedPermissions))
        value = (value * 31) ^ hash(make_hashable(self.channelDomains))
        value = (value * 31) ^ hash(make_hashable(self.updatedTimestamp))
        value = (value * 31) ^ hash(make_hashable(self.featureLicenses))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelProvider(object):
    """
    Attributes:
     - name
     - certified
    """
    def __init__(self, name=None, certified=None):
        self.name = name
        self.certified = certified

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.certified = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelProvider')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.certified is not None:
            oprot.writeFieldBegin('certified', TType.BOOL, 2)
            oprot.writeBool(self.certified)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.certified))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelDomain(object):
    """
    Attributes:
     - host
     - removed
    """
    def __init__(self, host=None, removed=None):
        self.host = host
        self.removed = removed

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.removed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelDomain')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host)
            oprot.writeFieldEnd()
        if self.removed is not None:
            oprot.writeFieldBegin('removed', TType.BOOL, 2)
            oprot.writeBool(self.removed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.host))
        value = (value * 31) ^ hash(make_hashable(self.removed))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class WebLoginRequest(object):
    """
    Attributes:
     - hookedFullUrl
     - sessionString
     - fromIAB
     - sourceApplication
    """
    def __init__(self, hookedFullUrl=None, sessionString=None, fromIAB=None, sourceApplication=None):
        self.hookedFullUrl = hookedFullUrl
        self.sessionString = sessionString
        self.fromIAB = fromIAB
        self.sourceApplication = sourceApplication

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hookedFullUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessionString = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.fromIAB = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sourceApplication = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('WebLoginRequest')
        if self.hookedFullUrl is not None:
            oprot.writeFieldBegin('hookedFullUrl', TType.STRING, 1)
            oprot.writeString(self.hookedFullUrl)
            oprot.writeFieldEnd()
        if self.sessionString is not None:
            oprot.writeFieldBegin('sessionString', TType.STRING, 2)
            oprot.writeString(self.sessionString)
            oprot.writeFieldEnd()
        if self.fromIAB is not None:
            oprot.writeFieldBegin('fromIAB', TType.BOOL, 3)
            oprot.writeBool(self.fromIAB)
            oprot.writeFieldEnd()
        if self.sourceApplication is not None:
            oprot.writeFieldBegin('sourceApplication', TType.STRING, 4)
            oprot.writeString(self.sourceApplication)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.hookedFullUrl))
        value = (value * 31) ^ hash(make_hashable(self.sessionString))
        value = (value * 31) ^ hash(make_hashable(self.fromIAB))
        value = (value * 31) ^ hash(make_hashable(self.sourceApplication))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class WebLoginResponse(object):
    """
    Attributes:
     - returnUrl
     - optionalReturnUrl
     - redirectConfirmationPageUrl
    """
    def __init__(self, returnUrl=None, optionalReturnUrl=None, redirectConfirmationPageUrl=None):
        self.returnUrl = returnUrl
        self.optionalReturnUrl = optionalReturnUrl
        self.redirectConfirmationPageUrl = redirectConfirmationPageUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.returnUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.optionalReturnUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.redirectConfirmationPageUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('WebLoginResponse')
        if self.returnUrl is not None:
            oprot.writeFieldBegin('returnUrl', TType.STRING, 1)
            oprot.writeString(self.returnUrl)
            oprot.writeFieldEnd()
        if self.optionalReturnUrl is not None:
            oprot.writeFieldBegin('optionalReturnUrl', TType.STRING, 2)
            oprot.writeString(self.optionalReturnUrl)
            oprot.writeFieldEnd()
        if self.redirectConfirmationPageUrl is not None:
            oprot.writeFieldBegin('redirectConfirmationPageUrl', TType.STRING, 3)
            oprot.writeString(self.redirectConfirmationPageUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.returnUrl))
        value = (value * 31) ^ hash(make_hashable(self.optionalReturnUrl))
        value = (value * 31) ^ hash(make_hashable(self.redirectConfirmationPageUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RequestTokenResponse(object):
    """
    Attributes:
     - requestToken
     - returnUrl
    """
    def __init__(self, requestToken=None, returnUrl=None):
        self.requestToken = requestToken
        self.returnUrl = returnUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.returnUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RequestTokenResponse')
        if self.requestToken is not None:
            oprot.writeFieldBegin('requestToken', TType.STRING, 1)
            oprot.writeString(self.requestToken)
            oprot.writeFieldEnd()
        if self.returnUrl is not None:
            oprot.writeFieldBegin('returnUrl', TType.STRING, 2)
            oprot.writeString(self.returnUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestToken))
        value = (value * 31) ^ hash(make_hashable(self.returnUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelNotificationSetting(object):
    """
    Attributes:
     - channelId
     - name
     - notificationReceivable
     - messageReceivable
     - showDefault
    """
    def __init__(self, channelId=None, name=None, notificationReceivable=None, messageReceivable=None, showDefault=None):
        self.channelId = channelId
        self.name = name
        self.notificationReceivable = notificationReceivable
        self.messageReceivable = messageReceivable
        self.showDefault = showDefault

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.notificationReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.messageReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.showDefault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelNotificationSetting')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.notificationReceivable is not None:
            oprot.writeFieldBegin('notificationReceivable', TType.BOOL, 3)
            oprot.writeBool(self.notificationReceivable)
            oprot.writeFieldEnd()
        if self.messageReceivable is not None:
            oprot.writeFieldBegin('messageReceivable', TType.BOOL, 4)
            oprot.writeBool(self.messageReceivable)
            oprot.writeFieldEnd()
        if self.showDefault is not None:
            oprot.writeFieldBegin('showDefault', TType.BOOL, 5)
            oprot.writeBool(self.showDefault)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.notificationReceivable))
        value = (value * 31) ^ hash(make_hashable(self.messageReceivable))
        value = (value * 31) ^ hash(make_hashable(self.showDefault))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelDomains(object):
    """
    Attributes:
     - channelDomains
     - revision
    """
    def __init__(self, channelDomains=None, revision=None):
        self.channelDomains = channelDomains
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.channelDomains = []
                    (_, elem309) = iprot.readListBegin()
                    for _ in range(elem309):
                        elem310 = ChannelDomain()
                        elem310.read(iprot)
                        self.channelDomains.append(elem310)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelDomains')
        if self.channelDomains is not None:
            oprot.writeFieldBegin('channelDomains', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.channelDomains))
            for elem311 in self.channelDomains:
                elem311.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelDomains))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelIdWithLastUpdated(object):
    """
    Attributes:
     - channelId
     - lastUpdated
    """
    def __init__(self, channelId=None, lastUpdated=None):
        self.channelId = channelId
        self.lastUpdated = lastUpdated

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastUpdated = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelIdWithLastUpdated')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.lastUpdated is not None:
            oprot.writeFieldBegin('lastUpdated', TType.I64, 2)
            oprot.writeI64(self.lastUpdated)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.lastUpdated))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinUseReservation(object):
    """
    Attributes:
     - channelId
     - shopOrderId
     - appStoreCode
     - items
     - country
    """
    def __init__(self, channelId=None, shopOrderId=None, appStoreCode=None, items=None, country=None):
        self.channelId = channelId
        self.shopOrderId = shopOrderId
        self.appStoreCode = appStoreCode
        self.items = items
        self.country = country

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shopOrderId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.appStoreCode = AppStoreCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.items = []
                    (_, elem312) = iprot.readListBegin()
                    for _ in range(elem312):
                        elem313 = CoinUseReservationItem()
                        elem313.read(iprot)
                        self.items.append(elem313)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.country = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinUseReservation')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.shopOrderId is not None:
            oprot.writeFieldBegin('shopOrderId', TType.STRING, 2)
            oprot.writeString(self.shopOrderId)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 3)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for elem314 in self.items:
                elem314.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 5)
            oprot.writeString(self.country)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.shopOrderId))
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.items))
        value = (value * 31) ^ hash(make_hashable(self.country))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinUseReservationItem(object):
    """
    Attributes:
     - itemId
     - itemName
     - amount
    """
    def __init__(self, itemId=None, itemName=None, amount=None):
        self.itemId = itemId
        self.itemName = itemName
        self.amount = amount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.itemId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.itemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.amount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinUseReservationItem')
        if self.itemId is not None:
            oprot.writeFieldBegin('itemId', TType.STRING, 1)
            oprot.writeString(self.itemId)
            oprot.writeFieldEnd()
        if self.itemName is not None:
            oprot.writeFieldBegin('itemName', TType.STRING, 2)
            oprot.writeString(self.itemName)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.I32, 3)
            oprot.writeI32(self.amount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.itemId))
        value = (value * 31) ^ hash(make_hashable(self.itemName))
        value = (value * 31) ^ hash(make_hashable(self.amount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelSettings(object):
    """
    Attributes:
     - unapprovedMessageReceivable
    """
    def __init__(self, unapprovedMessageReceivable=None):
        self.unapprovedMessageReceivable = unapprovedMessageReceivable

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.unapprovedMessageReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelSettings')
        if self.unapprovedMessageReceivable is not None:
            oprot.writeFieldBegin('unapprovedMessageReceivable', TType.BOOL, 1)
            oprot.writeBool(self.unapprovedMessageReceivable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.unapprovedMessageReceivable))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ApprovedChannelInfo(object):
    """
    Attributes:
     - channelInfo
     - approvedAt
    """
    def __init__(self, channelInfo=None, approvedAt=None):
        self.channelInfo = channelInfo
        self.approvedAt = approvedAt

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.channelInfo = ChannelInfo()
                    self.channelInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.approvedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ApprovedChannelInfo')
        if self.channelInfo is not None:
            oprot.writeFieldBegin('channelInfo', TType.STRUCT, 1)
            self.channelInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.approvedAt is not None:
            oprot.writeFieldBegin('approvedAt', TType.I64, 2)
            oprot.writeI64(self.approvedAt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelInfo))
        value = (value * 31) ^ hash(make_hashable(self.approvedAt))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ApprovedChannelInfos(object):
    """
    Attributes:
     - approvedChannelInfos
     - revision
    """
    def __init__(self, approvedChannelInfos=None, revision=None):
        self.approvedChannelInfos = approvedChannelInfos
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.approvedChannelInfos = []
                    (_, elem315) = iprot.readListBegin()
                    for _ in range(elem315):
                        elem316 = ApprovedChannelInfo()
                        elem316.read(iprot)
                        self.approvedChannelInfos.append(elem316)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ApprovedChannelInfos')
        if self.approvedChannelInfos is not None:
            oprot.writeFieldBegin('approvedChannelInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.approvedChannelInfos))
            for elem317 in self.approvedChannelInfos:
                elem317.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.approvedChannelInfos))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Chatapp(object):
    """
    Attributes:
     - chatappId
     - name
     - icon
     - url
     - availableChatTypes
    """
    def __init__(self, chatappId=None, name=None, icon=None, url=None, availableChatTypes=None):
        self.chatappId = chatappId
        self.name = name
        self.icon = icon
        self.url = url
        self.availableChatTypes = availableChatTypes

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatappId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.icon = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.availableChatTypes = []
                    (_, elem318) = iprot.readListBegin()
                    for _ in range(elem318):
                        elem319 = AvailableChatTypes(iprot.readI32())
                        self.availableChatTypes.append(elem319)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Chatapp')
        if self.chatappId is not None:
            oprot.writeFieldBegin('chatappId', TType.STRING, 1)
            oprot.writeString(self.chatappId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 3)
            oprot.writeString(self.icon)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 4)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        if self.availableChatTypes is not None:
            oprot.writeFieldBegin('availableChatTypes', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.availableChatTypes))
            for elem320 in self.availableChatTypes:
                oprot.writeI32(elem320)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatappId))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.icon))
        value = (value * 31) ^ hash(make_hashable(self.url))
        value = (value * 31) ^ hash(make_hashable(self.availableChatTypes))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MyChatapp(object):
    """
    Attributes:
     - app
     - category
     - priority
    """
    def __init__(self, app=None, category=None, priority=None):
        self.app = app
        self.category = category
        self.priority = priority

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.app = Chatapp()
                    self.app.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.category = ChatAppCategory(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.priority = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MyChatapp')
        if self.app is not None:
            oprot.writeFieldBegin('app', TType.STRUCT, 1)
            self.app.write(oprot)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.I32, 2)
            oprot.writeI32(self.category)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I64, 3)
            oprot.writeI64(self.priority)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.app))
        value = (value * 31) ^ hash(make_hashable(self.category))
        value = (value * 31) ^ hash(make_hashable(self.priority))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetChatappRequest(object):
    """
    Attributes:
     - chatappId
     - language
    """
    def __init__(self, chatappId=None, language=None):
        self.chatappId = chatappId
        self.language = language

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatappId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetChatappRequest')
        if self.chatappId is not None:
            oprot.writeFieldBegin('chatappId', TType.STRING, 1)
            oprot.writeString(self.chatappId)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 2)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatappId))
        value = (value * 31) ^ hash(make_hashable(self.language))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetChatappResponse(object):
    """
    Attributes:
     - app
    """
    def __init__(self, app=None):
        self.app = app

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.app = Chatapp()
                    self.app.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetChatappResponse')
        if self.app is not None:
            oprot.writeFieldBegin('app', TType.STRUCT, 1)
            self.app.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.app))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetMyChatappsRequest(object):
    """
    Attributes:
     - language
     - continuationToken
    """
    def __init__(self, language=None, continuationToken=None):
        self.language = language
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetMyChatappsRequest')
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 1)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 2)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetMyChatappsResponse(object):
    """
    Attributes:
     - apps
     - continuationToken
    """
    def __init__(self, apps=None, continuationToken=None):
        self.apps = apps
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.apps = []
                    (_, elem321) = iprot.readListBegin()
                    for _ in range(elem321):
                        elem322 = MyChatapp()
                        elem322.read(iprot)
                        self.apps.append(elem322)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetMyChatappsResponse')
        if self.apps is not None:
            oprot.writeFieldBegin('apps', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.apps))
            for elem323 in self.apps:
                elem323.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 2)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.apps))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Coin(object):
    """
    Attributes:
     - freeCoinBalance
     - payedCoinBalance
     - totalCoinBalance
     - rewardCoinBalance
    """
    def __init__(self, freeCoinBalance=None, payedCoinBalance=None, totalCoinBalance=None, rewardCoinBalance=None):
        self.freeCoinBalance = freeCoinBalance
        self.payedCoinBalance = payedCoinBalance
        self.totalCoinBalance = totalCoinBalance
        self.rewardCoinBalance = rewardCoinBalance

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.freeCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.payedCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rewardCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Coin')
        if self.freeCoinBalance is not None:
            oprot.writeFieldBegin('freeCoinBalance', TType.I32, 1)
            oprot.writeI32(self.freeCoinBalance)
            oprot.writeFieldEnd()
        if self.payedCoinBalance is not None:
            oprot.writeFieldBegin('payedCoinBalance', TType.I32, 2)
            oprot.writeI32(self.payedCoinBalance)
            oprot.writeFieldEnd()
        if self.totalCoinBalance is not None:
            oprot.writeFieldBegin('totalCoinBalance', TType.I32, 3)
            oprot.writeI32(self.totalCoinBalance)
            oprot.writeFieldEnd()
        if self.rewardCoinBalance is not None:
            oprot.writeFieldBegin('rewardCoinBalance', TType.I32, 4)
            oprot.writeI32(self.rewardCoinBalance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.freeCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.payedCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.totalCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.rewardCoinBalance))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinPayLoad(object):
    """
    Attributes:
     - payCoin
     - freeCoin
     - type
     - rewardCoin
    """
    def __init__(self, payCoin=None, freeCoin=None, type=None, rewardCoin=None):
        self.payCoin = payCoin
        self.freeCoin = freeCoin
        self.type = type
        self.rewardCoin = rewardCoin

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.payCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.freeCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = CoinPayLoadType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rewardCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinPayLoad')
        if self.payCoin is not None:
            oprot.writeFieldBegin('payCoin', TType.I32, 1)
            oprot.writeI32(self.payCoin)
            oprot.writeFieldEnd()
        if self.freeCoin is not None:
            oprot.writeFieldBegin('freeCoin', TType.I32, 2)
            oprot.writeI32(self.freeCoin)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.rewardCoin is not None:
            oprot.writeFieldBegin('rewardCoin', TType.I32, 4)
            oprot.writeI32(self.rewardCoin)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.payCoin))
        value = (value * 31) ^ hash(make_hashable(self.freeCoin))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.rewardCoin))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinHistory(object):
    """
    Attributes:
     - payDate
     - coinBalance
     - coin
     - price
     - title
     - refund
     - paySeq
     - currency
     - currencySign
     - displayPrice
     - payload
     - channelId
    """
    def __init__(self, payDate=None, coinBalance=None, coin=None, price=None, title=None, refund=None, paySeq=None, currency=None, currencySign=None, displayPrice=None, payload=None, channelId=None):
        self.payDate = payDate
        self.coinBalance = coinBalance
        self.coin = coin
        self.price = price
        self.title = title
        self.refund = refund
        self.paySeq = paySeq
        self.currency = currency
        self.currencySign = currencySign
        self.displayPrice = displayPrice
        self.payload = payload
        self.channelId = channelId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.payDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.coinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.coin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.refund = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.paySeq = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.currencySign = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayPrice = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.payload = CoinPayLoad()
                    self.payload.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinHistory')
        if self.payDate is not None:
            oprot.writeFieldBegin('payDate', TType.I64, 1)
            oprot.writeI64(self.payDate)
            oprot.writeFieldEnd()
        if self.coinBalance is not None:
            oprot.writeFieldBegin('coinBalance', TType.I32, 2)
            oprot.writeI32(self.coinBalance)
            oprot.writeFieldEnd()
        if self.coin is not None:
            oprot.writeFieldBegin('coin', TType.I32, 3)
            oprot.writeI32(self.coin)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 4)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 5)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.refund is not None:
            oprot.writeFieldBegin('refund', TType.BOOL, 6)
            oprot.writeBool(self.refund)
            oprot.writeFieldEnd()
        if self.paySeq is not None:
            oprot.writeFieldBegin('paySeq', TType.STRING, 7)
            oprot.writeString(self.paySeq)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 8)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.currencySign is not None:
            oprot.writeFieldBegin('currencySign', TType.STRING, 9)
            oprot.writeString(self.currencySign)
            oprot.writeFieldEnd()
        if self.displayPrice is not None:
            oprot.writeFieldBegin('displayPrice', TType.STRING, 10)
            oprot.writeString(self.displayPrice)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRUCT, 11)
            self.payload.write(oprot)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 12)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.payDate))
        value = (value * 31) ^ hash(make_hashable(self.coinBalance))
        value = (value * 31) ^ hash(make_hashable(self.coin))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.refund))
        value = (value * 31) ^ hash(make_hashable(self.paySeq))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.currencySign))
        value = (value * 31) ^ hash(make_hashable(self.displayPrice))
        value = (value * 31) ^ hash(make_hashable(self.payload))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinProductItem(object):
    """
    Attributes:
     - itemId
     - coin
     - freeCoin
     - currency
     - price
     - displayPrice
     - name
     - desc
    """
    def __init__(self, itemId=None, coin=None, freeCoin=None, currency=None, price=None, displayPrice=None, name=None, desc=None):
        self.itemId = itemId
        self.coin = coin
        self.freeCoin = freeCoin
        self.currency = currency
        self.price = price
        self.displayPrice = displayPrice
        self.name = name
        self.desc = desc

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.itemId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.coin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.freeCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.displayPrice = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.desc = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinProductItem')
        if self.itemId is not None:
            oprot.writeFieldBegin('itemId', TType.STRING, 1)
            oprot.writeString(self.itemId)
            oprot.writeFieldEnd()
        if self.coin is not None:
            oprot.writeFieldBegin('coin', TType.I32, 2)
            oprot.writeI32(self.coin)
            oprot.writeFieldEnd()
        if self.freeCoin is not None:
            oprot.writeFieldBegin('freeCoin', TType.I32, 3)
            oprot.writeI32(self.freeCoin)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 5)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 6)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.displayPrice is not None:
            oprot.writeFieldBegin('displayPrice', TType.STRING, 7)
            oprot.writeString(self.displayPrice)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 8)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 9)
            oprot.writeString(self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.itemId))
        value = (value * 31) ^ hash(make_hashable(self.coin))
        value = (value * 31) ^ hash(make_hashable(self.freeCoin))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.displayPrice))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.desc))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetTotalCoinBalanceRequest(object):
    """
    Attributes:
     - appStoreCode
    """
    def __init__(self, appStoreCode=None):
        self.appStoreCode = appStoreCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appStoreCode = AppStoreCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetTotalCoinBalanceRequest')
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 1)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetTotalCoinBalanceResponse(object):
    """
    Attributes:
     - totalBalance
     - paidCoinBalance
     - freeCoinBalance
     - rewardCoinBalance
     - expectedAutoExchangedCoinBalance
    """
    def __init__(self, totalBalance=None, paidCoinBalance=None, freeCoinBalance=None, rewardCoinBalance=None, expectedAutoExchangedCoinBalance=None):
        self.totalBalance = totalBalance
        self.paidCoinBalance = paidCoinBalance
        self.freeCoinBalance = freeCoinBalance
        self.rewardCoinBalance = rewardCoinBalance
        self.expectedAutoExchangedCoinBalance = expectedAutoExchangedCoinBalance

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.totalBalance = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.paidCoinBalance = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.freeCoinBalance = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rewardCoinBalance = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.expectedAutoExchangedCoinBalance = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetTotalCoinBalanceResponse')
        if self.totalBalance is not None:
            oprot.writeFieldBegin('totalBalance', TType.STRING, 1)
            oprot.writeString(self.totalBalance)
            oprot.writeFieldEnd()
        if self.paidCoinBalance is not None:
            oprot.writeFieldBegin('paidCoinBalance', TType.STRING, 2)
            oprot.writeString(self.paidCoinBalance)
            oprot.writeFieldEnd()
        if self.freeCoinBalance is not None:
            oprot.writeFieldBegin('freeCoinBalance', TType.STRING, 3)
            oprot.writeString(self.freeCoinBalance)
            oprot.writeFieldEnd()
        if self.rewardCoinBalance is not None:
            oprot.writeFieldBegin('rewardCoinBalance', TType.STRING, 4)
            oprot.writeString(self.rewardCoinBalance)
            oprot.writeFieldEnd()
        if self.expectedAutoExchangedCoinBalance is not None:
            oprot.writeFieldBegin('expectedAutoExchangedCoinBalance', TType.STRING, 5)
            oprot.writeString(self.expectedAutoExchangedCoinBalance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.totalBalance))
        value = (value * 31) ^ hash(make_hashable(self.paidCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.freeCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.rewardCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.expectedAutoExchangedCoinBalance))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetCoinProductsRequest(object):
    """
    Attributes:
     - appStoreCode
     - country
     - language
     - pgCode
    """
    def __init__(self, appStoreCode=None, country=None, language=None, pgCode=None):
        self.appStoreCode = appStoreCode
        self.country = country
        self.language = language
        self.pgCode = pgCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appStoreCode = AppStoreCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.country = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pgCode = PgCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetCoinProductsRequest')
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 1)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 2)
            oprot.writeString(self.country)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 3)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.pgCode is not None:
            oprot.writeFieldBegin('pgCode', TType.I32, 4)
            oprot.writeI32(self.pgCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.country))
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.pgCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetCoinProductsResponse(object):
    """
    Attributes:
     - items
    """
    def __init__(self, items=None):
        self.items = items

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.items = []
                    (_, elem324) = iprot.readListBegin()
                    for _ in range(elem324):
                        elem325 = CoinProductItem()
                        elem325.read(iprot)
                        self.items.append(elem325)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetCoinProductsResponse')
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for elem326 in self.items:
                elem326.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.items))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinPurchaseReservation(object):
    """
    Attributes:
     - productId
     - country
     - currency
     - price
     - appStoreCode
     - language
     - pgCode
     - redirectUrl
    """
    def __init__(self, productId=None, country=None, currency=None, price=None, appStoreCode=None, language=None, pgCode=None, redirectUrl=None):
        self.productId = productId
        self.country = country
        self.currency = currency
        self.price = price
        self.appStoreCode = appStoreCode
        self.language = language
        self.pgCode = pgCode
        self.redirectUrl = redirectUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.productId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.country = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.appStoreCode = AppStoreCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.pgCode = PgCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.redirectUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinPurchaseReservation')
        if self.productId is not None:
            oprot.writeFieldBegin('productId', TType.STRING, 1)
            oprot.writeString(self.productId)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 2)
            oprot.writeString(self.country)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 3)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 4)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 5)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 6)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.pgCode is not None:
            oprot.writeFieldBegin('pgCode', TType.I32, 7)
            oprot.writeI32(self.pgCode)
            oprot.writeFieldEnd()
        if self.redirectUrl is not None:
            oprot.writeFieldBegin('redirectUrl', TType.STRING, 8)
            oprot.writeString(self.redirectUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.productId))
        value = (value * 31) ^ hash(make_hashable(self.country))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.pgCode))
        value = (value * 31) ^ hash(make_hashable(self.redirectUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaymentReservationResult(object):
    """
    Attributes:
     - orderId
     - confirmUrl
     - extras
    """
    def __init__(self, orderId=None, confirmUrl=None, extras=None):
        self.orderId = orderId
        self.confirmUrl = confirmUrl
        self.extras = extras

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.orderId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.confirmUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.extras = {}
                    (_, _, elem327) = iprot.readMapBegin()
                    for _ in range(elem327):
                        elem329 = iprot.readString()
                        elem328 = iprot.readString()
                        self.extras[elem329] = elem328
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaymentReservationResult')
        if self.orderId is not None:
            oprot.writeFieldBegin('orderId', TType.STRING, 1)
            oprot.writeString(self.orderId)
            oprot.writeFieldEnd()
        if self.confirmUrl is not None:
            oprot.writeFieldBegin('confirmUrl', TType.STRING, 2)
            oprot.writeString(self.confirmUrl)
            oprot.writeFieldEnd()
        if self.extras is not None:
            oprot.writeFieldBegin('extras', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extras))
            for elem331, elem330 in self.extras.items():
                oprot.writeString(elem331)
                oprot.writeString(elem330)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.orderId))
        value = (value * 31) ^ hash(make_hashable(self.confirmUrl))
        value = (value * 31) ^ hash(make_hashable(self.extras))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetCoinHistoryRequest(object):
    """
    Attributes:
     - appStoreCode
     - country
     - language
     - searchEndDate
     - offset
     - limit
    """
    def __init__(self, appStoreCode=None, country=None, language=None, searchEndDate=None, offset=None, limit=None):
        self.appStoreCode = appStoreCode
        self.country = country
        self.language = language
        self.searchEndDate = searchEndDate
        self.offset = offset
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appStoreCode = AppStoreCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.country = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.searchEndDate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetCoinHistoryRequest')
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 1)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 2)
            oprot.writeString(self.country)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 3)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.searchEndDate is not None:
            oprot.writeFieldBegin('searchEndDate', TType.STRING, 4)
            oprot.writeString(self.searchEndDate)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 5)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 6)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.country))
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.searchEndDate))
        value = (value * 31) ^ hash(make_hashable(self.offset))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetCoinHistoryResponse(object):
    """
    Attributes:
     - histories
     - balance
     - offset
     - hasNext
    """
    def __init__(self, histories=None, balance=None, offset=None, hasNext=None):
        self.histories = histories
        self.balance = balance
        self.offset = offset
        self.hasNext = hasNext

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.histories = []
                    (_, elem332) = iprot.readListBegin()
                    for _ in range(elem332):
                        elem333 = CoinHistory()
                        elem333.read(iprot)
                        self.histories.append(elem333)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Coin()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetCoinHistoryResponse')
        if self.histories is not None:
            oprot.writeFieldBegin('histories', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.histories))
            for elem334 in self.histories:
                elem334.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 3)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 4)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.histories))
        value = (value * 31) ^ hash(make_hashable(self.balance))
        value = (value * 31) ^ hash(make_hashable(self.offset))
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RefreshApiRetryPolicy(object):
    """
    Attributes:
     - initialDelayInMillis
     - maxDelayInMillis
     - multiplier
     - jitterRate
    """
    def __init__(self, initialDelayInMillis=None, maxDelayInMillis=None, multiplier=None, jitterRate=None):
        self.initialDelayInMillis = initialDelayInMillis
        self.maxDelayInMillis = maxDelayInMillis
        self.multiplier = multiplier
        self.jitterRate = jitterRate

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.initialDelayInMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxDelayInMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.multiplier = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.jitterRate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RefreshApiRetryPolicy')
        if self.initialDelayInMillis is not None:
            oprot.writeFieldBegin('initialDelayInMillis', TType.I64, 1)
            oprot.writeI64(self.initialDelayInMillis)
            oprot.writeFieldEnd()
        if self.maxDelayInMillis is not None:
            oprot.writeFieldBegin('maxDelayInMillis', TType.I64, 2)
            oprot.writeI64(self.maxDelayInMillis)
            oprot.writeFieldEnd()
        if self.multiplier is not None:
            oprot.writeFieldBegin('multiplier', TType.DOUBLE, 3)
            oprot.writeDouble(self.multiplier)
            oprot.writeFieldEnd()
        if self.jitterRate is not None:
            oprot.writeFieldBegin('jitterRate', TType.DOUBLE, 4)
            oprot.writeDouble(self.jitterRate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.initialDelayInMillis))
        value = (value * 31) ^ hash(make_hashable(self.maxDelayInMillis))
        value = (value * 31) ^ hash(make_hashable(self.multiplier))
        value = (value * 31) ^ hash(make_hashable(self.jitterRate))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateQrSessionRequest(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateQrSessionRequest')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateQrSessionResponse(object):
    """
    Attributes:
     - authSessionId
    """
    def __init__(self, authSessionId=None):
        self.authSessionId = authSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateQrSessionResponse')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateQrCodeRequest(object):
    """
    Attributes:
     - authSessionId
    """
    def __init__(self, authSessionId=None):
        self.authSessionId = authSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateQrCodeRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateQrCodeResponse(object):
    """
    Attributes:
     - callbackUrl
     - longPollingMaxCount
     - longPollingIntervalSec
    """
    def __init__(self, callbackUrl=None, longPollingMaxCount=None, longPollingIntervalSec=None):
        self.callbackUrl = callbackUrl
        self.longPollingMaxCount = longPollingMaxCount
        self.longPollingIntervalSec = longPollingIntervalSec

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.callbackUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.longPollingMaxCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.longPollingIntervalSec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateQrCodeResponse')
        if self.callbackUrl is not None:
            oprot.writeFieldBegin('callbackUrl', TType.STRING, 1)
            oprot.writeString(self.callbackUrl)
            oprot.writeFieldEnd()
        if self.longPollingMaxCount is not None:
            oprot.writeFieldBegin('longPollingMaxCount', TType.I32, 2)
            oprot.writeI32(self.longPollingMaxCount)
            oprot.writeFieldEnd()
        if self.longPollingIntervalSec is not None:
            oprot.writeFieldBegin('longPollingIntervalSec', TType.I32, 3)
            oprot.writeI32(self.longPollingIntervalSec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.callbackUrl))
        value = (value * 31) ^ hash(make_hashable(self.longPollingMaxCount))
        value = (value * 31) ^ hash(make_hashable(self.longPollingIntervalSec))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreatePinCodeRequest(object):
    """
    Attributes:
     - authSessionId
    """
    def __init__(self, authSessionId=None):
        self.authSessionId = authSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreatePinCodeRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreatePinCodeResponse(object):
    """
    Attributes:
     - pinCode
    """
    def __init__(self, pinCode=None):
        self.pinCode = pinCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pinCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreatePinCodeResponse')
        if self.pinCode is not None:
            oprot.writeFieldBegin('pinCode', TType.STRING, 1)
            oprot.writeString(self.pinCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.pinCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerifyCertificateRequest(object):
    """
    Attributes:
     - authSessionId
     - certificate
    """
    def __init__(self, authSessionId=None, certificate=None):
        self.authSessionId = authSessionId
        self.certificate = certificate

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerifyCertificateRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 2)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerifyCertificateResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerifyCertificateResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class QrCodeLoginRequest(object):
    """
    Attributes:
     - authSessionId
     - systemName
     - autoLoginIsRequired
    """
    def __init__(self, authSessionId=None, systemName=None, autoLoginIsRequired=None):
        self.authSessionId = authSessionId
        self.systemName = systemName
        self.autoLoginIsRequired = autoLoginIsRequired

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoLoginIsRequired = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('QrCodeLoginRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 2)
            oprot.writeString(self.systemName)
            oprot.writeFieldEnd()
        if self.autoLoginIsRequired is not None:
            oprot.writeFieldBegin('autoLoginIsRequired', TType.BOOL, 3)
            oprot.writeBool(self.autoLoginIsRequired)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        value = (value * 31) ^ hash(make_hashable(self.systemName))
        value = (value * 31) ^ hash(make_hashable(self.autoLoginIsRequired))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class QrCodeLoginResponse(object):
    """
    Attributes:
     - certificate
     - accessToken
     - lastBindTimestamp
     - metaData
    """
    def __init__(self, certificate=None, accessToken=None, lastBindTimestamp=None, metaData=None):
        self.certificate = certificate
        self.accessToken = accessToken
        self.lastBindTimestamp = lastBindTimestamp
        self.metaData = metaData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastBindTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem335) = iprot.readMapBegin()
                    for _ in range(elem335):
                        elem337 = iprot.readString()
                        elem336 = iprot.readString()
                        self.metaData[elem337] = elem336
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('QrCodeLoginResponse')
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 1)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 2)
            oprot.writeString(self.accessToken)
            oprot.writeFieldEnd()
        if self.lastBindTimestamp is not None:
            oprot.writeFieldBegin('lastBindTimestamp', TType.I64, 3)
            oprot.writeI64(self.lastBindTimestamp)
            oprot.writeFieldEnd()
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem339, elem338 in self.metaData.items():
                oprot.writeString(elem339)
                oprot.writeString(elem338)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        value = (value * 31) ^ hash(make_hashable(self.accessToken))
        value = (value * 31) ^ hash(make_hashable(self.lastBindTimestamp))
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class QrCodeLoginV2Request(object):
    """
    Attributes:
     - authSessionId
     - systemName
     - modelName
     - autoLoginIsRequired
    """
    def __init__(self, authSessionId=None, systemName=None, modelName=None, autoLoginIsRequired=None):
        self.authSessionId = authSessionId
        self.systemName = systemName
        self.modelName = modelName
        self.autoLoginIsRequired = autoLoginIsRequired

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.modelName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.autoLoginIsRequired = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('QrCodeLoginV2Request')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 2)
            oprot.writeString(self.systemName)
            oprot.writeFieldEnd()
        if self.modelName is not None:
            oprot.writeFieldBegin('modelName', TType.STRING, 3)
            oprot.writeString(self.modelName)
            oprot.writeFieldEnd()
        if self.autoLoginIsRequired is not None:
            oprot.writeFieldBegin('autoLoginIsRequired', TType.BOOL, 4)
            oprot.writeBool(self.autoLoginIsRequired)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        value = (value * 31) ^ hash(make_hashable(self.systemName))
        value = (value * 31) ^ hash(make_hashable(self.modelName))
        value = (value * 31) ^ hash(make_hashable(self.autoLoginIsRequired))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class QrCodeLoginV2Response(object):
    """
    Attributes:
     - certificate
     - accessTokenV2
     - tokenV3IssueResult
     - mid
     - lastBindTimestamp
     - metaData
    """
    def __init__(self, certificate=None, accessTokenV2=None, tokenV3IssueResult=None, mid=None, lastBindTimestamp=None, metaData=None):
        self.certificate = certificate
        self.accessTokenV2 = accessTokenV2
        self.tokenV3IssueResult = tokenV3IssueResult
        self.mid = mid
        self.lastBindTimestamp = lastBindTimestamp
        self.metaData = metaData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.accessTokenV2 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.tokenV3IssueResult = TokenV3IssueResult()
                    self.tokenV3IssueResult.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.lastBindTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem340) = iprot.readMapBegin()
                    for _ in range(elem340):
                        elem342 = iprot.readString()
                        elem341 = iprot.readString()
                        self.metaData[elem342] = elem341
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('QrCodeLoginV2Response')
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 1)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        if self.accessTokenV2 is not None:
            oprot.writeFieldBegin('accessTokenV2', TType.STRING, 2)
            oprot.writeString(self.accessTokenV2)
            oprot.writeFieldEnd()
        if self.tokenV3IssueResult is not None:
            oprot.writeFieldBegin('tokenV3IssueResult', TType.STRUCT, 3)
            self.tokenV3IssueResult.write(oprot)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 4)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.lastBindTimestamp is not None:
            oprot.writeFieldBegin('lastBindTimestamp', TType.I64, 9)
            oprot.writeI64(self.lastBindTimestamp)
            oprot.writeFieldEnd()
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem344, elem343 in self.metaData.items():
                oprot.writeString(elem344)
                oprot.writeString(elem343)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        value = (value * 31) ^ hash(make_hashable(self.accessTokenV2))
        value = (value * 31) ^ hash(make_hashable(self.tokenV3IssueResult))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.lastBindTimestamp))
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CancelPinCodeRequest(object):
    """
    Attributes:
     - authSessionId
    """
    def __init__(self, authSessionId=None):
        self.authSessionId = authSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CancelPinCodeRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CancelPinCodeResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CancelPinCodeResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetLoginActorContextRequest(object):
    """
    Attributes:
     - authSessionId
    """
    def __init__(self, authSessionId=None):
        self.authSessionId = authSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetLoginActorContextRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetLoginActorContextResponse(object):
    """
    Attributes:
     - appName
     - accessLocation
    """
    def __init__(self, appName=None, accessLocation=None):
        self.appName = appName
        self.accessLocation = accessLocation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.accessLocation = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetLoginActorContextResponse')
        if self.appName is not None:
            oprot.writeFieldBegin('appName', TType.STRING, 1)
            oprot.writeString(self.appName)
            oprot.writeFieldEnd()
        if self.accessLocation is not None:
            oprot.writeFieldBegin('accessLocation', TType.STRING, 2)
            oprot.writeString(self.accessLocation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.appName))
        value = (value * 31) ^ hash(make_hashable(self.accessLocation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerifyQrCodeRequest(object):
    """
    Attributes:
     - authSessionId
     - metaData
    """
    def __init__(self, authSessionId=None, metaData=None):
        self.authSessionId = authSessionId
        self.metaData = metaData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_, _, elem345) = iprot.readMapBegin()
                    for _ in range(elem345):
                        elem347 = iprot.readString()
                        elem346 = iprot.readString()
                        self.metaData[elem347] = elem346
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerifyQrCodeRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for elem349, elem348 in self.metaData.items():
                oprot.writeString(elem349)
                oprot.writeString(elem348)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        value = (value * 31) ^ hash(make_hashable(self.metaData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerifyQrCodeResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerifyQrCodeResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerifyPinCodeRequest(object):
    """
    Attributes:
     - authSessionId
     - pinCode
    """
    def __init__(self, authSessionId=None, pinCode=None):
        self.authSessionId = authSessionId
        self.pinCode = pinCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pinCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerifyPinCodeRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        if self.pinCode is not None:
            oprot.writeFieldBegin('pinCode', TType.STRING, 2)
            oprot.writeString(self.pinCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        value = (value * 31) ^ hash(make_hashable(self.pinCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerifyPinCodeResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerifyPinCodeResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckQrCodeVerifiedRequest(object):
    """
    Attributes:
     - authSessionId
    """
    def __init__(self, authSessionId=None):
        self.authSessionId = authSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckQrCodeVerifiedRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckQrCodeVerifiedResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckQrCodeVerifiedResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckPinCodeVerifiedRequest(object):
    """
    Attributes:
     - authSessionId
    """
    def __init__(self, authSessionId=None):
        self.authSessionId = authSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckPinCodeVerifiedRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CheckPinCodeVerifiedResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CheckPinCodeVerifiedResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SecondaryQrCodeException(TException):
    """
    Attributes:
     - code
     - alertMessage
    """
    def __init__(self, code=None, alertMessage=None):
        self.code = code
        self.alertMessage = alertMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = SecondaryQrErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.alertMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SecondaryQrCodeException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.alertMessage is not None:
            oprot.writeFieldBegin('alertMessage', TType.STRING, 2)
            oprot.writeString(self.alertMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.alertMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = CoinErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem350) = iprot.readMapBegin()
                    for _ in range(elem350):
                        elem352 = iprot.readString()
                        elem351 = iprot.readString()
                        self.parameterMap[elem352] = elem351
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem354, elem353 in self.parameterMap.items():
                oprot.writeString(elem354)
                oprot.writeString(elem353)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TalkException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = TalkErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem355) = iprot.readMapBegin()
                    for _ in range(elem355):
                        elem357 = iprot.readString()
                        elem356 = iprot.readString()
                        self.parameterMap[elem357] = elem356
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TalkException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem359, elem358 in self.parameterMap.items():
                oprot.writeString(elem359)
                oprot.writeString(elem358)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class E2EEKeyBackupException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = E2EEKeyBackupErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem360) = iprot.readMapBegin()
                    for _ in range(elem360):
                        elem362 = iprot.readString()
                        elem361 = iprot.readString()
                        self.parameterMap[elem362] = elem361
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('E2EEKeyBackupException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem364, elem363 in self.parameterMap.items():
                oprot.writeString(elem364)
                oprot.writeString(elem363)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = ChannelErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem365) = iprot.readMapBegin()
                    for _ in range(elem365):
                        elem367 = iprot.readString()
                        elem366 = iprot.readString()
                        self.parameterMap[elem367] = elem366
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem369, elem368 in self.parameterMap.items():
                oprot.writeString(elem369)
                oprot.writeString(elem368)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatappException(TException):
    """
    Attributes:
     - code
     - reason
    """
    def __init__(self, code=None, reason=None):
        self.code = code
        self.reason = reason

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = ChatappErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatappException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

