#
# Autogenerated by Frugal Compiler (3.16.5)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from frugal.util import make_hashable
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol


class CallType(int):
    AUDIO = 1
    VIDEO = 2
    FACEPLAY = 3

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
        3: "FACEPLAY",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
        "FACEPLAY": 3,
    }

class CallFlowType(int):
    NEW = 1
    PLANET = 2

    _VALUES_TO_NAMES = {
        1: "NEW",
        2: "PLANET",
    }

    _NAMES_TO_VALUES = {
        "NEW": 1,
        "PLANET": 2,
    }

class CallProto(int):
    STANDARD = 1
    CONSTELLA = 2

    _VALUES_TO_NAMES = {
        1: "STANDARD",
        2: "CONSTELLA",
    }

    _NAMES_TO_VALUES = {
        "STANDARD": 1,
        "CONSTELLA": 2,
    }

class MediaType(int):
    AUDIO = 1
    VIDEO = 2
    LIVE = 3

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
        3: "LIVE",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
        "LIVE": 3,
    }

class TalkErrorCode(int):
    ILLEGAL_ARGUMENT = 0
    AUTHENTICATION_FAILED = 1
    DB_FAILED = 2
    INVALID_STATE = 3
    EXCESSIVE_ACCESS = 4
    NOT_FOUND = 5
    INVALID_MID = 9
    NOT_A_MEMBER = 10
    INVALID_LENGTH = 6
    NOT_AVAILABLE_USER = 7
    NOT_AUTHORIZED_DEVICE = 8
    NOT_AUTHORIZED_SESSION = 14
    INCOMPATIBLE_APP_VERSION = 11
    NOT_READY = 12
    NOT_AVAILABLE_SESSION = 13
    SYSTEM_ERROR = 15
    NO_AVAILABLE_VERIFICATION_METHOD = 16
    NOT_AUTHENTICATED = 17
    INVALID_IDENTITY_CREDENTIAL = 18
    NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19
    INTERNAL_ERROR = 20
    NO_SUCH_IDENTITY_IDENFIER = 21
    DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22
    ILLEGAL_IDENTITY_CREDENTIAL = 23
    UNKNOWN_CHANNEL = 24
    NO_SUCH_MESSAGE_BOX = 25
    NOT_AVAILABLE_MESSAGE_BOX = 26
    CHANNEL_DOES_NOT_MATCH = 27
    NOT_YOUR_MESSAGE = 28
    MESSAGE_DEFINED_ERROR = 29
    USER_CANNOT_ACCEPT_PRESENTS = 30
    USER_NOT_STICKER_OWNER = 32
    MAINTENANCE_ERROR = 33
    ACCOUNT_NOT_MATCHED = 34
    ABUSE_BLOCK = 35
    NOT_FRIEND = 36
    NOT_ALLOWED_CALL = 37
    BLOCK_FRIEND = 38
    INCOMPATIBLE_VOIP_VERSION = 39
    INVALID_SNS_ACCESS_TOKEN = 40
    EXTERNAL_SERVICE_NOT_AVAILABLE = 41
    NOT_ALLOWED_ADD_CONTACT = 42
    NOT_CERTIFICATED = 43
    NOT_ALLOWED_SECONDARY_DEVICE = 44
    INVALID_PIN_CODE = 45
    NOT_FOUND_IDENTITY_CREDENTIAL = 46
    EXCEED_FILE_MAX_SIZE = 47
    EXCEED_DAILY_QUOTA = 48
    NOT_SUPPORT_SEND_FILE = 49
    MUST_UPGRADE = 50
    NOT_AVAILABLE_PIN_CODE_SESSION = 51
    EXPIRED_REVISION = 52
    NOT_YET_PHONE_NUMBER = 54
    BAD_CALL_NUMBER = 55
    UNAVAILABLE_CALL_NUMBER = 56
    NOT_SUPPORT_CALL_SERVICE = 57
    CONGESTION_CONTROL = 58
    NO_BALANCE = 59
    NOT_PERMITTED_CALLER_ID = 60
    NO_CALLER_ID_LIMIT_EXCEEDED = 61
    CALLER_ID_VERIFICATION_REQUIRED = 62
    NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63
    MESSAGE_NOT_FOUND = 64
    INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65
    ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66
    ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67
    INVALID_PASSWORD_FORMAT = 69
    FEATURE_RESTRICTED = 70
    MESSAGE_NOT_DESTRUCTIBLE = 71
    PAID_CALL_REDEEM_FAILED = 72
    PREVENTED_JOIN_BY_TICKET = 73
    SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75
    SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76
    SECURITY_CENTER_NOT_VERIFIED = 77
    SECURITY_CENTER_BLOCKED_BY_SETTING = 78
    SECURITY_CENTER_BLOCKED = 79
    TALK_PROXY_EXCEPTION = 80
    E2EE_INVALID_PROTOCOL = 81
    E2EE_RETRY_ENCRYPT = 82
    E2EE_UPDATE_SENDER_KEY = 83
    E2EE_UPDATE_RECEIVER_KEY = 84
    E2EE_INVALID_ARGUMENT = 85
    E2EE_INVALID_VERSION = 86
    E2EE_SENDER_DISABLED = 87
    E2EE_RECEIVER_DISABLED = 88
    E2EE_SENDER_NOT_ALLOWED = 89
    E2EE_RECEIVER_NOT_ALLOWED = 90
    E2EE_RESEND_FAIL = 91
    E2EE_RESEND_OK = 92
    HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93
    E2EE_UPDATE_PRIMARY_DEVICE = 94
    SUCCESS = 95
    CANCEL = 96
    E2EE_PRIMARY_NOT_SUPPORT = 97
    E2EE_RETRY_PLAIN = 98
    E2EE_RECREATE_GROUP_KEY = 99
    E2EE_GROUP_TOO_MANY_MEMBERS = 100
    SERVER_BUSY = 101
    NOT_ALLOWED_ADD_FOLLOW = 102
    INCOMING_FRIEND_REQUEST_LIMIT = 103
    OUTGOING_FRIEND_REQUEST_LIMIT = 104
    OUTGOING_FRIEND_REQUEST_QUOTA = 105
    DUPLICATED = 106
    BANNED = 107
    NOT_AN_INVITEE = 108
    NOT_AN_OUTSIDER = 109
    EMPTY_GROUP = 111
    EXCEED_FOLLOW_LIMIT = 112
    UNSUPPORTED_ACCOUNT_TYPE = 113
    AGREEMENT_REQUIRED = 114
    SHOULD_RETRY = 115
    OVER_MAX_CHATS_PER_USER = 116
    NOT_AVAILABLE_API = 117
    INVALID_OTP = 118
    MUST_REFRESH_V3_TOKEN = 119
    ALREADY_EXPIRED = 120
    USER_NOT_STICON_OWNER = 121
    REFRESH_MEDIA_FLOW = 122
    EXCEED_FOLLOWER_LIMIT = 123

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "AUTHENTICATION_FAILED",
        2: "DB_FAILED",
        3: "INVALID_STATE",
        4: "EXCESSIVE_ACCESS",
        5: "NOT_FOUND",
        9: "INVALID_MID",
        10: "NOT_A_MEMBER",
        6: "INVALID_LENGTH",
        7: "NOT_AVAILABLE_USER",
        8: "NOT_AUTHORIZED_DEVICE",
        14: "NOT_AUTHORIZED_SESSION",
        11: "INCOMPATIBLE_APP_VERSION",
        12: "NOT_READY",
        13: "NOT_AVAILABLE_SESSION",
        15: "SYSTEM_ERROR",
        16: "NO_AVAILABLE_VERIFICATION_METHOD",
        17: "NOT_AUTHENTICATED",
        18: "INVALID_IDENTITY_CREDENTIAL",
        19: "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
        20: "INTERNAL_ERROR",
        21: "NO_SUCH_IDENTITY_IDENFIER",
        22: "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
        23: "ILLEGAL_IDENTITY_CREDENTIAL",
        24: "UNKNOWN_CHANNEL",
        25: "NO_SUCH_MESSAGE_BOX",
        26: "NOT_AVAILABLE_MESSAGE_BOX",
        27: "CHANNEL_DOES_NOT_MATCH",
        28: "NOT_YOUR_MESSAGE",
        29: "MESSAGE_DEFINED_ERROR",
        30: "USER_CANNOT_ACCEPT_PRESENTS",
        32: "USER_NOT_STICKER_OWNER",
        33: "MAINTENANCE_ERROR",
        34: "ACCOUNT_NOT_MATCHED",
        35: "ABUSE_BLOCK",
        36: "NOT_FRIEND",
        37: "NOT_ALLOWED_CALL",
        38: "BLOCK_FRIEND",
        39: "INCOMPATIBLE_VOIP_VERSION",
        40: "INVALID_SNS_ACCESS_TOKEN",
        41: "EXTERNAL_SERVICE_NOT_AVAILABLE",
        42: "NOT_ALLOWED_ADD_CONTACT",
        43: "NOT_CERTIFICATED",
        44: "NOT_ALLOWED_SECONDARY_DEVICE",
        45: "INVALID_PIN_CODE",
        46: "NOT_FOUND_IDENTITY_CREDENTIAL",
        47: "EXCEED_FILE_MAX_SIZE",
        48: "EXCEED_DAILY_QUOTA",
        49: "NOT_SUPPORT_SEND_FILE",
        50: "MUST_UPGRADE",
        51: "NOT_AVAILABLE_PIN_CODE_SESSION",
        52: "EXPIRED_REVISION",
        54: "NOT_YET_PHONE_NUMBER",
        55: "BAD_CALL_NUMBER",
        56: "UNAVAILABLE_CALL_NUMBER",
        57: "NOT_SUPPORT_CALL_SERVICE",
        58: "CONGESTION_CONTROL",
        59: "NO_BALANCE",
        60: "NOT_PERMITTED_CALLER_ID",
        61: "NO_CALLER_ID_LIMIT_EXCEEDED",
        62: "CALLER_ID_VERIFICATION_REQUIRED",
        63: "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
        64: "MESSAGE_NOT_FOUND",
        65: "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
        66: "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
        67: "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
        69: "INVALID_PASSWORD_FORMAT",
        70: "FEATURE_RESTRICTED",
        71: "MESSAGE_NOT_DESTRUCTIBLE",
        72: "PAID_CALL_REDEEM_FAILED",
        73: "PREVENTED_JOIN_BY_TICKET",
        75: "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
        76: "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
        77: "SECURITY_CENTER_NOT_VERIFIED",
        78: "SECURITY_CENTER_BLOCKED_BY_SETTING",
        79: "SECURITY_CENTER_BLOCKED",
        80: "TALK_PROXY_EXCEPTION",
        81: "E2EE_INVALID_PROTOCOL",
        82: "E2EE_RETRY_ENCRYPT",
        83: "E2EE_UPDATE_SENDER_KEY",
        84: "E2EE_UPDATE_RECEIVER_KEY",
        85: "E2EE_INVALID_ARGUMENT",
        86: "E2EE_INVALID_VERSION",
        87: "E2EE_SENDER_DISABLED",
        88: "E2EE_RECEIVER_DISABLED",
        89: "E2EE_SENDER_NOT_ALLOWED",
        90: "E2EE_RECEIVER_NOT_ALLOWED",
        91: "E2EE_RESEND_FAIL",
        92: "E2EE_RESEND_OK",
        93: "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
        94: "E2EE_UPDATE_PRIMARY_DEVICE",
        95: "SUCCESS",
        96: "CANCEL",
        97: "E2EE_PRIMARY_NOT_SUPPORT",
        98: "E2EE_RETRY_PLAIN",
        99: "E2EE_RECREATE_GROUP_KEY",
        100: "E2EE_GROUP_TOO_MANY_MEMBERS",
        101: "SERVER_BUSY",
        102: "NOT_ALLOWED_ADD_FOLLOW",
        103: "INCOMING_FRIEND_REQUEST_LIMIT",
        104: "OUTGOING_FRIEND_REQUEST_LIMIT",
        105: "OUTGOING_FRIEND_REQUEST_QUOTA",
        106: "DUPLICATED",
        107: "BANNED",
        108: "NOT_AN_INVITEE",
        109: "NOT_AN_OUTSIDER",
        111: "EMPTY_GROUP",
        112: "EXCEED_FOLLOW_LIMIT",
        113: "UNSUPPORTED_ACCOUNT_TYPE",
        114: "AGREEMENT_REQUIRED",
        115: "SHOULD_RETRY",
        116: "OVER_MAX_CHATS_PER_USER",
        117: "NOT_AVAILABLE_API",
        118: "INVALID_OTP",
        119: "MUST_REFRESH_V3_TOKEN",
        120: "ALREADY_EXPIRED",
        121: "USER_NOT_STICON_OWNER",
        122: "REFRESH_MEDIA_FLOW",
        123: "EXCEED_FOLLOWER_LIMIT",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "AUTHENTICATION_FAILED": 1,
        "DB_FAILED": 2,
        "INVALID_STATE": 3,
        "EXCESSIVE_ACCESS": 4,
        "NOT_FOUND": 5,
        "INVALID_MID": 9,
        "NOT_A_MEMBER": 10,
        "INVALID_LENGTH": 6,
        "NOT_AVAILABLE_USER": 7,
        "NOT_AUTHORIZED_DEVICE": 8,
        "NOT_AUTHORIZED_SESSION": 14,
        "INCOMPATIBLE_APP_VERSION": 11,
        "NOT_READY": 12,
        "NOT_AVAILABLE_SESSION": 13,
        "SYSTEM_ERROR": 15,
        "NO_AVAILABLE_VERIFICATION_METHOD": 16,
        "NOT_AUTHENTICATED": 17,
        "INVALID_IDENTITY_CREDENTIAL": 18,
        "NOT_AVAILABLE_IDENTITY_IDENTIFIER": 19,
        "INTERNAL_ERROR": 20,
        "NO_SUCH_IDENTITY_IDENFIER": 21,
        "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": 22,
        "ILLEGAL_IDENTITY_CREDENTIAL": 23,
        "UNKNOWN_CHANNEL": 24,
        "NO_SUCH_MESSAGE_BOX": 25,
        "NOT_AVAILABLE_MESSAGE_BOX": 26,
        "CHANNEL_DOES_NOT_MATCH": 27,
        "NOT_YOUR_MESSAGE": 28,
        "MESSAGE_DEFINED_ERROR": 29,
        "USER_CANNOT_ACCEPT_PRESENTS": 30,
        "USER_NOT_STICKER_OWNER": 32,
        "MAINTENANCE_ERROR": 33,
        "ACCOUNT_NOT_MATCHED": 34,
        "ABUSE_BLOCK": 35,
        "NOT_FRIEND": 36,
        "NOT_ALLOWED_CALL": 37,
        "BLOCK_FRIEND": 38,
        "INCOMPATIBLE_VOIP_VERSION": 39,
        "INVALID_SNS_ACCESS_TOKEN": 40,
        "EXTERNAL_SERVICE_NOT_AVAILABLE": 41,
        "NOT_ALLOWED_ADD_CONTACT": 42,
        "NOT_CERTIFICATED": 43,
        "NOT_ALLOWED_SECONDARY_DEVICE": 44,
        "INVALID_PIN_CODE": 45,
        "NOT_FOUND_IDENTITY_CREDENTIAL": 46,
        "EXCEED_FILE_MAX_SIZE": 47,
        "EXCEED_DAILY_QUOTA": 48,
        "NOT_SUPPORT_SEND_FILE": 49,
        "MUST_UPGRADE": 50,
        "NOT_AVAILABLE_PIN_CODE_SESSION": 51,
        "EXPIRED_REVISION": 52,
        "NOT_YET_PHONE_NUMBER": 54,
        "BAD_CALL_NUMBER": 55,
        "UNAVAILABLE_CALL_NUMBER": 56,
        "NOT_SUPPORT_CALL_SERVICE": 57,
        "CONGESTION_CONTROL": 58,
        "NO_BALANCE": 59,
        "NOT_PERMITTED_CALLER_ID": 60,
        "NO_CALLER_ID_LIMIT_EXCEEDED": 61,
        "CALLER_ID_VERIFICATION_REQUIRED": 62,
        "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 63,
        "MESSAGE_NOT_FOUND": 64,
        "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": 65,
        "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": 66,
        "ACCOUNT_MIGRATION_PINCODE_BLOCKED": 67,
        "INVALID_PASSWORD_FORMAT": 69,
        "FEATURE_RESTRICTED": 70,
        "MESSAGE_NOT_DESTRUCTIBLE": 71,
        "PAID_CALL_REDEEM_FAILED": 72,
        "PREVENTED_JOIN_BY_TICKET": 73,
        "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": 75,
        "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": 76,
        "SECURITY_CENTER_NOT_VERIFIED": 77,
        "SECURITY_CENTER_BLOCKED_BY_SETTING": 78,
        "SECURITY_CENTER_BLOCKED": 79,
        "TALK_PROXY_EXCEPTION": 80,
        "E2EE_INVALID_PROTOCOL": 81,
        "E2EE_RETRY_ENCRYPT": 82,
        "E2EE_UPDATE_SENDER_KEY": 83,
        "E2EE_UPDATE_RECEIVER_KEY": 84,
        "E2EE_INVALID_ARGUMENT": 85,
        "E2EE_INVALID_VERSION": 86,
        "E2EE_SENDER_DISABLED": 87,
        "E2EE_RECEIVER_DISABLED": 88,
        "E2EE_SENDER_NOT_ALLOWED": 89,
        "E2EE_RECEIVER_NOT_ALLOWED": 90,
        "E2EE_RESEND_FAIL": 91,
        "E2EE_RESEND_OK": 92,
        "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": 93,
        "E2EE_UPDATE_PRIMARY_DEVICE": 94,
        "SUCCESS": 95,
        "CANCEL": 96,
        "E2EE_PRIMARY_NOT_SUPPORT": 97,
        "E2EE_RETRY_PLAIN": 98,
        "E2EE_RECREATE_GROUP_KEY": 99,
        "E2EE_GROUP_TOO_MANY_MEMBERS": 100,
        "SERVER_BUSY": 101,
        "NOT_ALLOWED_ADD_FOLLOW": 102,
        "INCOMING_FRIEND_REQUEST_LIMIT": 103,
        "OUTGOING_FRIEND_REQUEST_LIMIT": 104,
        "OUTGOING_FRIEND_REQUEST_QUOTA": 105,
        "DUPLICATED": 106,
        "BANNED": 107,
        "NOT_AN_INVITEE": 108,
        "NOT_AN_OUTSIDER": 109,
        "EMPTY_GROUP": 111,
        "EXCEED_FOLLOW_LIMIT": 112,
        "UNSUPPORTED_ACCOUNT_TYPE": 113,
        "AGREEMENT_REQUIRED": 114,
        "SHOULD_RETRY": 115,
        "OVER_MAX_CHATS_PER_USER": 116,
        "NOT_AVAILABLE_API": 117,
        "INVALID_OTP": 118,
        "MUST_REFRESH_V3_TOKEN": 119,
        "ALREADY_EXPIRED": 120,
        "USER_NOT_STICON_OWNER": 121,
        "REFRESH_MEDIA_FLOW": 122,
        "EXCEED_FOLLOWER_LIMIT": 123,
    }

class CallHost(object):
    """
    Attributes:
     - host
     - port
     - zone
    """
    def __init__(self, host=None, port=None, zone=None):
        self.host = host
        self.port = port
        self.zone = zone

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.zone = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CallHost')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.zone is not None:
            oprot.writeFieldBegin('zone', TType.STRING, 3)
            oprot.writeString(self.zone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.host))
        value = (value * 31) ^ hash(make_hashable(self.port))
        value = (value * 31) ^ hash(make_hashable(self.zone))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupCall(object):
    """
    Attributes:
     - online
     - chatMid
     - hostMid
     - memberMids
     - started
     - mediaType
     - protocol
    """
    def __init__(self, online=None, chatMid=None, hostMid=None, memberMids=None, started=None, mediaType=None, protocol=None):
        self.online = online
        self.chatMid = chatMid
        self.hostMid = hostMid
        self.memberMids = memberMids
        self.started = started
        self.mediaType = mediaType
        self.protocol = protocol

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hostMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.memberMids = []
                    (_, elem0) = iprot.readListBegin()
                    for _ in range(elem0):
                        elem1 = iprot.readString()
                        self.memberMids.append(elem1)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.started = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.mediaType = MediaType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.protocol = CallProto(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupCall')
        if self.online is not None:
            oprot.writeFieldBegin('online', TType.BOOL, 1)
            oprot.writeBool(self.online)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.hostMid is not None:
            oprot.writeFieldBegin('hostMid', TType.STRING, 3)
            oprot.writeString(self.hostMid)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.memberMids))
            for elem2 in self.memberMids:
                oprot.writeString(elem2)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.started is not None:
            oprot.writeFieldBegin('started', TType.I64, 5)
            oprot.writeI64(self.started)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.I32, 6)
            oprot.writeI32(self.mediaType)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.I32, 7)
            oprot.writeI32(self.protocol)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.online))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.hostMid))
        value = (value * 31) ^ hash(make_hashable(self.memberMids))
        value = (value * 31) ^ hash(make_hashable(self.started))
        value = (value * 31) ^ hash(make_hashable(self.mediaType))
        value = (value * 31) ^ hash(make_hashable(self.protocol))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CallRoute(object):
    """
    Attributes:
     - fromToken
     - callFlowType
     - voipAddress
     - voipUdpPort
     - voipTcpPort
     - fromZone
     - toZone
     - fakeCall
     - ringbackTone
     - toMid
     - tunneling
     - commParam
     - stid
     - encFromMid
     - encToMid
     - switchableToVideo
     - voipAddress6
     - w2pGw
    """
    def __init__(self, fromToken=None, callFlowType=None, voipAddress=None, voipUdpPort=None, voipTcpPort=None, fromZone=None, toZone=None, fakeCall=None, ringbackTone=None, toMid=None, tunneling=None, commParam=None, stid=None, encFromMid=None, encToMid=None, switchableToVideo=None, voipAddress6=None, w2pGw=None):
        self.fromToken = fromToken
        self.callFlowType = callFlowType
        self.voipAddress = voipAddress
        self.voipUdpPort = voipUdpPort
        self.voipTcpPort = voipTcpPort
        self.fromZone = fromZone
        self.toZone = toZone
        self.fakeCall = fakeCall
        self.ringbackTone = ringbackTone
        self.toMid = toMid
        self.tunneling = tunneling
        self.commParam = commParam
        self.stid = stid
        self.encFromMid = encFromMid
        self.encToMid = encToMid
        self.switchableToVideo = switchableToVideo
        self.voipAddress6 = voipAddress6
        self.w2pGw = w2pGw

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fromToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.callFlowType = CallFlowType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.voipAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.voipUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.voipTcpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.fromZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.toZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.fakeCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ringbackTone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.toMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.tunneling = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.commParam = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.stid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.encFromMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.encToMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.switchableToVideo = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.voipAddress6 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.w2pGw = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CallRoute')
        if self.fromToken is not None:
            oprot.writeFieldBegin('fromToken', TType.STRING, 1)
            oprot.writeString(self.fromToken)
            oprot.writeFieldEnd()
        if self.callFlowType is not None:
            oprot.writeFieldBegin('callFlowType', TType.I32, 2)
            oprot.writeI32(self.callFlowType)
            oprot.writeFieldEnd()
        if self.voipAddress is not None:
            oprot.writeFieldBegin('voipAddress', TType.STRING, 3)
            oprot.writeString(self.voipAddress)
            oprot.writeFieldEnd()
        if self.voipUdpPort is not None:
            oprot.writeFieldBegin('voipUdpPort', TType.I32, 4)
            oprot.writeI32(self.voipUdpPort)
            oprot.writeFieldEnd()
        if self.voipTcpPort is not None:
            oprot.writeFieldBegin('voipTcpPort', TType.I32, 5)
            oprot.writeI32(self.voipTcpPort)
            oprot.writeFieldEnd()
        if self.fromZone is not None:
            oprot.writeFieldBegin('fromZone', TType.STRING, 6)
            oprot.writeString(self.fromZone)
            oprot.writeFieldEnd()
        if self.toZone is not None:
            oprot.writeFieldBegin('toZone', TType.STRING, 7)
            oprot.writeString(self.toZone)
            oprot.writeFieldEnd()
        if self.fakeCall is not None:
            oprot.writeFieldBegin('fakeCall', TType.BOOL, 8)
            oprot.writeBool(self.fakeCall)
            oprot.writeFieldEnd()
        if self.ringbackTone is not None:
            oprot.writeFieldBegin('ringbackTone', TType.STRING, 9)
            oprot.writeString(self.ringbackTone)
            oprot.writeFieldEnd()
        if self.toMid is not None:
            oprot.writeFieldBegin('toMid', TType.STRING, 10)
            oprot.writeString(self.toMid)
            oprot.writeFieldEnd()
        if self.tunneling is not None:
            oprot.writeFieldBegin('tunneling', TType.STRING, 11)
            oprot.writeString(self.tunneling)
            oprot.writeFieldEnd()
        if self.commParam is not None:
            oprot.writeFieldBegin('commParam', TType.STRING, 12)
            oprot.writeString(self.commParam)
            oprot.writeFieldEnd()
        if self.stid is not None:
            oprot.writeFieldBegin('stid', TType.STRING, 13)
            oprot.writeString(self.stid)
            oprot.writeFieldEnd()
        if self.encFromMid is not None:
            oprot.writeFieldBegin('encFromMid', TType.STRING, 14)
            oprot.writeString(self.encFromMid)
            oprot.writeFieldEnd()
        if self.encToMid is not None:
            oprot.writeFieldBegin('encToMid', TType.STRING, 15)
            oprot.writeString(self.encToMid)
            oprot.writeFieldEnd()
        if self.switchableToVideo is not None:
            oprot.writeFieldBegin('switchableToVideo', TType.BOOL, 16)
            oprot.writeBool(self.switchableToVideo)
            oprot.writeFieldEnd()
        if self.voipAddress6 is not None:
            oprot.writeFieldBegin('voipAddress6', TType.STRING, 17)
            oprot.writeString(self.voipAddress6)
            oprot.writeFieldEnd()
        if self.w2pGw is not None:
            oprot.writeFieldBegin('w2pGw', TType.STRING, 18)
            oprot.writeString(self.w2pGw)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.fromToken))
        value = (value * 31) ^ hash(make_hashable(self.callFlowType))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress))
        value = (value * 31) ^ hash(make_hashable(self.voipUdpPort))
        value = (value * 31) ^ hash(make_hashable(self.voipTcpPort))
        value = (value * 31) ^ hash(make_hashable(self.fromZone))
        value = (value * 31) ^ hash(make_hashable(self.toZone))
        value = (value * 31) ^ hash(make_hashable(self.fakeCall))
        value = (value * 31) ^ hash(make_hashable(self.ringbackTone))
        value = (value * 31) ^ hash(make_hashable(self.toMid))
        value = (value * 31) ^ hash(make_hashable(self.tunneling))
        value = (value * 31) ^ hash(make_hashable(self.commParam))
        value = (value * 31) ^ hash(make_hashable(self.stid))
        value = (value * 31) ^ hash(make_hashable(self.encFromMid))
        value = (value * 31) ^ hash(make_hashable(self.encToMid))
        value = (value * 31) ^ hash(make_hashable(self.switchableToVideo))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress6))
        value = (value * 31) ^ hash(make_hashable(self.w2pGw))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupCallRoute(object):
    """
    Attributes:
     - token
     - cscf
     - mix
     - hostMid
     - capabilities
     - proto
     - voipAddress
     - voipUdpPort
     - voipTcpPort
     - fromZone
     - commParam
     - polarisAddress
     - polarisUdpPort
     - polarisZone
     - orionAddress
     - voipAddress6
    """
    def __init__(self, token=None, cscf=None, mix=None, hostMid=None, capabilities=None, proto=None, voipAddress=None, voipUdpPort=None, voipTcpPort=None, fromZone=None, commParam=None, polarisAddress=None, polarisUdpPort=None, polarisZone=None, orionAddress=None, voipAddress6=None):
        self.token = token
        self.cscf = cscf
        self.mix = mix
        self.hostMid = hostMid
        self.capabilities = capabilities
        self.proto = proto
        self.voipAddress = voipAddress
        self.voipUdpPort = voipUdpPort
        self.voipTcpPort = voipTcpPort
        self.fromZone = fromZone
        self.commParam = commParam
        self.polarisAddress = polarisAddress
        self.polarisUdpPort = polarisUdpPort
        self.polarisZone = polarisZone
        self.orionAddress = orionAddress
        self.voipAddress6 = voipAddress6

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cscf = CallHost()
                    self.cscf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mix = CallHost()
                    self.mix.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.hostMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.capabilities = []
                    (_, elem3) = iprot.readListBegin()
                    for _ in range(elem3):
                        elem4 = iprot.readString()
                        self.capabilities.append(elem4)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.proto = CallProto(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.voipAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.voipUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.voipTcpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.fromZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.commParam = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.polarisAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.polarisUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.polarisZone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.orionAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.voipAddress6 = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupCallRoute')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.cscf is not None:
            oprot.writeFieldBegin('cscf', TType.STRUCT, 2)
            self.cscf.write(oprot)
            oprot.writeFieldEnd()
        if self.mix is not None:
            oprot.writeFieldBegin('mix', TType.STRUCT, 3)
            self.mix.write(oprot)
            oprot.writeFieldEnd()
        if self.hostMid is not None:
            oprot.writeFieldBegin('hostMid', TType.STRING, 4)
            oprot.writeString(self.hostMid)
            oprot.writeFieldEnd()
        if self.capabilities is not None:
            oprot.writeFieldBegin('capabilities', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.capabilities))
            for elem5 in self.capabilities:
                oprot.writeString(elem5)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proto is not None:
            oprot.writeFieldBegin('proto', TType.I32, 6)
            oprot.writeI32(self.proto)
            oprot.writeFieldEnd()
        if self.voipAddress is not None:
            oprot.writeFieldBegin('voipAddress', TType.STRING, 7)
            oprot.writeString(self.voipAddress)
            oprot.writeFieldEnd()
        if self.voipUdpPort is not None:
            oprot.writeFieldBegin('voipUdpPort', TType.I32, 8)
            oprot.writeI32(self.voipUdpPort)
            oprot.writeFieldEnd()
        if self.voipTcpPort is not None:
            oprot.writeFieldBegin('voipTcpPort', TType.I32, 9)
            oprot.writeI32(self.voipTcpPort)
            oprot.writeFieldEnd()
        if self.fromZone is not None:
            oprot.writeFieldBegin('fromZone', TType.STRING, 10)
            oprot.writeString(self.fromZone)
            oprot.writeFieldEnd()
        if self.commParam is not None:
            oprot.writeFieldBegin('commParam', TType.STRING, 11)
            oprot.writeString(self.commParam)
            oprot.writeFieldEnd()
        if self.polarisAddress is not None:
            oprot.writeFieldBegin('polarisAddress', TType.STRING, 12)
            oprot.writeString(self.polarisAddress)
            oprot.writeFieldEnd()
        if self.polarisUdpPort is not None:
            oprot.writeFieldBegin('polarisUdpPort', TType.I32, 13)
            oprot.writeI32(self.polarisUdpPort)
            oprot.writeFieldEnd()
        if self.polarisZone is not None:
            oprot.writeFieldBegin('polarisZone', TType.STRING, 14)
            oprot.writeString(self.polarisZone)
            oprot.writeFieldEnd()
        if self.orionAddress is not None:
            oprot.writeFieldBegin('orionAddress', TType.STRING, 15)
            oprot.writeString(self.orionAddress)
            oprot.writeFieldEnd()
        if self.voipAddress6 is not None:
            oprot.writeFieldBegin('voipAddress6', TType.STRING, 16)
            oprot.writeString(self.voipAddress6)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.cscf))
        value = (value * 31) ^ hash(make_hashable(self.mix))
        value = (value * 31) ^ hash(make_hashable(self.hostMid))
        value = (value * 31) ^ hash(make_hashable(self.capabilities))
        value = (value * 31) ^ hash(make_hashable(self.proto))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress))
        value = (value * 31) ^ hash(make_hashable(self.voipUdpPort))
        value = (value * 31) ^ hash(make_hashable(self.voipTcpPort))
        value = (value * 31) ^ hash(make_hashable(self.fromZone))
        value = (value * 31) ^ hash(make_hashable(self.commParam))
        value = (value * 31) ^ hash(make_hashable(self.polarisAddress))
        value = (value * 31) ^ hash(make_hashable(self.polarisUdpPort))
        value = (value * 31) ^ hash(make_hashable(self.polarisZone))
        value = (value * 31) ^ hash(make_hashable(self.orionAddress))
        value = (value * 31) ^ hash(make_hashable(self.voipAddress6))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TalkException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = TalkErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem6) = iprot.readMapBegin()
                    for _ in range(elem6):
                        elem8 = iprot.readString()
                        elem7 = iprot.readString()
                        self.parameterMap[elem8] = elem7
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TalkException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem10, elem9 in self.parameterMap.items():
                oprot.writeString(elem10)
                oprot.writeString(elem9)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

